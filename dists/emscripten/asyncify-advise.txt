[asyncify] invoke_iii is an import that can change the state
[asyncify] invoke_iiiii is an import that can change the state
[asyncify] invoke_iiii is an import that can change the state
[asyncify] invoke_vi is an import that can change the state
[asyncify] invoke_vii is an import that can change the state
[asyncify] emscripten_sleep is an import that can change the state
[asyncify] Common::ReadStream::readByte\28\29 can change the state due to initial scan
[asyncify] Adl::detectDOS33\28Common::SeekableReadStream&\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] Adl::getVersion_WOZ\28Common::File&\29 can change the state due to initial scan
[asyncify] Common::ReadStream::readUint16LE\28\29 can change the state due to initial scan
[asyncify] Common::ReadStream::readUint32BE\28\29 can change the state due to initial scan
[asyncify] Common::ReadStream::readUint32LE\28\29 can change the state due to initial scan
[asyncify] Adl::AdlMetaEngineDetection::detectGame\28Common::FSNode\20const&\2c\20Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\2c\20Common::Language\2c\20Common::Platform\2c\20Common::String\20const&\2c\20unsigned\20int\2c\20bool\29 can change the state due to initial scan
[asyncify] Adl::readTrack_WOZ\28Common::File&\2c\20unsigned\20int\2c\20bool\29 can change the state due to initial scan
[asyncify] Common::BasePtrTrackerInternal::decStrong\28\29 can change the state due to initial scan
[asyncify] Common::ReadStream::readUint16BE\28\29 can change the state due to initial scan
[asyncify] Common::BasePtrTrackerInternal::decWeak\28\29 can change the state due to initial scan
[asyncify] Adl::decodeTrack\28Common::SeekableReadStream&\2c\20unsigned\20int\2c\20bool\2c\20unsigned\20char*\2c\20unsigned\20int\2c\20Common::Array<bool>&\29 can change the state due to initial scan
[asyncify] Agi::WagFileParser::endOfProperties\28Common::SeekableReadStream\20const&\29\20const can change the state due to initial scan
[asyncify] AgiMetaEngineDetection::fallbackDetect\28Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\2c\20Common::FSList\20const&\2c\20ADDetectedGameExtraInfo**\29\20const can change the state due to initial scan
[asyncify] AGSMetaEngineDetection::detectGames\28Common::FSList\20const&\2c\20unsigned\20int\2c\20bool\29 can change the state due to initial scan
[asyncify] AGS3::isAGSFile\28Common::File&\29 can change the state due to initial scan
[asyncify] AGSMetaEngineDetection::fallbackDetect\28Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\2c\20Common::FSList\20const&\2c\20ADDetectedGameExtraInfo**\29\20const can change the state due to initial scan
[asyncify] CGE::ResourceManager::catRead\28unsigned\20char*\2c\20unsigned\20short\29 can change the state due to initial scan
[asyncify] CGE::CGEMetaEngineDetection::fallbackDetect\28Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\2c\20Common::FSList\20const&\2c\20ADDetectedGameExtraInfo**\29\20const can change the state due to initial scan
[asyncify] CGE2::CGE2MetaEngineDetection::fallbackDetect\28Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\2c\20Common::FSList\20const&\2c\20ADDetectedGameExtraInfo**\29\20const can change the state due to initial scan
[asyncify] Glk::Blorb::isBlorb\28Common::SeekableReadStream&\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] Glk::Blorb::readRIdx\28Common::SeekableReadStream&\2c\20Common::Array<Glk::ChunkEntry>&\29 can change the state due to initial scan
[asyncify] Glk::Blorb::getMember\28Common::Path\20const&\29\20const can change the state due to initial scan
[asyncify] Common::BasePtrTrackerImpl<Common::GenericArchiveMember>::destructObject\28\29 can change the state due to initial scan
[asyncify] DirectorMetaEngineDetection::fallbackDetect\28Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\2c\20Common::FSList\20const&\2c\20ADDetectedGameExtraInfo**\29\20const can change the state due to initial scan
[asyncify] GobMetaEngineDetection::fallbackDetect\28Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\2c\20Common::FSList\20const&\2c\20ADDetectedGameExtraInfo**\29\20const can change the state due to initial scan
[asyncify] Sci::SciMetaEngineDetection::fallbackDetect\28Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\2c\20Common::FSList\20const&\2c\20ADDetectedGameExtraInfo**\29\20const can change the state due to initial scan
[asyncify] Scumm::composeFileHashMap\28Common::HashMap<Common::String\2c\20Scumm::DetectorDesc\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>&\2c\20Common::FSList\20const&\2c\20int\2c\20char\20const*\20const*\29 can change the state due to initial scan
[asyncify] [asyncify] Scumm::searchFSNode\28Common::FSList\20const&\2c\20Common::String\20const&\2c\20Common::FSNode&\29 can change the state due to initial scan
[asyncify] Scumm::write_word\28Common::WriteStream*\2c\20unsigned\20short\29 can change the state due to initial scan
[asyncify] Scumm::write_byte\28Common::WriteStream*\2c\20unsigned\20char\29 can change the state due to initial scan
[asyncify] Scumm::ScummDiskImage::close\28\29 can change the state due to initial scan
[asyncify] [asyncify] Scumm::ScummDiskImage::read\28void*\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] Scumm::ScummDiskImage::openSubFile\28Common::String\20const&\29Scumm::ScummDiskImage::size\28\29\20const[asyncify] Scumm::ScummDiskImage::eos\28\29\20const can change the state due to initial scan
[asyncify] Scumm::ScummDiskImage::seek\28long\20long\2c\20int\29 can change the state due to initial scan
[asyncify] Common::WriteStream::finalize\28\29 can change the state due to initial scan
[asyncify] Scumm::ScummNESFile::close\28\29 can change the state due to initial scan
[asyncify] Scumm::ScummNESFile::open\28Common::Path\20const&\29 can change the state due to initial scan
[asyncify] ScummMetaEngineDetection::detectGames\28Common::FSList\20const&\2c\20unsigned\20int\2c\20bool\29 can change the state due to initial scan
[asyncify] Common::SeekableReadStream::skip\28unsigned\20int\29 can change the state due to initial scan
[asyncify] Scumm::ScummDiskImage::pos\28\29\20const can change the state due to initial scan
[asyncify] Scumm::ScummNESFile::openSubFile\28Common::String\20const&\29 can change the state due to initial scan
[asyncify] SkyMetaEngineDetection::detectGames\28Common::FSList\20const&\2c\20unsigned\20int\2c\20bool\29 can change the state due to initial scan
[asyncify] SludgeMetaEngineDetection::fallbackDetect\28Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\2c\20Common::FSList\20const&\2c\20ADDetectedGameExtraInfo**\29\20const can change the state due to initial scan
[asyncify] TinselMetaEngineDetection::fallbackDetect\28Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\2c\20Common::FSList\20const&\2c\20ADDetectedGameExtraInfo**\29\20const can change the state due to initial scan
[asyncify] TuckerMetaEngineDetection::fallbackDetect\28Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\2c\20Common::FSList\20const&\2c\20ADDetectedGameExtraInfo**\29\20const can change the state due to initial scan
[asyncify] Wintermute::WintermuteMetaEngineDetection::fallbackDetect\28Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\2c\20Common::FSList\20const&\2c\20ADDetectedGameExtraInfo**\29\20const can change the state due to initial scan
[asyncify] GlkMetaEngineDetection::detectGames\28Common::FSList\20const&\2c\20unsigned\20int\2c\20bool\29 can change the state due to initial scan
[asyncify] OSystem_SDL::init\28\29 can change the state due to initial scan
[asyncify] OSystem_SDL::~OSystem_SDL\28\29 can change the state due to initial scan
[asyncify] OSystem_SDL::createLogFile\28\29 can change the state due to initial scan
[asyncify] OSystem_SDL::hasTextInClipboard\28\29 can change the state due to initial scan
[asyncify] OSystem_SDL::getTextFromClipboard\28\29 can change the state due to initial scan
[asyncify] OSystem_SDL::setTextInClipboard\28Common::U32String\20const&\29 can change the state due to initial scan
[asyncify] OSystem_SDL::initBackend\28\29 can change the state due to initial scan
[asyncify] OSystem_SDL::getGlobalKeymaps\28\29 can change the state due to initial scan
[asyncify] OSystem_SDL::getSupportedGraphicsModes\28\29\20const[asyncify] OSystem_SDL::getDefaultGraphicsMode\28\29\20const can change the state due to initial scan
[asyncify] OSystem_SDL::getGraphicsMode\28\29\20const can change the state due to initial scan
[asyncify] SdlWindow::setupIcon\28\29 can change the state due to initial scan
[asyncify] SdlWindow::getDpiScalingFactor\28\29\20const can change the state due to initial scan
[asyncify] OSystem_SDL::setGraphicsMode\28int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] OSystem_POSIX::getScreenshotsPath\28\29 can change the state due to initial scan
[asyncify] SdlWindow::createOrUpdateWindow\28int\2c\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] PluginManager::destroy\28\29 can change the state due to initial scan
[asyncify] launcherDialog\28\29 can change the state due to initial scan
[asyncify] setupGraphics\28OSystem&\29 can change the state due to initial scan
[asyncify] runGame\28Plugin\20const*\2c\20Plugin\20const*\2c\20OSystem&\2c\20Common::String\20const&\29 can change the state due to initial scan
[asyncify] Common::SearchSet::~SearchSet\28\29 can change the state due to initial scan
[asyncify] Plugin::getName\28\29\20const can change the state due to initial scan
[asyncify] PluginManager::~PluginManager\28\29 can change the state due to initial scan
[asyncify] PluginManager::unloadPluginsExcept\28PluginType\2c\20Plugin\20const*\2c\20bool\29 can change the state due to initial scan
[asyncify] Base::getGameList\28Common::FSNode\20const&\29 can change the state due to initial scan
[asyncify] PluginManager::getEngineFromMetaEngine\28Plugin\20const*\29 can change the state due to initial scan
[asyncify] PluginManager::tryLoadPlugin\28Plugin*\29 can change the state due to initial scan
[asyncify] [asyncify] PluginManager::loadAllPlugins\28\29PluginManager::findLoadedPlugin\28Common::String\20const&\29[asyncify] PluginManager::addToPluginsInMemList\28Plugin*\29 can change the state due to initial scan
[asyncify] EngineManager::findPlugin\28Common::String\20const&\29\20const can change the state due to initial scan
[asyncify] EngineManager::findGamesMatching\28Common::String\20const&\2c\20Common::String\20const&\29\20const can change the state due to initial scan
[asyncify] PluginManager::loadAllPluginsOfType\28PluginType\29 can change the state due to initial scan
[asyncify] EngineManager::findTarget\28Common::String\20const&\2c\20Plugin\20const**\29\20const can change the state due to initial scan
[asyncify] EngineManager::detectGames\28Common::FSList\20const&\2c\20unsigned\20int\2c\20bool\29 can change the state due to initial scan
[asyncify] ScalerPluginObject&\20Plugin::get<ScalerPluginObject>\28\29\20const can change the state due to initial scan
[asyncify] ScalerManager::findScalerPluginIndex\28char\20const*\29\20const can change the state due to initial scan
[asyncify] EngineManager::upgradeTargetIfNecessary\28Common::String\20const&\29\20const can change the state due to initial scan
[asyncify] AdvancedMetaEngineDetection::toDetectedGame\28ADDetectedGame\20const&\2c\20ADDetectedGameExtraInfo*\29\20const can change the state due to initial scan
[asyncify] AdvancedMetaEngineDetection::detectGames\28Common::FSList\20const&\2c\20unsigned\20int\2c\20bool\29 can change the state due to initial scan
[asyncify] AdvancedMetaEngineDetection::composeFileHashMap\28Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>&\2c\20Common::FSList\20const&\2c\20int\2c\20Common::String\20const&\29\20const can change the state due to initial scan
[asyncify] AdvancedMetaEngineDetection::preprocessDescriptions\28\29 can change the state due to initial scan
[asyncify] AdvancedMetaEngineDetection::getFileProperties\28Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\2c\20ADGameDescription\20const&\2c\20Common::String\20const&\2c\20FileProperties&\29\20const can change the state due to initial scan
[asyncify] AdvancedMetaEngineDetection::detectGame\28Common::FSNode\20const&\2c\20Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\2c\20Common::Language\2c\20Common::Platform\2c\20Common::String\20const&\2c\20unsigned\20int\2c\20bool\29 can change the state due to initial scan
[asyncify] Common::AchievementsManager::setSpecialString\28Common::String\20const&\2c\20Common::String\20const&\29 can change the state due to initial scan
[asyncify] MainMenuDialog::~MainMenuDialog\28\29 can change the state due to initial scan
[asyncify] GUI::ConfigDialog::build\28\29 can change the state due to initial scan
[asyncify] [asyncify] [asyncify] Common::AchievementsManager::setActiveDomain\28Common::AchievementsInfo\20const&\29 can change the state due to initial scan
[asyncify] GUI::GuiObject::getChildX\28\29\20const can change the state due to initial scan
[asyncify] GUI::GuiObject::getChildY\28\29\20const can change the state due to initial scan
[asyncify] [asyncify] GUI::Widget::getAbsX\28\29\20const[asyncify] GUI::Widget::getAbsY\28\29\20const can change the state due to initial scan
[asyncify] GUI::Widget::handleMouseWheel\28int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] MainMenuDialog::reflowLayout\28\29 can change the state due to initial scan
[asyncify] GUI::Widget::releaseFocus\28\29 can change the state due to initial scan
[asyncify] main can change the state due to initial scan
[asyncify] MainMenuDialog::handleCommand\28GUI::CommandSender*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] Common::Singleton<GUI::GuiManager>::instance\28\29 can change the state due to initial scan
[asyncify] Engine::pauseEngine\28\29 can change the state due to initial scan
[asyncify] Engine::resumeEngine\28\29 can change the state due to initial scan
[asyncify] MetaEngine::copySaveFileToFreeSlot\28char\20const*\2c\20int\29 can change the state due to initial scan
[asyncify] SaveStateDescriptor::initSaveType\28MetaEngine\20const*\29 can change the state due to initial scan
[asyncify] GUI::AboutDialog::reflowLayout\28\29 can change the state due to initial scan
[asyncify] GUI::AboutDialog::open\28\29 can change the state due to initial scan
[asyncify] GUI::AboutDialog::handleMouseUp\28int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::AboutDialog::AboutDialog\28\29[asyncify] GUI::AboutDialog::handleKeyUp\28Common::KeyState\29 can change the state due to initial scan
[asyncify] GUI::AboutDialog::drawDialog\28GUI::DrawLayer\29 can change the state due to initial scan
[asyncify] GUI::EE::setupGraphics\28\29 can change the state due to initial scan
[asyncify] GUI::AboutDialog::handleKeyDown\28Common::KeyState\29 can change the state due to initial scan
[asyncify] GUI::EE::cls\28bool\29 can change the state due to initial scan
[asyncify] GUI::EE::draw\28int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::EE::putshapes\28\29 can change the state due to initial scan
[asyncify] GUI::ConsoleDialog::init\28\29 can change the state due to initial scan
[asyncify] GUI::ConsoleDialog::drawCaret\28bool\29 can change the state due to initial scan
[asyncify] GUI::ConsoleDialog::slideUpAndClose\28\29 can change the state due to initial scan
[asyncify] GUI::ConsoleDialog::open\28\29 can change the state due to initial scan
[asyncify] GUI::ConsoleDialog::~ConsoleDialog\28\29 can change the state due to initial scan
[asyncify] GUI::ConsoleDialog::drawLine\28int\29 can change the state due to initial scan
[asyncify] GUI::ConsoleDialog::handleMouseWheel\28int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::ConsoleDialog::handleTickle\28\29 can change the state due to initial scan
[asyncify] GUI::Debugger::cmdExit\28int\2c\20char\20const**\29 can change the state due to initial scan
[asyncify] GUI::Debugger::cmdOpenLog\28int\2c\20char\20const**\29 can change the state due to initial scan
[asyncify] GUI::Debugger::registerCmd\28Common::String\20const&\2c\20Common::Functor2<int\2c\20char\20const**\2c\20bool>*\29 can change the state due to initial scan
[asyncify] GUI::ConsoleDialog::handleKeyDown\28Common::KeyState\29 can change the state due to initial scan
[asyncify] GUI::Debugger::cmdMd5\28int\2c\20char\20const**\29 can change the state due to initial scan
[asyncify] GUI::Debugger::cmdMd5Mac\28int\2c\20char\20const**\29 can change the state due to initial scan
[asyncify] GUI::Debugger::~Debugger\28\29 can change the state due to initial scan
[asyncify] GUI::Debugger::parseCommand\28char\20const*\29 can change the state due to initial scan
[asyncify] void\20Common::sort<Common::ListInternal::Iterator<Common::SharedPtr<Common::ArchiveMember>>\2c\20GUI::ArchiveMemberLess>\28Common::ListInternal::Iterator<Common::SharedPtr<Common::ArchiveMember>>\2c\20Common::ListInternal::Iterator<Common::SharedPtr<Common::ArchiveMember>>\2c\20GUI::ArchiveMemberLess\29 can change the state due to initial scan
[asyncify] GUI::Debugger::attach\28char\20const*\29 can change the state due to initial scan
[asyncify] GUI::Debugger::onFrame\28\29 can change the state due to initial scan
[asyncify] GUI::Debugger::handleCommand\28int\2c\20char\20const**\2c\20bool&\29 can change the state due to initial scan
[asyncify] Common::Functor2Mem<int\2c\20char\20const**\2c\20bool\2c\20GUI::Debugger>::operator\28\29\28int\2c\20char\20const**\29\20const can change the state due to initial scan
[asyncify] GUI::Dialog::setFocusWidget\28GUI::Widget*\29 can change the state due to initial scan
[asyncify] [asyncify] GUI::Dialog::lostFocus\28\29 can change the state due to initial scan
[asyncify] GUI::Dialog::reflowLayout\28\29 can change the state due to initial scan
[asyncify] GUI::AboutDialog::handleTickle\28\29 can change the state due to initial scan
[asyncify] GUI::Dialog::drawWidgets\28\29 can change the state due to initial scan
[asyncify] GUI::Dialog::drawDialog\28GUI::DrawLayer\29 can change the state due to initial scan
[asyncify] [asyncify] GUI::Dialog::close\28\29[asyncify] GUI::Dialog::handleMouseWheel\28int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::Dialog::handleMouseUp\28int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::Dialog::handleKeyUp\28Common::KeyState\29 can change the state due to initial scan
[asyncify] GUI::Dialog::handleKeyDown\28Common::KeyState\29 can change the state due to initial scan
[asyncify] GUI::Dialog::handleTickle\28\29 can change the state due to initial scan
[asyncify] GUI::Dialog::handleCommand\28GUI::CommandSender*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] GUI::Dialog::open\28\29[asyncify] [asyncify] GUI::Dialog::removeWidget\28GUI::Widget*\29 can change the state due to initial scan
[asyncify] GUI::GuiManager::computeScaleFactor\28\29 can change the state due to initial scan
[asyncify] GUI::GuiManager::initTextToSpeech\28\29 can change the state due to initial scan
[asyncify] [asyncify] [asyncify] GUI::Dialog::setDefaultFocusedWidget\28\29 can change the state due to initial scan
[asyncify] GUI::GuiManager::loadNewTheme\28Common::String\2c\20GUI::ThemeEngine::GraphicsMode\2c\20bool\29 can change the state due to initial scan
[asyncify] GUI::GuiManager::enableKeymap\28bool\29 can change the state due to initial scan
[asyncify] GUI::GuiManager::redrawFull\28\29 can change the state due to initial scan
[asyncify] GUI::GuiManager::checkScreenChange\28\29 can change the state due to initial scan
[asyncify] GUI::GuiManager::giveFocusToDialog\28GUI::Dialog*\29 can change the state due to initial scan
[asyncify] GUI::GuiManager::screenChange\28\29 can change the state due to initial scan
[asyncify] GUI::GuiManager::processEvent\28Common::Event\20const&\2c\20GUI::Dialog*\29 can change the state due to initial scan
[asyncify] GUI::GuiManager::redraw\28\29 can change the state due to initial scan
[asyncify] GUI::CommandSender::sendCommand\28unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] GUI::BrowserDialog::handleCommand\28GUI::CommandSender*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] void\20Common::sort<Common::FSNode*\2c\20Common::Less<Common::FSNode>>\28Common::FSNode*\2c\20Common::FSNode*\2c\20Common::Less<Common::FSNode>\29 can change the state due to initial scan
[asyncify] GUI::BrowserDialog::updateListing\28\29 can change the state due to initial scan
[asyncify] GUI::ChooserDialog::handleCommand\28GUI::CommandSender*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] GUI::BrowserDialog::BrowserDialog\28Common::U32String\20const&\2c\20bool\29 can change the state due to initial scan
[asyncify] GUI::EditGameDialog::apply\28\29 can change the state due to initial scan
[asyncify] GUI::LauncherDialog::LauncherDialog\28Common::String\20const&\2c\20GUI::LauncherChooser*\29 can change the state due to initial scan
[asyncify] GUI::LauncherDialog::addLayoutChooserButtons\28\29 can change the state due to initial scan
[asyncify] GUI::LauncherDialog::rebuild\28\29 can change the state due to initial scan
[asyncify] GUI::LauncherDialog::open\28\29 can change the state due to initial scan
[asyncify] GUI::LauncherDialog::addGame\28\29 can change the state due to initial scan
[asyncify] GUI::EditGameDialog::open\28\29 can change the state due to initial scan
[asyncify] GUI::LauncherDialog::close\28\29 can change the state due to initial scan
[asyncify] GUI::EditGameDialog::EditGameDialog\28Common::String\20const&\29 can change the state due to initial scan
[asyncify] GUI::LauncherDialog::build\28\29 can change the state due to initial scan
[asyncify] GUI::LauncherDialog::handleKeyUp\28Common::KeyState\29 can change the state due to initial scan
[asyncify] GUI::LauncherDialog::doGameDetection\28Common::String\20const&\29 can change the state due to initial scan
[asyncify] GUI::EditGameDialog::handleCommand\28GUI::CommandSender*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] GUI::LauncherSimple::build\28\29 can change the state due to initial scan
[asyncify] GUI::LauncherChooser::selectLauncher\28\29 can change the state due to initial scan
[asyncify] GUI::LauncherDialog::handleCommand\28GUI::CommandSender*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] GUI::LauncherDialog::reflowLayout\28\29 can change the state due to initial scan
[asyncify] GUI::LauncherSimple::updateListing\28\29 can change the state due to initial scan
[asyncify] [asyncify] GUI::LauncherSimple::handleCommand\28GUI::CommandSender*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] GUI::LauncherGrid::handleKeyDown\28Common::KeyState\29 can change the state due to initial scan
[asyncify] GUI::LauncherGrid::handleCommand\28GUI::CommandSender*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] GUI::LauncherSimple::updateButtons\28\29 can change the state due to initial scan
[asyncify] GUI::LauncherGrid::build\28\29[asyncify] [asyncify] [asyncify] GUI::LauncherDialog::~LauncherDialog\28\29.1 can change the state due to initial scan
[asyncify] GUI::MassAddDialog::handleCommand\28GUI::CommandSender*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] GUI::TimedMessageDialog::handleTickle\28\29 can change the state due to initial scan
[asyncify] GUI::MessageDialog::init\28Common::U32String\20const&\2c\20Common::U32String\20const&\2c\20Common::Array<Common::U32String>\20const&\2c\20Graphics::TextAlign\2c\20char\20const*\2c\20Common::U32String\20const&\29 can change the state due to initial scan
[asyncify] GUI::CountdownMessageDialog::updateCountdown\28\29 can change the state due to initial scan
[asyncify] GUI::CountdownMessageDialog::handleTickle\28\29 can change the state due to initial scan
[asyncify] GUI::MessageDialog::handleCommand\28GUI::CommandSender*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] GUI::MassAddDialog::handleTickle\28\29 can change the state due to initial scan
[asyncify] GUI::MetadataParser::keyCallback\28Common::XMLParser::ParserNode*\29 can change the state due to initial scan
[asyncify] GUI::MetadataParser::CustomXMLKeyLayout::doCallback\28Common::XMLParser*\2c\20Common::XMLParser::ParserNode*\29 can change the state due to initial scan
[asyncify] GUI::GuiObject::~GuiObject\28\29 can change the state due to initial scan
[asyncify] GUI::GuiObject::getClipRect\28\29\20const can change the state due to initial scan
[asyncify] GUI::OptionsDialog::init\28\29 can change the state due to initial scan
[asyncify] GUI::OptionsDialog::~OptionsDialog\28\29 can change the state due to initial scan
[asyncify] GUI::OptionsDialog::rebuild\28\29[asyncify] [asyncify] GUI::OptionsDialog::updateScaleFactors\28unsigned\20int\29 can change the state due to initial scan
[asyncify] GUI::OptionsDialog::clean\28\29 can change the state due to initial scan
[asyncify] GUI::OptionsDialog::close\28\29 can change the state due to initial scan
[asyncify] GUI::OptionsDialog::saveMusicDeviceSetting\28GUI::PopUpWidget*\2c\20Common::String\29 can change the state due to initial scan
[asyncify] GUI::OptionsDialog::updateSfxVolume\28int\29\20const can change the state due to initial scan
[asyncify] GUI::OptionsDialog::updateMusicVolume\28int\29\20const can change the state due to initial scan
[asyncify] GUI::OptionsDialog::updateSpeechVolume\28int\29\20const can change the state due to initial scan
[asyncify] GUI::OptionsDialog::loadMusicDeviceSetting\28GUI::PopUpWidget*\2c\20Common::String\2c\20MusicType\29 can change the state due to initial scan
[asyncify] GUI::OptionsDialog::handleTickle\28\29 can change the state due to initial scan
[asyncify] GUI::OptionsDialog::handleOtherEvent\28Common::Event\20const&\29 can change the state due to initial scan
[asyncify] GUI::OptionsDialog::setGraphicSettingsState\28bool\29 can change the state due to initial scan
[asyncify] GUI::OptionsDialog::addKeyMapperControls\28GUI::GuiObject*\2c\20Common::String\20const&\2c\20Common::Array<Common::Keymap*>\20const&\2c\20Common::String\20const&\29 can change the state due to initial scan
[asyncify] GUI::OptionsDialog::handleCommand\28GUI::CommandSender*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] GUI::OptionsDialog::addAchievementsControls\28GUI::GuiObject*\2c\20Common::String\20const&\29 can change the state due to initial scan
[asyncify] GUI::OptionsDialog::addStatisticsControls\28GUI::GuiObject*\2c\20Common::String\20const&\29 can change the state due to initial scan
[asyncify] GUI::OptionsDialog::addAudioControls\28GUI::GuiObject*\2c\20Common::String\20const&\29 can change the state due to initial scan
[asyncify] GUI::OptionsDialog::addMIDIControls\28GUI::GuiObject*\2c\20Common::String\20const&\29 can change the state due to initial scan
[asyncify] GUI::OptionsDialog::addGraphicControls\28GUI::GuiObject*\2c\20Common::String\20const&\29 can change the state due to initial scan
[asyncify] GUI::OptionsDialog::build\28\29 can change the state due to initial scan
[asyncify] GUI::OptionsDialog::addSubtitleControls\28GUI::GuiObject*\2c\20Common::String\20const&\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::OptionsDialog::addMT32Controls\28GUI::GuiObject*\2c\20Common::String\20const&\29 can change the state due to initial scan
[asyncify] GUI::OptionsDialog::apply\28\29 can change the state due to initial scan
[asyncify] GUI::OptionsDialog::reflowLayout\28\29 can change the state due to initial scan
[asyncify] GUI::OptionsDialog::setupGraphicsTab\28\29 can change the state due to initial scan
[asyncify] GUI::OptionsDialog::addVolumeControls\28GUI::GuiObject*\2c\20Common::String\20const&\29 can change the state due to initial scan
[asyncify] GUI::GlobalOptionsDialog::reflowLayout\28\29 can change the state due to initial scan
[asyncify] GUI::SaveLoadChooser::~SaveLoadChooser\28\29 can change the state due to initial scan
[asyncify] GUI::GlobalOptionsDialog::build\28\29 can change the state due to initial scan
[asyncify] GUI::SaveLoadChooser::selectChooser\28MetaEngine\20const*\29 can change the state due to initial scan
[asyncify] GUI::getRequestedSaveLoadDialog\28MetaEngine\20const*\29 can change the state due to initial scan
[asyncify] GUI::SaveLoadChooser::runModalWithMetaEngineAndTarget\28MetaEngine\20const*\2c\20Common::String\20const&\29 can change the state due to initial scan
[asyncify] GUI::SaveLoadChooserDialog::addChooserButtons\28\29 can change the state due to initial scan
[asyncify] GUI::SaveLoadChooserDialog::updateSaveList\28\29 can change the state due to initial scan
[asyncify] GUI::SaveLoadChooserDialog::handleCommand\28GUI::CommandSender*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] GUI::SaveLoadChooserDialog::reflowLayout\28\29 can change the state due to initial scan
[asyncify] GUI::SaveLoadChooserDialog::activate\28int\2c\20Common::U32String\20const&\29 can change the state due to initial scan
[asyncify] GUI::SaveLoadChooserDialog::listSaves\28\29 can change the state due to initial scan
[asyncify] GUI::SaveLoadChooserSimple::runIntern\28\29[asyncify] [asyncify] GUI::SaveLoadChooserSimple::reflowLayout\28\29 can change the state due to initial scan
[asyncify] GUI::GlobalOptionsDialog::apply\28\29 can change the state due to initial scan
[asyncify] GUI::SaveLoadChooserSimple::addThumbnailContainer\28\29 can change the state due to initial scan
[asyncify] GUI::SaveLoadChooserGrid::~SaveLoadChooserGrid\28\29 can change the state due to initial scan
[asyncify] GUI::SaveLoadChooserGrid::handleCommand\28GUI::CommandSender*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] GUI::SaveLoadChooserGrid::updateSaveList\28\29 can change the state due to initial scan
[asyncify] GUI::SaveLoadChooserSimple::handleCommand\28GUI::CommandSender*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] GUI::SaveLoadChooserGrid::open\28\29 can change the state due to initial scan
[asyncify] GUI::SaveLoadChooserGrid::updateSaves\28\29 can change the state due to initial scan
[asyncify] GUI::SaveLoadChooserGrid::runIntern\28\29 can change the state due to initial scan
[asyncify] [asyncify] GUI::SavenameDialog::handleCommand\28GUI::CommandSender*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] GUI::SaveLoadChooserGrid::reflowLayout\28\29 can change the state due to initial scan
[asyncify] GUI::ThemeBrowser::handleCommand\28GUI::CommandSender*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] GUI::ThemeEngine::~ThemeEngine\28\29 can change the state due to initial scan
[asyncify] GUI::LauncherGrid::updateListing\28\29 can change the state due to initial scan
[asyncify] GUI::ThemeEngine::clearAll\28\29 can change the state due to initial scan
[asyncify] GUI::ThemeEngine::disable\28\29 can change the state due to initial scan
[asyncify] GUI::ThemeEngine::enable\28\29 can change the state due to initial scan
[asyncify] GUI::ThemeEngine::listUsableThemes\28Common::List<GUI::ThemeEngine::ThemeDescriptor>&\29 can change the state due to initial scan
[asyncify] Graphics::VectorRenderer::drawCallback_BEVELSQ\28Common::Rect\20const&\2c\20Graphics::DrawStep\20const&\29 can change the state due to initial scan
[asyncify] GUI::ThemeEngine::restoreBackground\28Common::Rect\29 can change the state due to initial scan
[asyncify] GUI::ThemeEngine::init\28\29 can change the state due to initial scan
[asyncify] GUI::ThemeEngine::drawDDText\28GUI::TextData\2c\20GUI::TextColor\2c\20Common::Rect\20const&\2c\20Common::U32String\20const&\2c\20bool\2c\20bool\2c\20Graphics::TextAlign\2c\20GUI::ThemeEngine::TextAlignVertical\2c\20int\2c\20Common::Rect\20const&\29 can change the state due to initial scan
[asyncify] GUI::ThemeEngine::getFontHeight\28GUI::ThemeEngine::FontStyle\29\20const can change the state due to initial scan
[asyncify] GUI::ThemeEngine::drawFoldIndicator\28Common::Rect\20const&\2c\20bool\29 can change the state due to initial scan
[asyncify] GUI::ThemeEngine::drawDD\28GUI::DrawData\2c\20Common::Rect\20const&\2c\20unsigned\20int\2c\20bool\29 can change the state due to initial scan
[asyncify] GUI::ThemeEngine::drawSurface\28Common::Point\20const&\2c\20Graphics::ManagedSurface\20const&\2c\20bool\29[asyncify] Graphics::ManagedSurface::vLine\28int\2c\20int\2c\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] GUI::ThemeEngine::themeConfigUsable\28Common::FSNode\20const&\2c\20Common::String&\29 can change the state due to initial scan
[asyncify] GUI::ThemeEngine::drawToBackbuffer\28\29 can change the state due to initial scan
[asyncify] GUI::ThemeEngine::drawToScreen\28\29 can change the state due to initial scan
[asyncify] GUI::ThemeEngine::listUsableThemes\28Common::FSNode\20const&\2c\20Common::List<GUI::ThemeEngine::ThemeDescriptor>&\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::ThemeEval::reset\28\29 can change the state due to initial scan
[asyncify] GUI::ThemeEval::getWidgetTextHAlign\28Common::String\20const&\29[asyncify] GUI::ThemeEval::reflowDialogLayout\28Common::String\20const&\2c\20GUI::Widget*\29 can change the state due to initial scan
[asyncify] GUI::ThemeLayout::~ThemeLayout\28\29 can change the state due to initial scan
[asyncify] GUI::ThemeEval::getWidgetData\28Common::String\20const&\2c\20short&\2c\20short&\2c\20short&\2c\20short&\2c\20bool&\29 can change the state due to initial scan
[asyncify] GUI::ThemeLayoutTabWidget::reflowLayout\28GUI::Widget*\29 can change the state due to initial scan
[asyncify] GUI::ThemeLayoutStacked::makeClone\28GUI::ThemeLayout*\29 can change the state due to initial scan
[asyncify] GUI::ThemeLayout::resetLayout\28\29 can change the state due to initial scan
[asyncify] GUI::ThemeLayout::getWidgetData\28Common::String\20const&\2c\20short&\2c\20short&\2c\20short&\2c\20short&\2c\20bool&\29 can change the state due to initial scan
[asyncify] GUI::ThemeLayoutStacked::getParentHeight\28\29[asyncify] GUI::ThemeLayoutWidget::reflowLayout\28GUI::Widget*\29 can change the state due to initial scan
[asyncify] GUI::ThemeLayoutWidget::getWidget\28GUI::Widget*\29\20const can change the state due to initial scan
[asyncify] [asyncify] GUI::ThemeLayoutStacked::getParentWidth\28\29 can change the state due to initial scan
[asyncify] GUI::ThemeLayoutStacked::reflowLayout\28GUI::Widget*\29 can change the state due to initial scan
[asyncify] GUI::ThemeLayoutMain::reflowLayout\28GUI::Widget*\29 can change the state due to initial scan
[asyncify] Graphics::VectorRenderer::drawCallback_CIRCLE\28Common::Rect\20const&\2c\20Graphics::DrawStep\20const&\29 can change the state due to initial scan
[asyncify] Graphics::VectorRenderer::drawCallback_SQUARE\28Common::Rect\20const&\2c\20Graphics::DrawStep\20const&\29 can change the state due to initial scan
[asyncify] Graphics::VectorRenderer::drawCallback_ROUNDSQ\28Common::Rect\20const&\2c\20Graphics::DrawStep\20const&\29 can change the state due to initial scan
[asyncify] Graphics::VectorRenderer::drawCallback_LINE\28Common::Rect\20const&\2c\20Graphics::DrawStep\20const&\29 can change the state due to initial scan
[asyncify] Graphics::VectorRenderer::drawCallback_FILLSURFACE\28Common::Rect\20const&\2c\20Graphics::DrawStep\20const&\29 can change the state due to initial scan
[asyncify] Graphics::VectorRenderer::drawCallback_TRIANGLE\28Common::Rect\20const&\2c\20Graphics::DrawStep\20const&\29 can change the state due to initial scan
[asyncify] Graphics::VectorRenderer::drawCallback_TAB\28Common::Rect\20const&\2c\20Graphics::DrawStep\20const&\29 can change the state due to initial scan
[asyncify] Graphics::VectorRenderer::drawCallback_BITMAP\28Common::Rect\20const&\2c\20Graphics::DrawStep\20const&\29 can change the state due to initial scan
[asyncify] GUI::ThemeParser::parserCallback_bitmap\28Common::XMLParser::ParserNode*\29 can change the state due to initial scan
[asyncify] Graphics::VectorRenderer::drawCallback_CROSS\28Common::Rect\20const&\2c\20Graphics::DrawStep\20const&\29 can change the state due to initial scan
[asyncify] GUI::ThemeParser::parserCallback_dialog\28Common::XMLParser::ParserNode*\29 can change the state due to initial scan
[asyncify] GUI::ThemeEngine::addFont\28GUI::TextData\2c\20Common::String\20const&\2c\20Common::String\20const&\2c\20Common::String\20const&\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::ThemeParser::parserCallback_space\28Common::XMLParser::ParserNode*\29 can change the state due to initial scan
[asyncify] GUI::ThemeParser::parserCallback_import\28Common::XMLParser::ParserNode*\29 can change the state due to initial scan
[asyncify] GUI::Tooltip::handleMouseWheel\28int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::Tooltip::handleMouseDown\28int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::Tooltip::handleMouseUp\28int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::Tooltip::handleKeyDown\28Common::KeyState\29 can change the state due to initial scan
[asyncify] GUI::Tooltip::handleMouseMoved\28int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::UnknownGameDialog::handleMouseWheel\28int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::UnknownGameDialog::rebuild\28\29 can change the state due to initial scan
[asyncify] GUI::UnknownGameDialog::handleCommand\28GUI::CommandSender*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] GUI::Widget::init\28\29 can change the state due to initial scan
[asyncify] GUI::Widget::~Widget\28\29 can change the state due to initial scan
[asyncify] GUI::Tooltip::handleKeyUp\28Common::KeyState\29 can change the state due to initial scan
[asyncify] GUI::Widget::markAsDirty\28\29 can change the state due to initial scan
[asyncify] GUI::Widget::containsWidgetInChain\28GUI::Widget*\2c\20GUI::Widget*\29 can change the state due to initial scan
[asyncify] GUI::Widget::findWidgetInChain\28GUI::Widget*\2c\20int\2c\20int\29[asyncify]  can change the state due to initial scan
[asyncify] GUI::Widget::read\28Common::U32String\20const&\29 can change the state due to initial scan
[asyncify] GUI::StaticTextWidget::setLabel\28Common::U32String\20const&\29 can change the state due to initial scan
[asyncify] GUI::StaticTextWidget::setAlign\28Graphics::TextAlign\29 can change the state due to initial scan
[asyncify] GUI::ButtonWidget::getMinSize\28int&\2c\20int&\29 can change the state due to initial scan
[asyncify] GUI::ButtonWidget::setUnpressedState\28\29 can change the state due to initial scan
[asyncify] GUI::ButtonWidget::handleMouseUp\28int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::ButtonWidget::handleMouseDown\28int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::ButtonWidget::getLabel\28\29 can change the state due to initial scan
[asyncify] GUI::PicButtonWidget::setGfx\28Graphics::ManagedSurface\20const*\2c\20int\2c\20bool\29 can change the state due to initial scan
[asyncify] GUI::DropdownButtonWidget::handleMouseMoved\28int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::DropdownButtonWidget::handleMouseUp\28int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::PicButtonWidget::~PicButtonWidget\28\29 can change the state due to initial scan
[asyncify] Graphics::ManagedSurface::fillRect\28Common::Rect\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] GUI::CheckboxWidget::setState\28bool\29 can change the state due to initial scan
[asyncify] GUI::RadiobuttonGroup::setValue\28int\29 can change the state due to initial scan
[asyncify] GUI::RadiobuttonWidget::setState\28bool\2c\20bool\29 can change the state due to initial scan
[asyncify] GUI::SliderWidget::handleMouseMoved\28int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::SliderWidget::handleMouseDown\28int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::SliderWidget::handleMouseUp\28int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::SliderWidget::handleMouseWheel\28int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::ContainerWidget::~ContainerWidget\28\29 can change the state due to initial scan
[asyncify] GUI::GraphicsWidget::setGfx\28Graphics::ManagedSurface\20const*\2c\20bool\29 can change the state due to initial scan
[asyncify] GUI::ContainerWidget::removeWidget\28GUI::Widget*\29 can change the state due to initial scan
[asyncify] GUI::OptionsContainerWidget::reflowLayout\28\29[asyncify] GUI::ButtonWidget::handleMouseLeft\28int\29 can change the state due to initial scan
[asyncify]  can change the state due to initial scan
[asyncify] [asyncify] GUI::SliderWidget::handleMouseEntered\28int\29 can change the state due to initial scan
[asyncify] [asyncify] GUI::EditableWidget::reflowLayout\28\29 can change the state due to initial scan
[asyncify] GUI::ButtonWidget::handleMouseEntered\28int\29 can change the state due to initial scan
[asyncify] GUI::EditableWidget::tryInsertChar\28char32_t\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::EditableWidget::adjustOffset\28\29 can change the state due to initial scan
[asyncify] GUI::EditableWidget::handleTickle\28\29 can change the state due to initial scan
[asyncify] GUI::GuiManager::getCharWidth\28unsigned\20int\2c\20GUI::ThemeEngine::FontStyle\29\20const can change the state due to initial scan
[asyncify] GUI::GuiManager::getKerningOffset\28unsigned\20int\2c\20unsigned\20int\2c\20GUI::ThemeEngine::FontStyle\29\20const can change the state due to initial scan
[asyncify] GUI::EditableWidget::defaultKeyDownHandler\28Common::KeyState&\2c\20bool&\2c\20bool&\2c\20bool&\29 can change the state due to initial scan
[asyncify] GUI::EditableWidget::drawCaret\28bool\29 can change the state due to initial scan
[asyncify] GUI::EditableWidget::handleKeyDown\28Common::KeyState\29 can change the state due to initial scan
[asyncify] GUI::EditTextWidget::EditTextWidget\28GUI::GuiObject*\2c\20Common::String\20const&\2c\20Common::U32String\20const&\2c\20Common::U32String\20const&\2c\20unsigned\20int\2c\20unsigned\20int\2c\20GUI::ThemeEngine::FontStyle\29 can change the state due to initial scan
[asyncify] GUI::EditTextWidget::handleMouseDown\28int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::EditTextWidget::drawWidget\28\29 can change the state due to initial scan
[asyncify] GUI::EditTextWidget::receivedFocusWidget\28\29 can change the state due to initial scan
[asyncify] GUI::EditTextWidget::lostFocusWidget\28\29 can change the state due to initial scan
[asyncify] GUI::EditTextWidget::endEditMode\28\29 can change the state due to initial scan
[asyncify] GUI::EditTextWidget::abortEditMode\28\29 can change the state due to initial scan
[asyncify] GUI::GridItemWidget::handleMouseWheel\28int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::GridItemWidget::handleMouseLeft\28int\29 can change the state due to initial scan
[asyncify] GUI::GridItemWidget::handleMouseMoved\28int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::GridItemWidget::handleMouseEntered\28int\29 can change the state due to initial scan
[asyncify] GUI::GridWidget::sortGroups\28\29 can change the state due to initial scan
[asyncify] GUI::GridWidget::reloadThumbnails\28\29 can change the state due to initial scan
[asyncify] GUI::GridWidget::assignEntriesToItems\28\29 can change the state due to initial scan
[asyncify] GUI::GridItemWidget::handleMouseDown\28int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::GridItemTray::handleCommand\28GUI::CommandSender*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] GUI::GridItemTray::handleMouseDown\28int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::loadSurfaceFromFile\28Common::String\20const&\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] void\20GUI::GridWidget::unloadSurfaces<Common::String>\28Common::HashMap<Common::String\2c\20Graphics::ManagedSurface\20const*\2c\20Common::Hash<Common::String>\2c\20Common::EqualTo<Common::String>>&\29 can change the state due to initial scan
[asyncify] void\20GUI::GridWidget::unloadSurfaces<int>\28Common::HashMap<int\2c\20Graphics::ManagedSurface\20const*\2c\20Common::Hash<int>\2c\20Common::EqualTo<int>>&\29 can change the state due to initial scan
[asyncify] GUI::GridItemTray::handleMouseMoved\28int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::GridWidget::handleMouseWheel\28int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::GridWidget::scrollToEntry\28int\2c\20bool\29 can change the state due to initial scan
[asyncify] [asyncify] GUI::GroupedListWidget::handleMouseUp\28int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] [asyncify] GUI::GroupedListWidget::handleCommand\28GUI::CommandSender*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] GUI::GroupedListWidget::handleMouseDown\28int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::GroupedListWidget::drawWidget\28\29 can change the state due to initial scan
[asyncify] GUI::GroupedListWidget::setFilter\28Common::U32String\20const&\2c\20bool\29 can change the state due to initial scan
[asyncify] GUI::ListWidget::containsWidget\28GUI::Widget*\29\20const can change the state due to initial scan
[asyncify] GUI::GridWidget::reflowLayout\28\29 can change the state due to initial scan
[asyncify] GUI::ListWidget::setSelected\28int\29 can change the state due to initial scan
[asyncify] GUI::ListWidget::setList\28Common::Array<Common::U32String>\20const&\29 can change the state due to initial scan
[asyncify] GUI::ListWidget::handleTickle\28\29 can change the state due to initial scan
[asyncify] GUI::ListWidget::handleMouseDown\28int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] [asyncify] GUI::ListWidget::lostFocusWidget\28\29 can change the state due to initial scan
[asyncify] GUI::GroupedListWidget::sortGroups\28\29 can change the state due to initial scan
[asyncify] GUI::ListWidget::handleKeyDown\28Common::KeyState\29 can change the state due to initial scan
[asyncify] GUI::ListWidget::drawWidget\28\29 can change the state due to initial scan
[asyncify] GUI::GroupedListWidget::setSelected\28int\29 can change the state due to initial scan
[asyncify] GUI::ListWidget::startEditMode\28\29 can change the state due to initial scan
[asyncify] GUI::ListWidget::getEditRect\28\29\20const[asyncify]  can change the state due to initial scan
[asyncify] GUI::ListWidget::abortEditMode\28\29 can change the state due to initial scan
[asyncify] GUI::ListWidget::receivedFocusWidget\28\29 can change the state due to initial scan
[asyncify] GUI::ListWidget::reflowLayout\28\29 can change the state due to initial scan
[asyncify] GUI::PopUpDialog::PopUpDialog\28GUI::Widget*\2c\20Common::String\20const&\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::PopUpDialog::drawDialog\28GUI::DrawLayer\29 can change the state due to initial scan
[asyncify] GUI::PopUpDialog::handleMouseUp\28int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::PopUpDialog::drawMenuEntry\28int\2c\20bool\29 can change the state due to initial scan
[asyncify] GUI::PopUpDialog::handleKeyDown\28Common::KeyState\29 can change the state due to initial scan
[asyncify] GUI::PopUpDialog::open\28\29 can change the state due to initial scan
[asyncify] GUI::PopUpWidget::handleMouseWheel\28int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::PopUpWidget::handleMouseEntered\28int\29 can change the state due to initial scan
[asyncify] GUI::ScrollBarWidget::handleMouseDown\28int\2c\20int\2c\20int\2c\20int\29[asyncify] [asyncify] GUI::PopUpWidget::handleMouseDown\28int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::ScrollBarWidget::handleTickle\28\29 can change the state due to initial scan
[asyncify] GUI::ScrollBarWidget::handleMouseLeft\28int\29 can change the state due to initial scan
[asyncify] GUI::ScrollContainerWidget::recalc\28\29 can change the state due to initial scan
[asyncify] GUI::ScrollContainerWidget::handleMouseWheel\28int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::ScrollContainerWidget::getChildX\28\29\20const can change the state due to initial scan
[asyncify] GUI::ScrollContainerWidget::getChildY\28\29\20const can change the state due to initial scan
[asyncify] GUI::ScrollContainerWidget::getWidth\28\29\20const can change the state due to initial scan
[asyncify] GUI::ScrollContainerWidget::handleCommand\28GUI::CommandSender*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] GUI::ScrollContainerWidget::drawWidget\28\29 can change the state due to initial scan
[asyncify] GUI::ScrollContainerWidget::containsWidget\28GUI::Widget*\29\20const can change the state due to initial scan
[asyncify] GUI::ScrollContainerWidget::reflowLayout\28\29 can change the state due to initial scan
[asyncify] GUI::ScrollContainerWidget::findWidget\28int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::ScrollContainerWidget::getClipRect\28\29\20const can change the state due to initial scan
[asyncify] GUI::TabWidget::getChildY\28\29\20const can change the state due to initial scan
[asyncify] GUI::TabWidget::~TabWidget\28\29 can change the state due to initial scan
[asyncify] GUI::TabWidget::removeWidget\28GUI::Widget*\29 can change the state due to initial scan
[asyncify] GUI::TabWidget::addChild\28GUI::Widget*\29 can change the state due to initial scan
[asyncify] GUI::TabWidget::setActiveTab\28int\29 can change the state due to initial scan
[asyncify] GUI::TabWidget::removeTab\28int\29 can change the state due to initial scan
[asyncify] GUI::TabWidget::handleCommand\28GUI::CommandSender*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] GUI::TabWidget::handleMouseWheel\28int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::TabWidget::handleKeyDown\28Common::KeyState\29 can change the state due to initial scan
[asyncify] GUI::TabWidget::setFirstVisible\28int\2c\20bool\29[asyncify] GUI::TabWidget::draw\28\29 can change the state due to initial scan
[asyncify] [asyncify] GUI::TabWidget::markAsDirty\28\29 can change the state due to initial scan
[asyncify] BaseBackend::setScaler\28char\20const*\2c\20int\29 can change the state due to initial scan
[asyncify] GUI::ScrollBarWidget::handleMouseMoved\28int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] BaseBackend::displayMessageOnOSD\28Common::U32String\20const&\29 can change the state due to initial scan
[asyncify] BaseBackend::fillScreen\28unsigned\20int\29 can change the state due to initial scan
[asyncify] ModularGraphicsBackend::hasFeature\28OSystem::Feature\29 can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::hasFeature\28OSystem::Feature\29 can change the state due to initial scan
[asyncify] ModularGraphicsBackend::setFeatureState\28OSystem::Feature\2c\20bool\29 can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::setFeatureState\28OSystem::Feature\2c\20bool\29 can change the state due to initial scan
[asyncify] ModularGraphicsBackend::getSupportedGraphicsModes\28\29\20const can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::getFeatureState\28OSystem::Feature\29 can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::getSupportedGraphicsModes\28\29\20const[asyncify] [asyncify] [asyncify] ModularGraphicsBackend::setGraphicsMode\28int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::getGraphicsMode\28\29\20const can change the state due to initial scan
[asyncify] ModularGraphicsBackend::setShader\28Common::String\20const&\29 can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::setShader\28Common::String\20const&\29[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::getSupportedStretchModes\28\29\20const can change the state due to initial scan
[asyncify] ModularGraphicsBackend::getDefaultStretchMode\28\29\20const can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::getDefaultStretchMode\28\29\20const can change the state due to initial scan
[asyncify] GUI::TabWidget::reflowLayout\28\29 can change the state due to initial scan
[asyncify] ModularGraphicsBackend::setStretchMode\28int\29 can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::setStretchMode\28int\29 can change the state due to initial scan
[asyncify] ModularGraphicsBackend::getStretchMode\28\29\20const can change the state due to initial scan
[asyncify] [asyncify] ModularGraphicsBackend::getDefaultScaler\28\29\20const can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::getDefaultScaler\28\29\20const can change the state due to initial scan
[asyncify] ModularGraphicsBackend::getDefaultScaleFactor\28\29\20const can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::getDefaultScaleFactor\28\29\20const can change the state due to initial scan
[asyncify] ModularGraphicsBackend::setScaler\28unsigned\20int\2c\20int\29 can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::setScaler\28unsigned\20int\2c\20int\29 can change the state due to initial scan
[asyncify] ModularGraphicsBackend::getScaler\28\29\20const can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::getScaler\28\29\20const can change the state due to initial scan
[asyncify] ModularGraphicsBackend::getScaleFactor\28\29\20const can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::getScaleFactor\28\29\20const can change the state due to initial scan
[asyncify] ModularGraphicsBackend::getScreenFormat\28\29\20const can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::getScreenFormat\28\29\20const can change the state due to initial scan
[asyncify] ModularGraphicsBackend::getSupportedFormats\28\29\20const can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::getSupportedFormats\28\29\20const can change the state due to initial scan
[asyncify] ModularGraphicsBackend::initSize\28unsigned\20int\2c\20unsigned\20int\2c\20Graphics::PixelFormat\20const*\29 can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::initSize\28unsigned\20int\2c\20unsigned\20int\2c\20Graphics::PixelFormat\20const*\29 can change the state due to initial scan
[asyncify] ModularGraphicsBackend::initSizeHint\28Common::Array<Graphics::Mode>\20const&\29 can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::initSizeHint\28Common::Array<Graphics::Mode>\20const&\29 can change the state due to initial scan
[asyncify] ModularGraphicsBackend::getScreenChangeID\28\29\20const can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::getScreenChangeID\28\29\20const can change the state due to initial scan
[asyncify] ModularGraphicsBackend::beginGFXTransaction\28\29 can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::beginGFXTransaction\28\29 can change the state due to initial scan
[asyncify] ModularGraphicsBackend::endGFXTransaction\28\29 can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::endGFXTransaction\28\29 can change the state due to initial scan
[asyncify] ModularGraphicsBackend::getHeight\28\29 can change the state due to initial scan
[asyncify] ModularGraphicsBackend::getWidth\28\29 can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::getWidth\28\29 can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::getHeight\28\29 can change the state due to initial scan
[asyncify] ModularGraphicsBackend::copyRectToScreen\28void\20const*\2c\20int\2c\20int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] ModularGraphicsBackend::lockScreen\28\29 can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::copyRectToScreen\28void\20const*\2c\20int\2c\20int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] [asyncify] ModularGraphicsBackend::fillScreen\28unsigned\20int\29 can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::unlockScreen\28\29 can change the state due to initial scan
[asyncify] ModularGraphicsBackend::unlockScreen\28\29 can change the state due to initial scan
[asyncify] ModularGraphicsBackend::updateScreen\28\29 can change the state due to initial scan
[asyncify] [asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::setShakePos\28int\2c\20int\29 can change the state due to initial scan
[asyncify] ModularGraphicsBackend::setFocusRectangle\28Common::Rect\20const&\29 can change the state due to initial scan
[asyncify] [asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::setFocusRectangle\28Common::Rect\20const&\29virtual\20thunk\20to\20ModularGraphicsBackend::updateScreen\28\29 can change the state due to initial scan
[asyncify] ModularGraphicsBackend::clearFocusRectangle\28\29 can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::clearFocusRectangle\28\29 can change the state due to initial scan
[asyncify] ModularGraphicsBackend::showOverlay\28bool\29 can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::showOverlay\28bool\29 can change the state due to initial scan
[asyncify] ModularGraphicsBackend::getSupportedStretchModes\28\29\20const can change the state due to initial scan
[asyncify] ModularGraphicsBackend::hideOverlay\28\29 can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::hideOverlay\28\29 can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::getOverlayFormat\28\29\20const can change the state due to initial scan
[asyncify] ModularGraphicsBackend::getGraphicsMode\28\29\20const can change the state due to initial scan
[asyncify] ModularGraphicsBackend::clearOverlay\28\29 can change the state due to initial scan
[asyncify] ModularGraphicsBackend::grabOverlay\28Graphics::Surface&\29[asyncify] [asyncify] ModularGraphicsBackend::setShakePos\28int\2c\20int\29 can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::grabOverlay\28Graphics::Surface&\29 can change the state due to initial scan
[asyncify] ModularGraphicsBackend::copyRectToOverlay\28void\20const*\2c\20int\2c\20int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] ModularGraphicsBackend::getOverlayHeight\28\29 can change the state due to initial scan
[asyncify] [asyncify] ModularGraphicsBackend::getOverlayWidth\28\29 can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::getOverlayWidth\28\29 can change the state due to initial scan
[asyncify] ModularGraphicsBackend::getHiDPIScreenFactor\28\29\20const can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::getHiDPIScreenFactor\28\29\20const can change the state due to initial scan
[asyncify] ModularGraphicsBackend::showMouse\28bool\29 can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::showMouse\28bool\29 can change the state due to initial scan
[asyncify] ModularGraphicsBackend::lockMouse\28bool\29 can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::lockMouse\28bool\29 can change the state due to initial scan
[asyncify] ModularGraphicsBackend::warpMouse\28int\2c\20int\29 can change the state due to initial scan
[asyncify] ModularGraphicsBackend::setMouseCursor\28void\20const*\2c\20unsigned\20int\2c\20unsigned\20int\2c\20int\2c\20int\2c\20unsigned\20int\2c\20bool\2c\20Graphics::PixelFormat\20const*\29 can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::setMouseCursor\28void\20const*\2c\20unsigned\20int\2c\20unsigned\20int\2c\20int\2c\20int\2c\20unsigned\20int\2c\20bool\2c\20Graphics::PixelFormat\20const*\29 can change the state due to initial scan
[asyncify] ModularGraphicsBackend::setCursorPalette\28unsigned\20char\20const*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::setCursorPalette\28unsigned\20char\20const*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] ModularGraphicsBackend::displayMessageOnOSD\28Common::U32String\20const&\29 can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::displayMessageOnOSD\28Common::U32String\20const&\29 can change the state due to initial scan
[asyncify] ModularGraphicsBackend::displayActivityIconOnOSD\28Graphics::Surface\20const*\29 can change the state due to initial scan
[asyncify] [asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::saveScreenshot\28\29 can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::isOverlayVisible\28\29\20const can change the state due to initial scan
[asyncify] [asyncify] ModularGraphicsBackend::isOverlayVisible\28\29\20const can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::clearOverlay\28\29 can change the state due to initial scan
[asyncify] [asyncify] DefaultAudioCDManager::close\28\29 can change the state due to initial scan
[asyncify] DefaultAudioCDManager::DefaultAudioCDManager\28\29 can change the state due to initial scan
[asyncify]  can change the state due to initial scan
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::getOverlayHeight\28\29DefaultAudioCDManager::isPlaying\28\29\20const[asyncify] DefaultAudioCDManager::setVolume\28unsigned\20char\29 can change the state due to initial scan
[asyncify] DefaultAudioCDManager::setBalance\28signed\20char\29 can change the state due to initial scan
[asyncify] [asyncify]  can change the state due to initial scan
[asyncify] [asyncify] DefaultEventManager::~DefaultEventManager\28\29 can change the state due to initial scan
[asyncify] DefaultAudioCDManager::play\28int\2c\20int\2c\20int\2c\20int\2c\20bool\2c\20Audio::Mixer::SoundType\29 can change the state due to initial scan
[asyncify] Common::CompositeHardwareInputSet::~CompositeHardwareInputSet\28\29 can change the state due to initial scan
[asyncify] Common::CompositeHardwareInputSet::findHardwareInput\28Common::String\20const&\29\20const can change the state due to initial scan
[asyncify] Common::CompositeHardwareInputSet::findHardwareInput\28Common::Event\20const&\29\20const can change the state due to initial scan
[asyncify] DefaultEventManager::getGlobalKeymap\28\29 can change the state due to initial scan
[asyncify] DefaultEventManager::pollEvent\28Common::Event&\29 can change the state due to initial scan
[asyncify] Common::Keymap::registerMappings\28Common::Action*\2c\20Common::Array<Common::String>\20const&\29 can change the state due to initial scan
[asyncify] Common::Keymapper::clear\28\29 can change the state due to initial scan
[asyncify] Common::Keymapper::registerHardwareInputSet\28Common::HardwareInputSet*\2c\20Common::KeymapperDefaultBindings*\29 can change the state due to initial scan
[asyncify] Common::DelayedEventSource::scheduleEvent\28Common::Event\20const&\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] Common::DelayedEventSource::pollEvent\28Common::Event&\29 can change the state due to initial scan
[asyncify] Common::RemapWidget::~RemapWidget\28\29 can change the state due to initial scan
[asyncify] Common::InputWatcher::notifyEvent\28Common::Event\20const&\29 can change the state due to initial scan
[asyncify] Common::RemapWidget::reflowActionWidgets\28\29 can change the state due to initial scan
[asyncify] Common::RemapWidget::stopRemapping\28\29 can change the state due to initial scan
[asyncify] Common::RemapWidget::handleTickle\28\29 can change the state due to initial scan
[asyncify] Common::VirtualMouse::pollEvent\28Common::Event&\29 can change the state due to initial scan
[asyncify] Common::RemapWidget::save\28\29 can change the state due to initial scan
[asyncify] Backends::Log::Log::close\28\29 can change the state due to initial scan
[asyncify] Common::Keymapper::mapEvent\28Common::Event\20const&\2c\20Common::List<Common::Event>&\29 can change the state due to initial scan
[asyncify] Backends::Log::Log::print\28char\20const*\2c\20bool\29 can change the state due to initial scan
[asyncify] Common::RemapWidget::handleCommand\28GUI::CommandSender*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] MidiDriver_BASE::send\28signed\20char\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] MidiDriver_BASE::sysExNoDelay\28unsigned\20char\20const*\2c\20unsigned\20short\29 can change the state due to initial scan
[asyncify] MidiDriver_BASE::metaEvent\28signed\20char\2c\20unsigned\20char\2c\20unsigned\20char*\2c\20unsigned\20short\29 can change the state due to initial scan
[asyncify] Common::OutSaveFile::err\28\29\20const can change the state due to initial scan
[asyncify] Common::OutSaveFile::clearErr\28\29 can change the state due to initial scan
[asyncify] Common::OutSaveFile::finalize\28\29[asyncify] Common::OutSaveFile::pos\28\29\20const can change the state due to initial scan
[asyncify] [asyncify] [asyncify] Common::OutSaveFile::size\28\29\20const can change the state due to initial scan
[asyncify] Common::OutSaveFile::~OutSaveFile\28\29.1 can change the state due to initial scan
[asyncify] [asyncify] Common::SaveFileManager::renameSavefile\28Common::String\20const&\2c\20Common::String\20const&\2c\20bool\29 can change the state due to initial scan
[asyncify] DefaultSaveFileManager::openRawFile\28Common::String\20const&\29 can change the state due to initial scan
[asyncify] [asyncify] [asyncify] DefaultSaveFileManager::assureCached\28Common::String\20const&\29 can change the state due to initial scan
[asyncify] DefaultSaveFileManager::openForLoading\28Common::String\20const&\29 can change the state due to initial scan
[asyncify] DefaultSaveFileManager::openForSaving\28Common::String\20const&\2c\20bool\29 can change the state due to initial scan
[asyncify] DefaultSaveFileManager::exists\28Common::String\20const&\29 can change the state due to initial scan
[asyncify] SdlEventSource::processMouseEvent\28Common::Event&\2c\20int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] DefaultSaveFileManager::removeSavefile\28Common::String\20const&\29 can change the state due to initial scan
[asyncify] SdlEventSource::openJoystick\28int\29 can change the state due to initial scan
[asyncify] SdlEventSource::handleKeyUp\28SDL_Event&\2c\20Common::Event&\29 can change the state due to initial scan
[asyncify] SdlEventSource::handleKeyDown\28SDL_Event&\2c\20Common::Event&\29 can change the state due to initial scan
[asyncify] SdlEventSource::handleMouseMotion\28SDL_Event&\2c\20Common::Event&\29 can change the state due to initial scan
[asyncify] SdlEventSource::pollEvent\28Common::Event&\29 can change the state due to initial scan
[asyncify] SdlEventSource::dispatchSDLEvent\28SDL_Event&\2c\20Common::Event&\29 can change the state due to initial scan
[asyncify] SdlEventSource::handleJoyHatMotion\28SDL_Event&\2c\20Common::Event&\29 can change the state due to initial scan
[asyncify] SdlEventSource::handleControllerButton\28SDL_Event\20const&\2c\20Common::Event&\2c\20bool\29 can change the state due to initial scan
[asyncify] SdlGraphicsManager::showMouse\28bool\29 can change the state due to initial scan
[asyncify] SdlGraphicsManager::notifyMousePosition\28Common::Point&\29 can change the state due to initial scan
[asyncify] WindowedGraphicsManager::setShakePos\28int\2c\20int\29 can change the state due to initial scan
[asyncify] WindowedGraphicsManager::showOverlay\28bool\29[asyncify] WindowedGraphicsManager::hideOverlay\28\29 can change the state due to initial scan
[asyncify] SdlGraphicsManager::saveScreenshot\28\29 can change the state due to initial scan
[asyncify] WindowedGraphicsManager::warpMouse\28int\2c\20int\29 can change the state due to initial scan
[asyncify] WindowedGraphicsManager::getDesiredGameAspectRatio\28\29\20const can change the state due to initial scan
[asyncify] WindowedGraphicsManager::recalculateDisplayAreas\28\29 can change the state due to initial scan
[asyncify] SdlGraphicsManager::notifyEvent\28Common::Event\20const&\29 can change the state due to initial scan
[asyncify] SurfaceSdlGraphicsManager::~SurfaceSdlGraphicsManager\28\29 can change the state due to initial scan
[asyncify] SurfaceSdlGraphicsManager::setFeatureState\28OSystem::Feature\2c\20bool\29 can change the state due to initial scan
[asyncify] SurfaceSdlGraphicsManager::SurfaceSdlGraphicsManager\28SdlEventSource*\2c\20SdlWindow*\29 can change the state due to initial scan
[asyncify] WindowedGraphicsManager::populateDisplayAreaDrawRect\28int\2c\20int\2c\20int\2c\20Common::Rect&\29\20const can change the state due to initial scan
[asyncify] SurfaceSdlGraphicsManager::endGFXTransaction\28\29 can change the state due to initial scan
[asyncify] SurfaceSdlGraphicsManager::setScaler\28unsigned\20int\2c\20int\29 can change the state due to initial scan
[asyncify] SurfaceSdlGraphicsManager::setGraphicsModeIntern\28\29 can change the state due to initial scan
[asyncify] SurfaceSdlGraphicsManager::initSize\28unsigned\20int\2c\20unsigned\20int\2c\20Graphics::PixelFormat\20const*\29 can change the state due to initial scan
[asyncify] SurfaceSdlGraphicsManager::deinitializeRenderer\28\29 can change the state due to initial scan
[asyncify] SurfaceSdlGraphicsManager::hotswapGFXMode\28\29 can change the state due to initial scan
[asyncify] SurfaceSdlGraphicsManager::updateScreen\28\29 can change the state due to initial scan
[asyncify] DefaultSaveFileManager::listSavefiles\28Common::String\20const&\29 can change the state due to initial scan
[asyncify] SurfaceSdlGraphicsManager::copyRectToScreen\28void\20const*\2c\20int\2c\20int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] SurfaceSdlGraphicsManager::fillScreen\28unsigned\20int\29 can change the state due to initial scan
[asyncify] SurfaceSdlGraphicsManager::setPalette\28unsigned\20char\20const*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] SurfaceSdlGraphicsManager::setCursorPalette\28unsigned\20char\20const*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] SurfaceSdlGraphicsManager::clearFocusRectangle\28\29 can change the state due to initial scan
[asyncify] SurfaceSdlGraphicsManager::internUpdateScreen\28\29 can change the state due to initial scan
[asyncify] SurfaceSdlGraphicsManager::setFocusRectangle\28Common::Rect\20const&\29 can change the state due to initial scan
[asyncify] SurfaceSdlGraphicsManager::copyRectToOverlay\28void\20const*\2c\20int\2c\20int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] SurfaceSdlGraphicsManager::setMouseCursor\28void\20const*\2c\20unsigned\20int\2c\20unsigned\20int\2c\20int\2c\20int\2c\20unsigned\20int\2c\20bool\2c\20Graphics::PixelFormat\20const*\29 can change the state due to initial scan
[asyncify] SurfaceSdlGraphicsManager::undrawMouse\28\29 can change the state due to initial scan
[asyncify] SurfaceSdlGraphicsManager::loadGFXMode\28\29 can change the state due to initial scan
[asyncify] SurfaceSdlGraphicsManager::drawMouse\28\29 can change the state due to initial scan
[asyncify] SurfaceSdlGraphicsManager::handleResizeImpl\28int\2c\20int\29 can change the state due to initial scan
[asyncify] SurfaceSdlGraphicsManager::blitCursor\28\29 can change the state due to initial scan
[asyncify] SurfaceSdlGraphicsManager::notifyResize\28int\2c\20int\29 can change the state due to initial scan
[asyncify] SurfaceSdlGraphicsManager::handleScalerHotkeys\28unsigned\20int\2c\20int\29 can change the state due to initial scan
[asyncify] SurfaceSdlGraphicsManager::SDL_SetVideoMode\28int\2c\20int\2c\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] SurfaceSdlGraphicsManager::notifyEvent\28Common::Event\20const&\29 can change the state due to initial scan
[asyncify] SurfaceSdlGraphicsManager::displayMessageOnOSD\28Common::U32String\20const&\29 can change the state due to initial scan
[asyncify] SdlMixerManager::sdlCallback\28void*\2c\20unsigned\20char*\2c\20int\29 can change the state due to initial scan
[asyncify] SurfaceSdlGraphicsManager::SDL_UpdateRects\28SDL_Surface*\2c\20int\2c\20SDL_Rect*\29 can change the state due to initial scan
[asyncify] OpenGL::Pipeline::activate\28\29 can change the state due to initial scan
[asyncify] [asyncify] SdlMixerManager::init\28\29OpenGL::Pipeline::deactivate\28\29 can change the state due to initial scan
[asyncify] DefaultTimerManager::installTimerProc\28void\20\28*\29\28void*\29\2c\20int\2c\20void*\2c\20Common::String\20const&\29 can change the state due to initial scan
[asyncify] SdlMixerManager::callbackHandler\28unsigned\20char*\2c\20int\29 can change the state due to initial scan
[asyncify] timer_handler\28unsigned\20int\2c\20void*\29[asyncify] [asyncify] DefaultSaveFileManager::checkPath\28Common::FSNode\20const&\29 can change the state due to initial scan
[asyncify] OpenGL::Shader::setUniform\28Common::String\20const&\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] OpenGL::Shader::setUniform\28Common::String\20const&\2c\20Math::Matrix<4\2c\204>\20const&\29 can change the state due to initial scan
[asyncify] OpenGL::Shader::getUniformLocation\28Common::String\20const&\29\20const can change the state due to initial scan
[asyncify] OpenGL::CLUT8LookUpPipeline::drawTextureInternal\28OpenGL::GLTexture\20const&\2c\20float\20const*\2c\20float\20const*\29 can change the state due to initial scan
[asyncify] OpenGL::ShaderPipeline::activateInternal\28\29 can change the state due to initial scan
[asyncify] OpenGL::GLTexture::destroy\28\29 can change the state due to initial scan
[asyncify] OpenGL::GLTexture::bind\28\29\20const can change the state due to initial scan
[asyncify] [asyncify] OpenGL::GLTexture::enableLinearFiltering\28bool\29 can change the state due to initial scan
[asyncify] OpenGL::GLTexture::setWrapMode\28OpenGL::WrapMode\29 can change the state due to initial scan
[asyncify] OpenGL::GLTexture::updateArea\28Common::Rect\20const&\2c\20Graphics::Surface\20const&\29 can change the state due to initial scan
[asyncify] OpenGL::GLTexture::~GLTexture\28\29 can change the state due to initial scan
[asyncify] OpenGL::Surface::fill\28unsigned\20int\29 can change the state due to initial scan
[asyncify] OpenGL::Surface::copyRectToTexture\28unsigned\20int\2c\20unsigned\20int\2c\20unsigned\20int\2c\20unsigned\20int\2c\20void\20const*\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] OpenGL::Surface::getDirtyArea\28\29\20const can change the state due to initial scan
[asyncify] OpenGL::Texture::updateGLTexture\28\29 can change the state due to initial scan
[asyncify] OpenGL::FakeTexture::allocate\28unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] OpenGL::FakeTexture::updateGLTexture\28\29 can change the state due to initial scan
[asyncify] OpenGL::TextureRGB555::updateGLTexture\28\29 can change the state due to initial scan
[asyncify] OpenGL::TextureRGBA8888Swap::updateGLTexture\28\29 can change the state due to initial scan
[asyncify] OpenGL::ScaledTexture::~ScaledTexture\28\29 can change the state due to initial scan
[asyncify] OpenGL::GLTexture::setSize\28unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] OpenGL::TextureCLUT8GPU::~TextureCLUT8GPU\28\29 can change the state due to initial scan
[asyncify] OpenGL::TextureCLUT8GPU::destroy\28\29 can change the state due to initial scan
[asyncify] OpenGL::ScaledTexture::updateGLTexture\28\29 can change the state due to initial scan
[asyncify] OpenGL::TextureCLUT8GPU::recreate\28\29 can change the state due to initial scan
[asyncify] OpenGL::ScaledTexture::setScaler\28unsigned\20int\2c\20int\29 can change the state due to initial scan
[asyncify] OpenGL::Framebuffer::applyViewport\28\29 can change the state due to initial scan
[asyncify] OpenGL::Framebuffer::applyClearColor\28\29 can change the state due to initial scan
[asyncify] OpenGL::Framebuffer::activate\28OpenGL::Pipeline*\29 can change the state due to initial scan
[asyncify] [asyncify] OpenGL::Framebuffer::applyProjectionMatrix\28\29[asyncify] [asyncify] OpenGL::Framebuffer::deactivate\28\29 can change the state due to initial scan
[asyncify] OpenGL::TextureCLUT8GPU::updateGLTexture\28\29OpenGL::Framebuffer::applyBlendState\28\29[asyncify] OpenGL::Backbuffer::activateInternal\28\29 can change the state due to initial scan
[asyncify] OpenGL::TextureTarget::~TextureTarget\28\29 can change the state due to initial scan
[asyncify] OpenGL::TextureTarget::activateInternal\28\29 can change the state due to initial scan
[asyncify] OpenGL::Framebuffer::applyScissorBox\28\29 can change the state due to initial scan
[asyncify] OpenGL::LibRetroPipeline::close\28\29 can change the state due to initial scan
[asyncify] Common::Array<OpenGL::LibRetroTextureTarget>::resize\28unsigned\20int\29 can change the state due to initial scan
[asyncify] OpenGL::LibRetroPipeline::drawTextureInternal\28OpenGL::GLTexture\20const&\2c\20float\20const*\2c\20float\20const*\29 can change the state due to initial scan
[asyncify] OpenGL::setLinearFiltering\28unsigned\20int\2c\20bool\29 can change the state due to initial scan
[asyncify] OpenGL::Shader::setUniform\28Common::String\20const&\2c\20Math::Matrix<2\2c\201>\20const&\29 can change the state due to initial scan
[asyncify] Graphics::Surface*\20OpenGL::loadViaImageDecoder<Image::BitmapDecoder>\28Common::FSNode\20const&\29 can change the state due to initial scan
[asyncify] Graphics::Surface*\20OpenGL::loadViaImageDecoder<Image::TGADecoder>\28Common::FSNode\20const&\29 can change the state due to initial scan
[asyncify] Graphics::Surface*\20OpenGL::loadViaImageDecoder<Image::JPEGDecoder>\28Common::FSNode\20const&\29 can change the state due to initial scan
[asyncify] OpenGL::OpenGLGraphicsManager::updateCursorPalette\28\29 can change the state due to initial scan
[asyncify] OpenGL::OpenGLGraphicsManager::setStretchMode\28int\29 can change the state due to initial scan
[asyncify] OpenGL::OpenGLGraphicsManager::setScaler\28unsigned\20int\2c\20int\29 can change the state due to initial scan
[asyncify] OpenGL::LibRetroPipeline::Pass::addTexCoord\28Common::String\20const&\2c\20OpenGL::LibRetroPipeline::Pass::TexCoordAttribute::Type\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] OpenGL::OpenGLGraphicsManager::updateLinearFiltering\28\29 can change the state due to initial scan
[asyncify] OpenGL::OpenGLGraphicsManager::recalculateCursorScaling\28\29 can change the state due to initial scan
[asyncify] OpenGL::OpenGLGraphicsManager::createSurface\28Graphics::PixelFormat\20const&\2c\20bool\2c\20bool\29 can change the state due to initial scan
[asyncify] OpenGL::Pipeline::drawTexture\28OpenGL::GLTexture\20const&\2c\20float\2c\20float\2c\20float\2c\20float\29 can change the state due to initial scan
[asyncify] OpenGL::OpenGLGraphicsManager::lockScreen\28\29 can change the state due to initial scan
[asyncify] OpenGL::OpenGLGraphicsManager::getOverlayWidth\28\29\20const can change the state due to initial scan
[asyncify] OpenGL::OpenGLGraphicsManager::getOverlayHeight\28\29\20const can change the state due to initial scan
[asyncify] OpenGL::OpenGLGraphicsManager::getOverlayFormat\28\29\20const can change the state due to initial scan
[asyncify] OpenGL::OpenGLGraphicsManager::grabOverlay\28Graphics::Surface&\29\20const can change the state due to initial scan
[asyncify] OpenGL::OpenGLGraphicsManager::setPalette\28unsigned\20char\20const*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] OpenGL::OpenGLGraphicsManager::grabPalette\28unsigned\20char*\2c\20unsigned\20int\2c\20unsigned\20int\29\20const can change the state due to initial scan
[asyncify] OpenGL::OpenGLGraphicsManager::handleResizeImpl\28int\2c\20int\29 can change the state due to initial scan
[asyncify] OpenGL::OpenGLGraphicsManager::displayActivityIconOnOSD\28Graphics::Surface\20const*\29[asyncify] OpenGL::OpenGLGraphicsManager::setMouseCursor\28void\20const*\2c\20unsigned\20int\2c\20unsigned\20int\2c\20int\2c\20int\2c\20unsigned\20int\2c\20bool\2c\20Graphics::PixelFormat\20const*\29 can change the state due to initial scan
[asyncify] OpenGL::OpenGLGraphicsManager::gameNeedsAspectRatioCorrection\28\29\20const can change the state due to initial scan
[asyncify] [asyncify] OpenGL::OpenGLGraphicsManager::updateScreen\28\29 can change the state due to initial scan
[asyncify] OpenGL::OpenGLGraphicsManager::recalculateDisplayAreas\28\29 can change the state due to initial scan
[asyncify] OpenGL::OpenGLGraphicsManager::saveScreenshot\28Common::String\20const&\29\20const can change the state due to initial scan
[asyncify] OpenGLSdlGraphicsManager::~OpenGLSdlGraphicsManager\28\29 can change the state due to initial scan
[asyncify] OpenGLSdlGraphicsManager::getHiDPIScreenFactor\28\29\20const can change the state due to initial scan
[asyncify] OpenGLSdlGraphicsManager::notifyResize\28int\2c\20int\29 can change the state due to initial scan
[asyncify] OpenGL::TextureGL::~TextureGL\28\29 can change the state due to initial scan
[asyncify] OpenGL::TiledSurface::~TiledSurface\28\29 can change the state due to initial scan
[asyncify] OpenGLSdlGraphicsManager::notifyEvent\28Common::Event\20const&\29 can change the state due to initial scan
[asyncify] OpenGL::TiledSurface::update\28\29 can change the state due to initial scan
[asyncify] OpenGL::OpenGLGraphicsManager::endGFXTransaction\28\29 can change the state due to initial scan
[asyncify] OpenGLSdlGraphicsManager::setupMode\28unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] OpenGL::ShaderSurfaceRenderer::prepareState\28\29 can change the state due to initial scan
[asyncify] OpenGL::TiledSurface::draw\28OpenGL::SurfaceRenderer*\29\20const can change the state due to initial scan
[asyncify] OpenGL::ShaderSurfaceRenderer::render\28OpenGL::TextureGL\20const*\2c\20Math::Rect2d\20const&\29 can change the state due to initial scan
[asyncify] OpenGL::ShaderSurfaceRenderer::restorePreviousState\28\29 can change the state due to initial scan
[asyncify] OpenGL::FrameBuffer::~FrameBuffer\28\29 can change the state due to initial scan
[asyncify] OpenGL::FrameBuffer::attach\28\29 can change the state due to initial scan
[asyncify] OpenGL::FrameBuffer::detach\28\29 can change the state due to initial scan
[asyncify] OpenGLSdlGraphics3dManager::closeOverlay\28\29 can change the state due to initial scan
[asyncify] Graphics::Surface*\20OpenGL::loadViaImageDecoder<Image::PNGDecoder>\28Common::FSNode\20const&\29 can change the state due to initial scan
[asyncify] OpenGLSdlGraphics3dManager::shouldRenderToFramebuffer\28\29\20const can change the state due to initial scan
[asyncify] OpenGLSdlGraphics3dManager::setupScreen\28\29 can change the state due to initial scan
[asyncify] OpenGLSdlGraphics3dManager::setStretchMode\28int\29 can change the state due to initial scan
[asyncify] OpenGLSdlGraphics3dManager::handleResizeImpl\28int\2c\20int\29 can change the state due to initial scan
[asyncify] OpenGLSdlGraphics3dManager::notifyResize\28int\2c\20int\29 can change the state due to initial scan
[asyncify] OpenGLSdlGraphics3dManager::gameNeedsAspectRatioCorrection\28\29\20const can change the state due to initial scan
[asyncify] OpenGLSdlGraphics3dManager::createOrUpdateScreen\28\29 can change the state due to initial scan
[asyncify] OpenGLSdlGraphics3dManager::showOverlay\28bool\29 can change the state due to initial scan
[asyncify] OpenGLSdlGraphics3dManager::updateScreen\28\29 can change the state due to initial scan
[asyncify] OpenGLSdlGraphics3dManager::saveScreenshot\28Common::String\20const&\29\20const can change the state due to initial scan
[asyncify] POSIXFilesystemNode::getParent\28\29\20const can change the state due to initial scan
[asyncify] POSIXFilesystemNode::getChild\28Common::String\20const&\29\20const can change the state due to initial scan
[asyncify] POSIXFilesystemNode::createWriteStream\28\29 can change the state due to initial scan
[asyncify] POSIXFilesystemNode::createDirectory\28\29 can change the state due to initial scan
[asyncify] POSIXFilesystemNode::createReadStream\28\29 can change the state due to initial scan
[asyncify] POSIXFilesystemNode::POSIXFilesystemNode\28Common::String\20const&\29 can change the state due to initial scan
[asyncify] Image::ImageDecoder::hasPalette\28\29\20const can change the state due to initial scan
[asyncify] Common::DisposablePtr<Common::ReadStream\2c\20Common::DefaultDeleter<Common::ReadStream>>::~DisposablePtr\28\29 can change the state due to initial scan
[asyncify] Image::BitmapDecoder::destroy\28\29 can change the state due to initial scan
[asyncify] Image::JPEGDecoder::decodeFrame\28Common::SeekableReadStream&\29 can change the state due to initial scan
[asyncify] Image::\28anonymous\20namespace\29::errorExit\28jpeg_common_struct*\29 can change the state due to initial scan
[asyncify] Image::\28anonymous\20namespace\29::skipInputData\28jpeg_decompress_struct*\2c\20long\29 can change the state due to initial scan
[asyncify] Image::\28anonymous\20namespace\29::outputMessage\28jpeg_common_struct*\29 can change the state due to initial scan
[asyncify] [asyncify] Image::\28anonymous\20namespace\29::fillInputBuffer\28jpeg_decompress_struct*\29[asyncify]  can change the state due to initial scan
[asyncify] Image::pngReadFromStream\28png_struct_def*\2c\20unsigned\20char*\2c\20unsigned\20long\29 can change the state due to initial scan
[asyncify] Image::BitmapRawDecoder::decodeFrame\28Common::SeekableReadStream&\29 can change the state due to initial scan
[asyncify] Image::TGADecoder::loadStream\28Common::SeekableReadStream&\29 can change the state due to initial scan
[asyncify] Image::CinepakDecoder::loadCodebook\28Common::SeekableReadStream&\2c\20unsigned\20short\2c\20unsigned\20char\2c\20unsigned\20char\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] Image::BitmapDecoder::loadStream\28Common::SeekableReadStream&\29 can change the state due to initial scan
[asyncify] Image::CinepakDecoder::setDither\28Image::Codec::DitherType\2c\20unsigned\20char\20const*\29 can change the state due to initial scan
[asyncify] Image::JPEGDecoder::loadStream\28Common::SeekableReadStream&\29 can change the state due to initial scan
[asyncify] Image::Indeo3Decoder::decodeFrame\28Common::SeekableReadStream&\29 can change the state due to initial scan
[asyncify] Image::Indeo4Decoder::decodeFrame\28Common::SeekableReadStream&\29 can change the state due to initial scan
[asyncify] Image::CinepakDecoder::decodeFrame\28Common::SeekableReadStream&\29 can change the state due to initial scan
[asyncify] Image::Indeo5Decoder::decodeFrame\28Common::SeekableReadStream&\29 can change the state due to initial scan
[asyncify] Image::PNGDecoder::loadStream\28Common::SeekableReadStream&\29 can change the state due to initial scan
[asyncify] Image::JYV1Decoder::decodeFrame\28Common::SeekableReadStream&\29 can change the state due to initial scan
[asyncify] Image::MJPEGDecoder::decodeFrame\28Common::SeekableReadStream&\29 can change the state due to initial scan
[asyncify] Image::MSRLEDecoder::decodeFrame\28Common::SeekableReadStream&\29 can change the state due to initial scan
[asyncify] Image::MSRLE4Decoder::decodeFrame\28Common::SeekableReadStream&\29 can change the state due to initial scan
[asyncify] Image::XanDecoder::decompressLuma\28Common::SeekableReadStream&\29 can change the state due to initial scan
[asyncify] Image::XanDecoder::decodeChroma\28Common::SeekableReadStream&\2c\20int\29 can change the state due to initial scan
[asyncify] Image::XanDecoder::decodeFrame\28Common::SeekableReadStream&\29 can change the state due to initial scan
[asyncify] Image::_unpack\28Common::SeekableReadStream&\2c\20unsigned\20char*\2c\20int\29 can change the state due to initial scan
[asyncify] Image::Indeo::IndeoDecoderBase::IndeoDecoderBase\28unsigned\20short\2c\20unsigned\20short\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] [asyncify] Image::Indeo::IndeoDecoderBase::decodeIndeoFrame\28\29 can change the state due to initial scan
[asyncify] Image::writePNG\28Common::WriteStream&\2c\20Graphics::Surface\20const&\2c\20unsigned\20char\20const*\29 can change the state due to initial scan
[asyncify] Graphics::CursorManager::showMouse\28bool\29 can change the state due to initial scan
[asyncify] Graphics::CursorManager::pushCursor\28void\20const*\2c\20unsigned\20int\2c\20unsigned\20int\2c\20int\2c\20int\2c\20unsigned\20int\2c\20bool\2c\20Graphics::PixelFormat\20const*\29 can change the state due to initial scan
[asyncify] Graphics::CursorManager::popCursor\28\29 can change the state due to initial scan
[asyncify] Graphics::CursorManager::pushCursorPalette\28unsigned\20char\20const*\2c\20unsigned\20int\2c\20unsigned\20int\29[asyncify] Graphics::CursorManager::popCursorPalette\28\29 can change the state due to initial scan
[asyncify] Graphics::Font::getBoundingBox\28unsigned\20int\29\20const can change the state due to initial scan
[asyncify] [asyncify] Graphics::Font::drawChar\28Graphics::ManagedSurface*\2c\20unsigned\20int\2c\20int\2c\20int\2c\20unsigned\20int\29\20const[asyncify] Graphics::Font::drawString\28Graphics::Surface*\2c\20Common::String\20const&\2c\20int\2c\20int\2c\20int\2c\20unsigned\20int\2c\20Graphics::TextAlign\2c\20int\2c\20bool\29\20const can change the state due to initial scan
[asyncify] Image::MSVideo1Decoder::decodeFrame\28Common::SeekableReadStream&\29 can change the state due to initial scan
[asyncify] Graphics::CursorManager::replaceCursor\28void\20const*\2c\20unsigned\20int\2c\20unsigned\20int\2c\20int\2c\20int\2c\20unsigned\20int\2c\20bool\2c\20Graphics::PixelFormat\20const*\29 can change the state due to initial scan
[asyncify] Graphics::Font::drawString\28Graphics::Surface*\2c\20Common::U32String\20const&\2c\20int\2c\20int\2c\20int\2c\20unsigned\20int\2c\20Graphics::TextAlign\2c\20int\2c\20bool\29\20const can change the state due to initial scan
[asyncify] Graphics::Font::drawString\28Graphics::ManagedSurface*\2c\20Common::String\20const&\2c\20int\2c\20int\2c\20int\2c\20unsigned\20int\2c\20Graphics::TextAlign\2c\20int\2c\20bool\29\20const can change the state due to initial scan
[asyncify] Graphics::Font::wordWrapText\28Common::U32String\20const&\2c\20int\2c\20Common::Array<Common::U32String>&\2c\20int\2c\20unsigned\20int\29\20const can change the state due to initial scan
[asyncify] Graphics::Font::getStringWidth\28Common::U32String\20const&\29\20const can change the state due to initial scan
[asyncify] Graphics::FontManager::~FontManager\28\29 can change the state due to initial scan
[asyncify] Common::WriteStream::writeUint32BE\28unsigned\20int\29 can change the state due to initial scan
[asyncify] Common::WriteStream::writeUint16BE\28unsigned\20short\29 can change the state due to initial scan
[asyncify] Graphics::AmigaFont::AmigaFont\28Common::SeekableReadStream*\29 can change the state due to initial scan
[asyncify] Graphics::TTFFont::drawChar\28Graphics::ManagedSurface*\2c\20unsigned\20int\2c\20int\2c\20int\2c\20unsigned\20int\29\20const can change the state due to initial scan
[asyncify] Graphics::TTFFont::getKerningOffset\28unsigned\20int\2c\20unsigned\20int\29\20const can change the state due to initial scan
[asyncify] Graphics::ManagedSurface::create\28short\2c\20short\29 can change the state due to initial scan
[asyncify] Graphics::ManagedSurface::ManagedSurface\28Graphics::ManagedSurface\20const&\29 can change the state due to initial scan
[asyncify] Graphics::loadTTFFont\28Common::SeekableReadStream&\2c\20int\2c\20Graphics::TTFSizeMode\2c\20unsigned\20int\2c\20Graphics::TTFRenderMode\2c\20unsigned\20int\20const*\2c\20bool\29 can change the state due to initial scan
[asyncify] Graphics::ManagedSurface::create\28Graphics::ManagedSurface&\2c\20Common::Rect\20const&\29 can change the state due to initial scan
[asyncify] Graphics::ManagedSurface::create\28short\2c\20short\2c\20Graphics::PixelFormat\20const&\29 can change the state due to initial scan
[asyncify] Graphics::ManagedSurface::markAllDirty\28\29 can change the state due to initial scan
[asyncify] Graphics::ManagedSurface::copyFrom\28Graphics::Surface\20const&\29 can change the state due to initial scan
[asyncify] Graphics::ManagedSurface::setPixels\28void*\29 can change the state due to initial scan
[asyncify] Graphics::ManagedSurface::copyFrom\28Graphics::ManagedSurface\20const&\29 can change the state due to initial scan
[asyncify] Graphics::ManagedSurface::addDirtyRect\28Common::Rect\20const&\29 can change the state due to initial scan
[asyncify] glad_gl_get_extensions\28int\2c\20char\20const**\2c\20unsigned\20int*\2c\20char***\29 can change the state due to initial scan
[asyncify] Graphics::ManagedSurface::blitFromInner\28Graphics::Surface\20const&\2c\20Common::Rect\20const&\2c\20Common::Rect\20const&\2c\20unsigned\20int\20const*\29 can change the state due to initial scan
[asyncify] glad_gl_get_proc_from_userptr\28void*\2c\20char\20const*\29 can change the state due to initial scan
[asyncify] loadFunc\28char\20const*\29 can change the state due to initial scan
[asyncify] OpenGL::clearGLError\28\29 can change the state due to initial scan
[asyncify] OpenGL::checkGLError\28char\20const*\2c\20char\20const*\2c\20int\29 can change the state due to initial scan
[asyncify] OpenGL::Shader::createDirectShader\28unsigned\20long\2c\20char\20const*\20const*\2c\20unsigned\20int\2c\20Common::String\20const&\29 can change the state due to initial scan
[asyncify] OpenGL::Shader::createCompatShader\28char\20const*\2c\20unsigned\20int\2c\20Common::String\20const&\2c\20int\29 can change the state due to initial scan
[asyncify] [asyncify] [asyncify] OpenGL::Shader::use\28bool\29 can change the state due to initial scan
[asyncify] OpenGL::Shader::freeBuffer\28unsigned\20int\29 can change the state due to initial scan
[asyncify] OpenGL::Shader::unbind\28\29 can change the state due to initial scan
[asyncify] Common::BasePtrTrackerDeletionImpl<unsigned\20int\2c\20OpenGL::SharedPtrProgramDeleter>::destructObject\28\29 can change the state due to initial scan
[asyncify] Scaler::scale\28unsigned\20char\20const*\2c\20unsigned\20int\2c\20unsigned\20char*\2c\20unsigned\20int\2c\20int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] SourceScaler::scaleIntern\28unsigned\20char\20const*\2c\20unsigned\20int\2c\20unsigned\20char*\2c\20unsigned\20int\2c\20int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] Graphics::ManagedSurface::transBlitFromInner\28Graphics::Surface\20const&\2c\20Common::Rect\20const&\2c\20Common::Rect\20const&\2c\20unsigned\20int\2c\20bool\2c\20unsigned\20int\2c\20unsigned\20int\2c\20unsigned\20int\20const*\2c\20unsigned\20int\20const*\2c\20Graphics::Surface\20const*\2c\20bool\29 can change the state due to initial scan
[asyncify] OpenGL::Context::initialize\28OpenGL::ContextType\29 can change the state due to initial scan
[asyncify] Graphics::SVGBitmap::~SVGBitmap\28\29 can change the state due to initial scan
[asyncify] Graphics::SVGBitmap::SVGBitmap\28Common::SeekableReadStream*\29 can change the state due to initial scan
[asyncify] Graphics::SVGBitmap::render\28Graphics::ManagedSurface&\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] Graphics::VectorRenderer::drawCross\28int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] Graphics::VectorRenderer::drawStep\28Common::Rect\20const&\2c\20Common::Rect\20const&\2c\20Graphics::DrawStep\20const&\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] Graphics::VectorRendererSpec<unsigned\20int>::drawCircle\28int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] Graphics::VectorRendererSpec<unsigned\20int>::drawLine\28int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] Graphics::VectorRendererSpec<unsigned\20int>::drawRoundedSquare\28int\2c\20int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] Graphics::VectorRendererSpec<unsigned\20int>::drawTriangle\28int\2c\20int\2c\20int\2c\20int\2c\20Graphics::VectorRenderer::TriangleOrientation\29 can change the state due to initial scan
[asyncify] Graphics::VectorRendererSpec<unsigned\20int>::drawSquare\28int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] Graphics::VectorRendererSpec<unsigned\20int>::drawBeveledSquare\28int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] Graphics::VectorRendererSpec<unsigned\20int>::drawTab\28int\2c\20int\2c\20int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] Graphics::VectorRendererSpec<unsigned\20int>::copyFrame\28OSystem*\2c\20Common::Rect\20const&\29 can change the state due to initial scan
[asyncify] Graphics::ManagedSurface::getSubArea\28Common::Rect\20const&\29 can change the state due to initial scan
[asyncify] Graphics::VectorRendererSpec<unsigned\20int>::copyWholeFrame\28OSystem*\29 can change the state due to initial scan
[asyncify] Graphics::VectorRendererSpec<unsigned\20int>::drawString\28Graphics::Font\20const*\2c\20Common::U32String\20const&\2c\20Common::Rect\20const&\2c\20Graphics::TextAlign\2c\20GUI::ThemeEngine::TextAlignVertical\2c\20int\2c\20bool\2c\20Common::Rect\20const&\29 can change the state due to initial scan
[asyncify] Graphics::VectorRendererSpec<unsigned\20int>::drawRoundedSquareAlg\28int\2c\20int\2c\20int\2c\20int\2c\20int\2c\20unsigned\20int\2c\20Graphics::VectorRenderer::FillMode\29 can change the state due to initial scan
[asyncify] Graphics::VectorRendererSpec<unsigned\20int>::drawRoundedSquareAlgClip\28int\2c\20int\2c\20int\2c\20int\2c\20int\2c\20unsigned\20int\2c\20Graphics::VectorRenderer::FillMode\29 can change the state due to initial scan
[asyncify] Graphics::VectorRendererSpec<unsigned\20int>::drawBevelSquareAlgClip\28int\2c\20int\2c\20int\2c\20int\2c\20int\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] Graphics::VectorRendererSpec<unsigned\20int>::drawBevelSquareAlg\28int\2c\20int\2c\20int\2c\20int\2c\20int\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] Graphics::VectorRendererSpec<unsigned\20short>::drawLine\28int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] Graphics::VectorRendererSpec<unsigned\20short>::drawCircle\28int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] Graphics::VectorRendererSpec<unsigned\20short>::drawTriangle\28int\2c\20int\2c\20int\2c\20int\2c\20Graphics::VectorRenderer::TriangleOrientation\29 can change the state due to initial scan
[asyncify] Graphics::VectorRendererSpec<unsigned\20short>::drawBeveledSquare\28int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] Graphics::VectorRendererSpec<unsigned\20short>::drawSquare\28int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] Graphics::VectorRendererSpec<unsigned\20short>::drawRoundedSquare\28int\2c\20int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] Graphics::VectorRendererSpec<unsigned\20short>::drawTab\28int\2c\20int\2c\20int\2c\20int\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] Graphics::VectorRendererSpec<unsigned\20short>::drawString\28Graphics::Font\20const*\2c\20Common::U32String\20const&\2c\20Common::Rect\20const&\2c\20Graphics::TextAlign\2c\20GUI::ThemeEngine::TextAlignVertical\2c\20int\2c\20bool\2c\20Common::Rect\20const&\29 can change the state due to initial scan
[asyncify] Graphics::VectorRendererSpec<unsigned\20short>::drawRoundedSquareAlg\28int\2c\20int\2c\20int\2c\20int\2c\20int\2c\20unsigned\20short\2c\20Graphics::VectorRenderer::FillMode\29 can change the state due to initial scan
[asyncify] Graphics::VectorRendererSpec<unsigned\20short>::drawRoundedSquareAlgClip\28int\2c\20int\2c\20int\2c\20int\2c\20int\2c\20unsigned\20short\2c\20Graphics::VectorRenderer::FillMode\29 can change the state due to initial scan
[asyncify] Graphics::VectorRendererSpec<unsigned\20short>::drawBevelSquareAlgClip\28int\2c\20int\2c\20int\2c\20int\2c\20int\2c\20unsigned\20short\2c\20unsigned\20short\29 can change the state due to initial scan
[asyncify] Graphics::VectorRendererSpec<unsigned\20short>::drawBevelSquareAlg\28int\2c\20int\2c\20int\2c\20int\2c\20int\2c\20unsigned\20short\2c\20unsigned\20short\29 can change the state due to initial scan
[asyncify] Graphics::VectorRendererAA<unsigned\20int>::drawRoundedSquareAlg\28int\2c\20int\2c\20int\2c\20int\2c\20int\2c\20unsigned\20int\2c\20Graphics::VectorRenderer::FillMode\29 can change the state due to initial scan
[asyncify] Graphics::VectorRendererAA<unsigned\20int>::drawInteriorRoundedSquareAlg\28int\2c\20int\2c\20int\2c\20int\2c\20int\2c\20unsigned\20int\2c\20Graphics::VectorRenderer::FillMode\29 can change the state due to initial scan
[asyncify] Graphics::VectorRendererAA<unsigned\20short>::drawRoundedSquareAlg\28int\2c\20int\2c\20int\2c\20int\2c\20int\2c\20unsigned\20short\2c\20Graphics::VectorRenderer::FillMode\29 can change the state due to initial scan
[asyncify] Graphics::VectorRendererAA<unsigned\20short>::drawInteriorRoundedSquareAlg\28int\2c\20int\2c\20int\2c\20int\2c\20int\2c\20unsigned\20short\2c\20Graphics::VectorRenderer::FillMode\29 can change the state due to initial scan
[asyncify] AdLibPart::send\28unsigned\20int\29 can change the state due to initial scan
[asyncify] AdLibPart::controlChange\28unsigned\20char\2c\20unsigned\20char\29 can change the state due to initial scan
[asyncify] MidiDriver_ADLIB::adlibWrite\28unsigned\20char\2c\20unsigned\20char\29 can change the state due to initial scan
[asyncify] MidiDriver_ADLIB::adlibWriteSecondary\28unsigned\20char\2c\20unsigned\20char\29 can change the state due to initial scan
[asyncify] MidiDriver::MidiDriver\28\29 can change the state due to initial scan
[asyncify] MidiDriver_ADLIB::onTimer\28\29 can change the state due to initial scan
[asyncify] MidiDriver_ADLIB::open\28\29 can change the state due to initial scan
[asyncify] MidiDriver_ADLIB::close\28\29 can change the state due to initial scan
[asyncify] MidiDriver_ADLIB::send\28unsigned\20int\29 can change the state due to initial scan
[asyncify] MidiDriver_ADLIB::send\28signed\20char\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] AdLibEmuMusicPlugin::createInstance\28MidiDriver**\2c\20unsigned\20int\29\20const can change the state due to initial scan
[asyncify] Common::Functor0Mem<void\2c\20MidiDriver_ADLIB>::operator\28\29\28\29\20const can change the state due to initial scan
[asyncify] Audio::LoopingAudioStream::endOfData\28\29\20const can change the state due to initial scan
[asyncify] Audio::LoopingAudioStream::LoopingAudioStream\28Common::DisposablePtr<Audio::RewindableAudioStream\2c\20Common::DefaultDeleter<Audio::RewindableAudioStream>>&&\2c\20unsigned\20int\2c\20bool\29 can change the state due to initial scan
[asyncify] Audio::LoopingAudioStream::readBuffer\28short*\2c\20int\29 can change the state due to initial scan
[asyncify] Audio::QueuingAudioStreamImpl::readBuffer\28short*\2c\20int\29 can change the state due to initial scan
[asyncify] Audio::SubSeekableAudioStream::getRate\28\29\20const can change the state due to initial scan
[asyncify] Audio::AudioStream::endOfStream\28\29\20const can change the state due to initial scan
[asyncify] Audio::LoopingAudioStream::isStereo\28\29\20const can change the state due to initial scan
[asyncify] Audio::SeekableAudioStream::rewind\28\29 can change the state due to initial scan
[asyncify] Audio::QueuingAudioStreamImpl::queueAudioStream\28Audio::AudioStream*\2c\20DisposeAfterUse::Flag\29 can change the state due to initial scan
[asyncify] Audio::SubSeekableAudioStream::endOfData\28\29\20const can change the state due to initial scan
[asyncify] Audio::SubSeekableAudioStream::endOfStream\28\29\20const can change the state due to initial scan
[asyncify] Audio::QueuingAudioStreamImpl::endOfData\28\29\20const can change the state due to initial scan
[asyncify] Audio::QueuingAudioStreamImpl::~QueuingAudioStreamImpl\28\29 can change the state due to initial scan
[asyncify] Audio::LimitingAudioStream::isStereo\28\29\20const can change the state due to initial scan
[asyncify] Audio::LimitingAudioStream::readBuffer\28short*\2c\20int\29 can change the state due to initial scan
[asyncify] Audio::LimitingAudioStream::getRate\28\29\20const can change the state due to initial scan
[asyncify] Audio::LimitingAudioStream::endOfData\28\29\20const can change the state due to initial scan
[asyncify] Audio::LimitingAudioStream::endOfStream\28\29\20const can change the state due to initial scan
[asyncify] OPL::OPL::stop\28\29 can change the state due to initial scan
[asyncify] OPL::OPL::~OPL\28\29 can change the state due to initial scan
[asyncify] OPL::EmulatedOPL::getRate\28\29\20const can change the state due to initial scan
[asyncify] OPL::EmulatedOPL::readBuffer\28short*\2c\20int\29 can change the state due to initial scan
[asyncify] OPL::EmulatedOPL::startCallbacks\28int\29 can change the state due to initial scan
[asyncify] OPL::EmulatedOPL::stopCallbacks\28\29 can change the state due to initial scan
[asyncify] OPL::EmulatedOPL::setCallbackFrequency\28int\29 can change the state due to initial scan
[asyncify] Audio::SubSeekableAudioStream::seek\28Audio::Timestamp\20const&\29 can change the state due to initial scan
[asyncify] MidiDriver_BASE::midiDumpDelta\28\29 can change the state due to initial scan
[asyncify] MidiDriver_BASE::send\28unsigned\20char\2c\20unsigned\20char\2c\20unsigned\20char\29 can change the state due to initial scan
[asyncify] MidiDriver_BASE::stopAllNotes\28bool\29 can change the state due to initial scan
[asyncify] MidiDriver_BASE::~MidiDriver_BASE\28\29 can change the state due to initial scan
[asyncify] Audio::Channel::updateChannelVolumes\28\29 can change the state due to initial scan
[asyncify] Audio::MixerImpl::getSoundElapsedTime\28Audio::SoundHandle\29 can change the state due to initial scan
[asyncify] Audio::MixerImpl::playStream\28Audio::Mixer::SoundType\2c\20Audio::SoundHandle*\2c\20Audio::AudioStream*\2c\20int\2c\20unsigned\20char\2c\20signed\20char\2c\20DisposeAfterUse::Flag\2c\20bool\2c\20bool\29 can change the state due to initial scan
[asyncify] Audio::Channel::pause\28bool\29 can change the state due to initial scan
[asyncify] Audio::MixerImpl::loopChannel\28Audio::SoundHandle\29 can change the state due to initial scan
[asyncify] Audio::MixerImpl::getElapsedTime\28Audio::SoundHandle\29 can change the state due to initial scan
[asyncify] Audio::Channel::~Channel\28\29 can change the state due to initial scan
[asyncify] MidiChannel_MPU401::send\28unsigned\20int\29 can change the state due to initial scan
[asyncify] MidiChannel_MPU401::noteOn\28unsigned\20char\2c\20unsigned\20char\29 can change the state due to initial scan
[asyncify] MidiChannel_MPU401::noteOff\28unsigned\20char\29 can change the state due to initial scan
[asyncify] MidiChannel_MPU401::pitchBend\28short\29 can change the state due to initial scan
[asyncify] MidiChannel_MPU401::controlChange\28unsigned\20char\2c\20unsigned\20char\29 can change the state due to initial scan
[asyncify] MidiChannel_MPU401::programChange\28unsigned\20char\29 can change the state due to initial scan
[asyncify] MidiChannel_MPU401::pitchBendFactor\28unsigned\20char\29 can change the state due to initial scan
[asyncify] MidiDriver_MPU401::close\28\29 can change the state due to initial scan
[asyncify] MidiChannel::volume\28unsigned\20char\29 can change the state due to initial scan
[asyncify] MidiChannel::modulationWheel\28unsigned\20char\29 can change the state due to initial scan
[asyncify] [asyncify] MidiChannel::effectLevel\28unsigned\20char\29 can change the state due to initial scan
[asyncify] MidiChannel::panPosition\28unsigned\20char\29 can change the state due to initial scan
[asyncify] MidiChannel::allNotesOff\28\29 can change the state due to initial scan
[asyncify] MidiDriver_MPU401::setTimerCallback\28void*\2c\20void\20\28*\29\28void*\29\29 can change the state due to initial scan
[asyncify] MidiChannel::chorusLevel\28unsigned\20char\29 can change the state due to initial scan
[asyncify] MidiChannel::sustain\28bool\29 can change the state due to initial scan
[asyncify] Audio::CopyRateConverter<true\2c\20true\2c\20true>::flow\28Audio::AudioStream&\2c\20short*\2c\20unsigned\20int\2c\20unsigned\20short\2c\20unsigned\20short\29 can change the state due to initial scan
[asyncify] Audio::SimpleRateConverter<true\2c\20true\2c\20false>::flow\28Audio::AudioStream&\2c\20short*\2c\20unsigned\20int\2c\20unsigned\20short\2c\20unsigned\20short\29 can change the state due to initial scan
[asyncify] Audio::LinearRateConverter<true\2c\20true\2c\20false>::flow\28Audio::AudioStream&\2c\20short*\2c\20unsigned\20int\2c\20unsigned\20short\2c\20unsigned\20short\29 can change the state due to initial scan
[asyncify] [asyncify] Audio::LinearRateConverter<true\2c\20true\2c\20true>::flow\28Audio::AudioStream&\2c\20short*\2c\20unsigned\20int\2c\20unsigned\20short\2c\20unsigned\20short\29[asyncify]  can change the state due to initial scan
[asyncify] Audio::LinearRateConverter<true\2c\20false\2c\20false>::flow\28Audio::AudioStream&\2c\20short*\2c\20unsigned\20int\2c\20unsigned\20short\2c\20unsigned\20short\29[asyncify] [asyncify] Audio::SimpleRateConverter<false\2c\20false\2c\20false>::flow\28Audio::AudioStream&\2c\20short*\2c\20unsigned\20int\2c\20unsigned\20short\2c\20unsigned\20short\29 can change the state due to initial scan
[asyncify] Audio::CopyRateConverter<false\2c\20false\2c\20false>::flow\28Audio::AudioStream&\2c\20short*\2c\20unsigned\20int\2c\20unsigned\20short\2c\20unsigned\20short\29 can change the state due to initial scan
[asyncify] Audio::CopyRateConverter<true\2c\20false\2c\20false>::flow\28Audio::AudioStream&\2c\20short*\2c\20unsigned\20int\2c\20unsigned\20short\2c\20unsigned\20short\29 can change the state due to initial scan
[asyncify] Audio::ADPCMStream::rewind\28\29 can change the state due to initial scan
[asyncify] Audio::Oki_ADPCMStream::readBuffer\28short*\2c\20int\29 can change the state due to initial scan
[asyncify] [asyncify] Audio::DVI_ADPCMStream::readBuffer\28short*\2c\20int\29 can change the state due to initial scan
[asyncify] Audio::MSIma_ADPCMStream::readBuffer\28short*\2c\20int\29 can change the state due to initial scan
[asyncify] Audio::MS_ADPCMStream::readBuffer\28short*\2c\20int\29 can change the state due to initial scan
[asyncify] Audio::DK3_ADPCMStream::readBuffer\28short*\2c\20int\29 can change the state due to initial scan
[asyncify] Audio::ADPCMStream::endOfData\28\29\20const can change the state due to initial scan
[asyncify] Audio::Apple_ADPCMStream::readBuffer\28short*\2c\20int\29 can change the state due to initial scan
[asyncify] Audio::Oki_ADPCMStream::endOfData\28\29\20const can change the state due to initial scan
[asyncify] Audio::XA_ADPCMStream::readBuffer\28short*\2c\20int\29 can change the state due to initial scan
[asyncify] Audio::makeADPCMStream\28Common::SeekableReadStream*\2c\20DisposeAfterUse::Flag\2c\20unsigned\20int\2c\20Audio::ADPCMType\2c\20int\2c\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] Audio::MS_ADPCMStream::endOfData\28\29\20const can change the state due to initial scan
[asyncify] Audio::G711AudioStream::readBuffer\28short*\2c\20int\29 can change the state due to initial scan
[asyncify] Audio::G711AudioStream::getLength\28\29\20const can change the state due to initial scan
[asyncify] Audio::G711AudioStream::seek\28Audio::Timestamp\20const&\29 can change the state due to initial scan
[asyncify] Audio::QuickTimeAudioDecoder::~QuickTimeAudioDecoder\28\29 can change the state due to initial scan
[asyncify] Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::getCurrentTrackTime\28\29\20const can change the state due to initial scan
[asyncify] Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::~QuickTimeAudioTrack\28\29.1 can change the state due to initial scan
[asyncify] Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::queueStream\28Audio::AudioStream*\2c\20Audio::Timestamp\20const&\29 can change the state due to initial scan
[asyncify] Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::readBuffer\28short*\2c\20int\29 can change the state due to initial scan
[asyncify] Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::endOfData\28\29\20const can change the state due to initial scan
[asyncify] Audio::QuickTimeAudioDecoder::AudioSampleDesc::~AudioSampleDesc\28\29 can change the state due to initial scan
[asyncify] Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::skipSamples\28Audio::Timestamp\20const&\2c\20Audio::AudioStream*\29 can change the state due to initial scan
[asyncify] Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::seek\28Audio::Timestamp\20const&\29 can change the state due to initial scan
[asyncify] [asyncify] Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::getRate\28\29\20const can change the state due to initial scan
[asyncify] Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::enterNewEdit\28Audio::Timestamp\20const&\29 can change the state due to initial scan
[asyncify] Audio::QuickTimeAudioDecoder::readSampleDesc\28Common::QuickTimeParser::Track*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] Audio::makeQuickTimeStream\28Common::SeekableReadStream*\2c\20DisposeAfterUse::Flag\29 can change the state due to initial scan
[asyncify] Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::queueAudio\28Audio::Timestamp\20const&\29 can change the state due to initial scan
[asyncify] Audio::QuickTimeAudioStream::readBuffer\28short*\2c\20int\29 can change the state due to initial scan
[asyncify] Audio::ForcedMonoAudioStream::readBuffer\28short*\2c\20int\29 can change the state due to initial scan
[asyncify] Audio::QuickTimeAudioStream::getRate\28\29\20const can change the state due to initial scan
[asyncify] Audio::QuickTimeAudioStream::isStereo\28\29\20const[asyncify] Audio::QuickTimeAudioStream::endOfData\28\29\20const can change the state due to initial scan
[asyncify] Audio::QuickTimeAudioStream::seek\28Audio::Timestamp\20const&\29 can change the state due to initial scan
[asyncify] Audio::QuickTimeAudioStream::getLength\28\29\20const can change the state due to initial scan
[asyncify] Audio::RawStream<3\2c\20true\2c\20true>::fillBuffer\28int\29 can change the state due to initial scan
[asyncify] Audio::RawStream<3\2c\20true\2c\20true>::seek\28Audio::Timestamp\20const&\29 can change the state due to initial scan
[asyncify] Audio::RawStream<2\2c\20true\2c\20true>::seek\28Audio::Timestamp\20const&\29 can change the state due to initial scan
[asyncify] Audio::RawStream<2\2c\20true\2c\20true>::fillBuffer\28int\29 can change the state due to initial scan
[asyncify] Audio::RawStream<1\2c\20true\2c\20false>::fillBuffer\28int\29 can change the state due to initial scan
[asyncify] Audio::RawStream<1\2c\20true\2c\20false>::seek\28Audio::Timestamp\20const&\29 can change the state due to initial scan
[asyncify] Audio::makeRawStream\28Common::SeekableReadStream*\2c\20int\2c\20unsigned\20char\2c\20DisposeAfterUse::Flag\29 can change the state due to initial scan
[asyncify] Audio::makeWAVStream\28Common::SeekableReadStream*\2c\20DisposeAfterUse::Flag\29 can change the state due to initial scan
[asyncify] OPL::DOSBox::DBOPL::Operator::ForwardVolume\28\29 can change the state due to initial scan
[asyncify] OPL::DOSBox::Chip::read\28\29 can change the state due to initial scan
[asyncify] OPL::DOSBox::Chip::write\28unsigned\20int\2c\20unsigned\20char\29 can change the state due to initial scan
[asyncify] OPL::DOSBox::OPL::reset\28\29 can change the state due to initial scan
[asyncify] OPL::DOSBox::OPL::writeReg\28int\2c\20int\29 can change the state due to initial scan
[asyncify] OPL::DOSBox::OPL::generateSamples\28short*\2c\20int\29 can change the state due to initial scan
[asyncify] OPL::MAME::OPL_STATUS_RESET\28OPL::MAME::fm_opl_f*\2c\20int\29 can change the state due to initial scan
[asyncify] OPL::DOSBox::OPL::init\28\29 can change the state due to initial scan
[asyncify] OPL::MAME::OPL::write\28int\2c\20int\29 can change the state due to initial scan
[asyncify] OPL::MAME::OPL::init\28\29 can change the state due to initial scan
[asyncify] OPL::MAME::OPLWriteReg\28OPL::MAME::fm_opl_f*\2c\20int\2c\20int\29 can change the state due to initial scan
[asyncify] MidiDriver_MT32::close\28\29 can change the state due to initial scan
[asyncify] MidiDriver_Emulated::open\28\29 can change the state due to initial scan
[asyncify] MidiDriver_MT32::generateSamples\28short*\2c\20int\29 can change the state due to initial scan
[asyncify] MT32EmuMusicPlugin::createInstance\28MidiDriver**\2c\20unsigned\20int\29\20const can change the state due to initial scan
[asyncify] MidiDriver_Emulated::readBuffer\28short*\2c\20int\29 can change the state due to initial scan
[asyncify] MT32Emu::CppInterfaceImpl::onMIDISystemRealtime\28void*\2c\20unsigned\20char\29 can change the state due to initial scan
[asyncify] [asyncify] MT32Emu::CppInterfaceImpl::onDeviceReset\28void*\29 can change the state due to initial scan
[asyncify] MT32Emu::CppInterfaceImpl::onNewReverbMode\28void*\2c\20unsigned\20char\29 can change the state due to initial scan
[asyncify] MT32Emu::CppInterfaceImpl::onNewReverbTime\28void*\2c\20unsigned\20char\29 can change the state due to initial scan
[asyncify] MT32Emu::CppInterfaceImpl::onNewReverbLevel\28void*\2c\20unsigned\20char\29 can change the state due to initial scan
[asyncify] MT32Emu::CppInterfaceImpl::onPolyStateChanged\28void*\2c\20unsigned\20char\29 can change the state due to initial scan
[asyncify] MT32Emu::CppInterfaceImpl::onProgramChanged\28void*\2c\20unsigned\20char\2c\20char\20const*\2c\20char\20const*\29 can change the state due to initial scan
[asyncify] [asyncify] MT32Emu::CppInterfaceImpl::printDebug\28void*\2c\20char\20const*\2c\20void*\29 can change the state due to initial scan
[asyncify] OPL::NUKED::OPL3_SlotGenerate\28OPL::NUKED::_opl3_slot*\29 can change the state due to initial scan
[asyncify] MT32Emu::CppInterfaceImpl::showLCDMessage\28void*\2c\20char\20const*\29 can change the state due to initial scan
[asyncify] OPL::NUKED::OPL::init\28\29 can change the state due to initial scan
[asyncify] Common::GenericArchiveMember::createReadStream\28\29\20const can change the state due to initial scan
[asyncify] Common::Archive::listMatchingMembers\28Common::List<Common::SharedPtr<Common::ArchiveMember>>&\2c\20Common::Path\20const&\29\20const can change the state due to initial scan
[asyncify] Common::MemcachingCaseInsensitiveArchive::createReadStreamForMember\28Common::Path\20const&\29\20const can change the state due to initial scan
[asyncify] Common::SearchSet::clear\28\29 can change the state due to initial scan
[asyncify] Common::SearchSet::remove\28Common::String\20const&\29 can change the state due to initial scan
[asyncify] Common::SearchSet::add\28Common::String\20const&\2c\20Common::Archive*\2c\20int\2c\20bool\29 can change the state due to initial scan
[asyncify] Common::SearchSet::hasFile\28Common::Path\20const&\29\20const can change the state due to initial scan
[asyncify] Common::SearchSet::listMatchingMembers\28Common::List<Common::SharedPtr<Common::ArchiveMember>>&\2c\20Common::Path\20const&\29\20const can change the state due to initial scan
[asyncify] Common::SearchSet::listMembers\28Common::List<Common::SharedPtr<Common::ArchiveMember>>&\29\20const can change the state due to initial scan
[asyncify] Common::SearchSet::createReadStreamForMember\28Common::Path\20const&\29\20const can change the state due to initial scan
[asyncify] Common::SearchManager::clear\28\29 can change the state due to initial scan
[asyncify] Common::ArchiveMember::getDisplayName\28\29\20const can change the state due to initial scan
[asyncify] Common::SearchSet::getMember\28Common::Path\20const&\29\20const can change the state due to initial scan
[asyncify] Common::ConfigManager::flushToDisk\28\29 can change the state due to initial scan
[asyncify] Common::ConfigManager::writeDomain\28Common::WriteStream&\2c\20Common::String\20const&\2c\20Common::ConfigManager::Domain\20const&\29 can change the state due to initial scan
[asyncify] Common::ConfigManager::loadFromStream\28Common::SeekableReadStream&\29 can change the state due to initial scan
[asyncify] debugHelper\28char\20const*\2c\20void*\2c\20bool\29 can change the state due to initial scan
[asyncify] Common::EventManager::~EventManager\28\29 can change the state due to initial scan
[asyncify] Common::EventDispatcher::unregisterSource\28Common::EventSource*\29 can change the state due to initial scan
[asyncify] Common::EventDispatcher::dispatchEvent\28Common::Event\20const&\29 can change the state due to initial scan
[asyncify] Common::EventDispatcher::dispatch\28\29 can change the state due to initial scan
[asyncify] Common::EventDispatcher::unregisterObserver\28Common::EventObserver*\29 can change the state due to initial scan
[asyncify] Common::File::~File\28\29 can change the state due to initial scan
[asyncify] Common::File::open\28Common::Path\20const&\29 can change the state due to initial scan
[asyncify] Common::File::open\28Common::FSNode\20const&\29 can change the state due to initial scan
[asyncify] Common::File::open\28Common::Path\20const&\2c\20Common::Archive&\29 can change the state due to initial scan
[asyncify] Common::File::close\28\29 can change the state due to initial scan
[asyncify] Common::File::exists\28Common::Path\20const&\29 can change the state due to initial scan
[asyncify] [asyncify] Common::File::read\28void*\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] Common::DumpFile::~DumpFile\28\29 can change the state due to initial scan
[asyncify] Common::DumpFile::open\28Common::FSNode\20const&\29 can change the state due to initial scan
[asyncify] Common::File::pos\28\29\20const can change the state due to initial scan
[asyncify] Common::File::size\28\29\20const can change the state due to initial scan
[asyncify] [asyncify] Common::DumpFile::write\28void\20const*\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] Common::DumpFile::seek\28long\20long\2c\20int\29 can change the state due to initial scan
[asyncify] Common::DumpFile::flush\28\29 can change the state due to initial scan
[asyncify] Common::DumpFile::size\28\29\20const can change the state due to initial scan
[asyncify] Common::FSNode::isDirectory\28\29\20const can change the state due to initial scan
[asyncify] Common::FSNode::exists\28\29\20const can change the state due to initial scan
[asyncify] Common::FSNode::FSNode\28Common::Path\20const&\29 can change the state due to initial scan
[asyncify] Common::FSNode::getChild\28Common::String\20const&\29\20const can change the state due to initial scan
[asyncify] Common::FSNode::getDisplayName\28\29\20const can change the state due to initial scan
[asyncify] Common::FSNode::getChildren\28Common::FSList&\2c\20Common::FSNode::ListMode\2c\20bool\29\20const can change the state due to initial scan
[asyncify] Common::FSNode::getPath\28\29\20const can change the state due to initial scan
[asyncify] Common::FSNode::getParent\28\29\20const can change the state due to initial scan
[asyncify] Common::FSNode::isReadable\28\29\20const can change the state due to initial scan
[asyncify] Common::FSNode::isWritable\28\29\20const can change the state due to initial scan
[asyncify] Common::FSNode::createWriteStream\28\29\20const can change the state due to initial scan
[asyncify] Common::FSNode::createReadStream\28\29\20const can change the state due to initial scan
[asyncify] Common::File::eos\28\29\20const can change the state due to initial scan
[asyncify] [asyncify] Common::FSNode::getName\28\29\20const can change the state due to initial scan
[asyncify] Common::BasePtrTrackerImpl<AbstractFSNode>::destructObject\28\29 can change the state due to initial scan
[asyncify] Common::MacResManager::getResForkDataSize\28\29\20const can change the state due to initial scan
[asyncify] Common::MacResManager::loadFromAppleDouble\28Common::SeekableReadStream*\29 can change the state due to initial scan
[asyncify] Common::MacResManager::loadFromMacBinary\28Common::SeekableReadStream*\29 can change the state due to initial scan
[asyncify] Common::MacResManager::open\28Common::Path\20const&\2c\20Common::Archive&\29 can change the state due to initial scan
[asyncify] Common::MacResManager::computeResForkMD5AsString\28unsigned\20int\2c\20bool\29\20const[asyncify] Common::FSDirectory::cacheDirectoryRecursive\28Common::FSNode\2c\20int\2c\20Common::Path\20const&\29\20const can change the state due to initial scan
[asyncify] Common::MacResManager::openFileOrDataFork\28Common::Path\20const&\2c\20Common::Archive&\29 can change the state due to initial scan
[asyncify] Common::MacResManager::isMacBinary\28Common::SeekableReadStream&\29 can change the state due to initial scan
[asyncify] Common::MacResManager::load\28Common::SeekableReadStream*\29 can change the state due to initial scan
[asyncify] [asyncify] [asyncify] Common::computeStreamMD5AsString\28Common::ReadStream&\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] Common::StackLock::StackLock\28Common::Mutex\20const&\2c\20char\20const*\29 can change the state due to initial scan
[asyncify] Common::Mutex::unlock\28\29 can change the state due to initial scan
[asyncify] [asyncify] Common::MacResManager::close\28\29[asyncify] Common::OSDMessageQueue::pollEvent\28Common::Event&\29 can change the state due to initial scan
[asyncify] Common::WriteStream::writeString\28Common::String\20const&\29 can change the state due to initial scan
[asyncify] Common::ReadStream::readStream\28unsigned\20int\29 can change the state due to initial scan
[asyncify] Common::ReadStream::readString\28char\2c\20unsigned\20long\29 can change the state due to initial scan
[asyncify] Common::SubReadStream::read\28void*\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] Common::SeekableReadStream::readLine\28bool\29 can change the state due to initial scan
[asyncify] Common::SeekableReadStream::readLine\28char*\2c\20unsigned\20long\2c\20bool\29 can change the state due to initial scan
[asyncify] Common::SeekableSubReadStream::SeekableSubReadStream\28Common::SeekableReadStream*\2c\20unsigned\20int\2c\20unsigned\20int\2c\20DisposeAfterUse::Flag\29.1 can change the state due to initial scan
[asyncify] Common::SafeSeekableSubReadStream::read\28void*\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] Common::SeekableSubReadStream::seek\28long\20long\2c\20int\29 can change the state due to initial scan
[asyncify] Common::SubReadStream::clearErr\28\29 can change the state due to initial scan
[asyncify] Common::SubReadStream::eos\28\29\20const can change the state due to initial scan
[asyncify] OSystem::~OSystem\28\29 can change the state due to initial scan
[asyncify] OSystem::destroy\28\29 can change the state due to initial scan
[asyncify] OSystem::initBackend\28\29 can change the state due to initial scan
[asyncify] OSystem::fatalError\28\29 can change the state due to initial scan
[asyncify] OSystem::setGraphicsMode\28char\20const*\29 can change the state due to initial scan
[asyncify] OSystem::setStretchMode\28char\20const*\29 can change the state due to initial scan
[asyncify] OSystem::createConfigReadStream\28\29 can change the state due to initial scan
[asyncify] OSystem::createConfigWriteStream\28\29 can change the state due to initial scan
[asyncify] warning\28char\20const*\2c\20...\29 can change the state due to initial scan
[asyncify] Common::TextToSpeechManager::pushState\28\29 can change the state due to initial scan
[asyncify] Common::TextToSpeechManager::popState\28\29 can change the state due to initial scan
[asyncify] Common::TextToSpeechManager::enable\28bool\29 can change the state due to initial scan
[asyncify] error\28char\20const*\2c\20...\29 can change the state due to initial scan
[asyncify] Common::Mutex::Mutex\28\29 can change the state due to initial scan
[asyncify] Common::TranslationManager::checkHeader\28Common::File&\29 can change the state due to initial scan
[asyncify] Common::TranslationManager::setLanguage\28Common::String\20const&\29 can change the state due to initial scan
[asyncify] Common::TranslationManager::openTranslationsFile\28Common::File&\29 can change the state due to initial scan
[asyncify] Common::TranslationManager::openTranslationsFile\28Common::FSNode\20const&\2c\20Common::File&\2c\20int\29 can change the state due to initial scan
[asyncify] Common::GzioReadStream::parentGetByte\28\29 can change the state due to initial scan
[asyncify] unzlocal_getShort\28Common::SeekableReadStream*\2c\20unsigned\20long*\29[asyncify]  can change the state due to initial scan
[asyncify] Common::GzioReadStream::initialize_tables\28\29 can change the state due to initial scan
[asyncify] Common::ZipArchive::~ZipArchive\28\29 can change the state due to initial scan
[asyncify] unzlocal_GetCurrentFileInfoInternal\28void*\2c\20unz_file_info*\2c\20unz_file_info_internal*\2c\20char*\2c\20unsigned\20long\2c\20void*\2c\20unsigned\20long\2c\20char*\2c\20unsigned\20long\29 can change the state due to initial scan
[asyncify] Common::makeZipArchive\28Common::FSNode\20const&\29 can change the state due to initial scan
[asyncify] Common::GZipReadStream::~GZipReadStream\28\29 can change the state due to initial scan
[asyncify] Common::GZipWriteStream::~GZipWriteStream\28\29 can change the state due to initial scan
[asyncify] Common::ZipArchive::readContentsForPath\28Common::String\20const&\29\20const can change the state due to initial scan
[asyncify] Common::GZipWriteStream::clearErr\28\29 can change the state due to initial scan
[asyncify] Common::GZipReadStream::seek\28long\20long\2c\20int\29 can change the state due to initial scan
[asyncify] Common::GZipWriteStream::err\28\29\20const[asyncify] Common::GZipWriteStream::write\28void\20const*\2c\20unsigned\20int\29[asyncify] Common::GZipReadStream::read\28void*\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] Common::GZipWriteStream::processData\28int\29 can change the state due to initial scan
[asyncify] Common::GZipWriteStream::finalize\28\29 can change the state due to initial scan
[asyncify] Common::QuickTimeParser::close\28\29 can change the state due to initial scan
[asyncify] Common::INIFile::loadFromStream\28Common::SeekableReadStream&\29 can change the state due to initial scan
[asyncify] Common::QuickTimeParser::readLeaf\28Common::QuickTimeParser::Atom\29[asyncify]  can change the state due to initial scan
[asyncify] Common::QuickTimeParser::readHDLR\28Common::QuickTimeParser::Atom\29 can change the state due to initial scan
[asyncify] Common::QuickTimeParser::readDefault\28Common::QuickTimeParser::Atom\29 can change the state due to initial scan
[asyncify] Common::QuickTimeParser::readMVHD\28Common::QuickTimeParser::Atom\29 can change the state due to initial scan
[asyncify] Common::QuickTimeParser::readSTSD\28Common::QuickTimeParser::Atom\29 can change the state due to initial scan
[asyncify] Common::QuickTimeParser::readTKHD\28Common::QuickTimeParser::Atom\29 can change the state due to initial scan
[asyncify] Common::QuickTimeParser::readWAVE\28Common::QuickTimeParser::Atom\29 can change the state due to initial scan
[asyncify] Common::QuickTimeParser::readCMOV\28Common::QuickTimeParser::Atom\29 can change the state due to initial scan
[asyncify] Common::WinResources::loadFromEXE\28Common::String\20const&\29 can change the state due to initial scan
[asyncify] Common::QuickTimeParser::Track::~Track\28\29 can change the state due to initial scan
[asyncify] [asyncify] Common::WinResources::loadFromCompressedEXE\28Common::String\20const&\29 can change the state due to initial scan
[asyncify] Common::NEResources::getResourceString\28Common::SeekableReadStream&\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] [asyncify] Common::NEResources::getResource\28Common::WinResourceID\20const&\2c\20Common::WinResourceID\20const&\29 can change the state due to initial scan
[asyncify] Common::NEResources::loadString\28unsigned\20int\29 can change the state due to initial scan
[asyncify] Common::NEResources::loadFromEXE\28Common::SeekableReadStream*\2c\20DisposeAfterUse::Flag\29 can change the state due to initial scan
[asyncify] Common::PEResources::clear\28\29 can change the state due to initial scan
[asyncify] Common::NEResources::clear\28\29 can change the state due to initial scan
[asyncify] Common::NEResources::parseVersionInfo\28Common::SeekableReadStream*\29 can change the state due to initial scan
[asyncify] Common::PEResources::parseResourceLevel\28Common::PEResources::Section&\2c\20unsigned\20int\2c\20int\29 can change the state due to initial scan
[asyncify] Common::PEResources::getResource\28Common::WinResourceID\20const&\2c\20Common::WinResourceID\20const&\29 can change the state due to initial scan
[asyncify] Common::PEResources::getResource\28Common::WinResourceID\20const&\2c\20Common::WinResourceID\20const&\2c\20Common::WinResourceID\20const&\29 can change the state due to initial scan
[asyncify] Common::PEResources::loadString\28unsigned\20int\29 can change the state due to initial scan
[asyncify] Common::PEResources::parseVersionInfo\28Common::SeekableReadStream*\29 can change the state due to initial scan
[asyncify] Common::XMLParser::~XMLParser\28\29 can change the state due to initial scan
[asyncify] Common::XMLParser::close\28\29 can change the state due to initial scan
[asyncify] Common::XMLParser::closeKey\28\29 can change the state due to initial scan
[asyncify] Common::XMLParser::parserError\28Common::String\20const&\29 can change the state due to initial scan
[asyncify] Common::XMLParser::parseToken\28\29 can change the state due to initial scan
[asyncify] Common::XMLParser::parse\28\29 can change the state due to initial scan
[asyncify] MT32Emu::Poly::setState\28MT32Emu::PolyState\29 can change the state due to initial scan
[asyncify] MT32Emu::Partial::deactivate\28\29 can change the state due to initial scan
[asyncify] MT32Emu::Part::refresh\28\29 can change the state due to initial scan
[asyncify] MT32Emu::Part::setProgram\28unsigned\20int\29 can change the state due to initial scan
[asyncify] MT32Emu::Part::refreshTimbre\28unsigned\20int\29 can change the state due to initial scan
[asyncify] MT32Emu::RhythmPart::noteOn\28unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] MT32Emu::BReverbModelImpl<short>::close\28\29 can change the state due to initial scan
[asyncify] MT32Emu::BReverbModelImpl<short>::process\28short\20const*\2c\20short\20const*\2c\20short*\2c\20short*\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] MT32Emu::BReverbModelImpl<float>::process\28float\20const*\2c\20float\20const*\2c\20float*\2c\20float*\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] MT32Emu::BReverbModelImpl<short>::isActive\28\29\20const can change the state due to initial scan
[asyncify] MT32Emu::BReverbModelImpl<short>::open\28\29 can change the state due to initial scan
[asyncify] MT32Emu::BReverbModelImpl<short>::setParameters\28unsigned\20char\2c\20unsigned\20char\29 can change the state due to initial scan
[asyncify] MT32Emu::BReverbModelImpl<float>::isActive\28\29\20const can change the state due to initial scan
[asyncify] MT32Emu::Part::playPoly\28MT32Emu::PatchCache\20const*\2c\20MT32Emu::MemParams::RhythmTemp\20const*\2c\20unsigned\20int\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] MT32Emu::BReverbModelImpl<float>::open\28\29 can change the state due to initial scan
[asyncify] MT32Emu::ROMImage::ROMImage\28MT32Emu::File*\2c\20bool\2c\20MT32Emu::ROMInfo\20const*\20const*\29 can change the state due to initial scan
[asyncify] MT32Emu::ROMImage::freeROMImage\28MT32Emu::ROMImage\20const*\29 can change the state due to initial scan
[asyncify] MT32Emu::AbstractFile::getSHA1\28\29 can change the state due to initial scan
[asyncify] MT32Emu::AccurateLowPassFilter::process\28int\29 can change the state due to initial scan
[asyncify] MT32Emu::AnalogImpl<int>::process\28short*\2c\20short\20const*\2c\20short\20const*\2c\20short\20const*\2c\20short\20const*\2c\20short\20const*\2c\20short\20const*\2c\20unsigned\20int\29[asyncify] MT32Emu::AnalogImpl<float>::process\28float*\2c\20float\20const*\2c\20float\20const*\2c\20float\20const*\2c\20float\20const*\2c\20float\20const*\2c\20float\20const*\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] MT32Emu::AnalogImpl<int>::getDACStreamsLength\28unsigned\20int\29\20const can change the state due to initial scan
[asyncify] MT32Emu::Synth::setOutputGain\28float\29 can change the state due to initial scan
[asyncify] MT32Emu::Synth::setReverbOutputGain\28float\29 can change the state due to initial scan
[asyncify] MT32Emu::AccurateLowPassFilter::process\28float\29 can change the state due to initial scan
[asyncify] MT32Emu::Synth::dispose\28\29 can change the state due to initial scan
[asyncify] MT32Emu::Synth::printDebug\28char\20const*\2c\20...\29 can change the state due to initial scan
[asyncify] MT32Emu::Synth::refreshSystemReverbParameters\28\29 can change the state due to initial scan
[asyncify] MT32Emu::MidiEventQueue::dropMidiEvent\28\29 can change the state due to initial scan
[asyncify] MT32Emu::Synth::playMsg\28unsigned\20int\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] MT32Emu::Synth::playSysex\28unsigned\20char\20const*\2c\20unsigned\20int\2c\20unsigned\20int\29[asyncify] MT32Emu::Synth::playMsgNow\28unsigned\20int\29 can change the state due to initial scan
[asyncify] MT32Emu::Synth::reset\28\29 can change the state due to initial scan
[asyncify] MT32Emu::Synth::getStereoOutputSampleRate\28\29\20const can change the state due to initial scan
[asyncify] [asyncify] MT32Emu::Synth::writeSysexGlobal\28unsigned\20int\2c\20unsigned\20char\20const*\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] MT32Emu::Synth::writeSysex\28unsigned\20char\2c\20unsigned\20char\20const*\2c\20unsigned\20int\29[asyncify] MT32Emu::RendererImpl<short>::doRenderStreams\28MT32Emu::DACOutputStreams<short>\20const&\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] MT32Emu::RendererImpl<float>::doRender\28float*\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] MT32Emu::Synth::render\28float*\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] MT32Emu::RendererImpl<float>::doRenderStreams\28MT32Emu::DACOutputStreams<float>\20const&\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] MT32Emu::Renderer::updateDisplayState\28\29 can change the state due to initial scan
[asyncify] MT32Emu::DefaultMidiStreamParser::handleShortMessage\28unsigned\20int\29 can change the state due to initial scan
[asyncify] MT32Emu::DefaultMidiStreamParser::handleSysex\28unsigned\20char\20const*\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] MT32Emu::DefaultMidiStreamParser::handleSystemRealtimeMessage\28unsigned\20char\29[asyncify] non-virtual\20thunk\20to\20MT32Emu::DefaultMidiStreamParser::handleSystemRealtimeMessage\28unsigned\20char\29 can change the state due to initial scan
[asyncify] MT32Emu::DelegatingReportHandlerAdapter::onErrorControlROM\28\29 can change the state due to initial scan
[asyncify] MT32Emu::DelegatingReportHandlerAdapter::printDebug\28char\20const*\2c\20void*\29 can change the state due to initial scan
[asyncify] MT32Emu::DelegatingReportHandlerAdapter::onErrorPCMROM\28\29 can change the state due to initial scan
[asyncify] MT32Emu::replaceOrMergeROMImage\28MT32Emu::ROMImage\20const*&\2c\20MT32Emu::ROMImage\20const*\2c\20MT32Emu::MachineConfiguration\20const*\2c\20mt32emu_return_code\2c\20mt32emu_return_code\29[asyncify] MT32Emu::DelegatingReportHandlerAdapter::onMIDIMessagePlayed\28\29 can change the state due to initial scan
[asyncify] mt32emu_free_context can change the state due to initial scan
[asyncify] MT32Emu::DelegatingReportHandlerAdapter::onMIDIQueueOverflow\28\29 can change the state due to initial scan
[asyncify]  can change the state due to initial scan
[asyncify] MT32Emu::DelegatingReportHandlerAdapter::onDeviceReconfig\28\29 can change the state due to initial scan
[asyncify] MT32Emu::DelegatingReportHandlerAdapter::onNewReverbMode\28unsigned\20char\29[asyncify] [asyncify] [asyncify] MT32Emu::DelegatingReportHandlerAdapter::onNewReverbLevel\28unsigned\20char\29[asyncify] MT32Emu::DelegatingReportHandlerAdapter::onProgramChanged\28unsigned\20char\2c\20char\20const*\2c\20char\20const*\29 can change the state due to initial scan
[asyncify] MT32Emu::DelegatingReportHandlerAdapter::onLCDStateUpdated\28\29 can change the state due to initial scan
[asyncify] MT32Emu::DelegatingReportHandlerAdapter::onMidiMessageLEDStateUpdated\28bool\29 can change the state due to initial scan
[asyncify] MT32Emu::DelegatingReportHandlerAdapter::onNewReverbTime\28unsigned\20char\29 can change the state due to initial scan
[asyncify] MT32Emu::DelegatingReportHandlerAdapter::onDeviceReset\28\29 can change the state due to initial scan
[asyncify] SRCTools::ResamplerModel::CascadeStage::getOutputSamples\28float*\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] MT32Emu::SampleRateConverter::~SampleRateConverter\28\29 can change the state due to initial scan
[asyncify] FT_Get_Advance can change the state due to initial scan
[asyncify] af_face_globals_free can change the state due to initial scan
[asyncify] cff_get_interface can change the state due to initial scan
[asyncify] cff_index_get_sid_string can change the state due to initial scan
[asyncify] cff_size_init can change the state due to initial scan
[asyncify] cff_size_done can change the state due to initial scan
[asyncify] cff_slot_init can change the state due to initial scan
[asyncify] cff_face_done can change the state due to initial scan
[asyncify] af_autofitter_load_glyph can change the state due to initial scan
[asyncify] cff_get_kerning can change the state due to initial scan
[asyncify] cff_get_advances can change the state due to initial scan
[asyncify] cff_size_request can change the state due to initial scan
[asyncify] cff_glyph_load can change the state due to initial scan
[asyncify] cff_cmap_unicode_init can change the state due to initial scan
[asyncify] [asyncify] [asyncify] cff_size_select can change the state due to initial scan
[asyncify] cff_cmap_unicode_char_next can change the state due to initial scan
[asyncify] cff_get_ps_name can change the state due to initial scan
[asyncify] cff_ps_get_font_info[asyncify] cff_get_glyph_name can change the state due to initial scan
[asyncify] cff_get_name_index can change the state due to initial scan
[asyncify] cff_get_cmap_info can change the state due to initial scan
[asyncify] cff_get_ros can change the state due to initial scan
[asyncify] cf2_glyphpath_lineTo can change the state due to initial scan
[asyncify] cf2_freeSeacComponent can change the state due to initial scan
[asyncify] cf2_getSeacComponent can change the state due to initial scan
[asyncify] cf2_glyphpath_curveTo can change the state due to initial scan
[asyncify] cf2_glyphpath_pushPrevElem can change the state due to initial scan
[asyncify] cff_parser_run can change the state due to initial scan
[asyncify] FT_Render_Glyph can change the state due to initial scan
[asyncify] [asyncify] FT_Get_Char_Index can change the state due to initial scan
[asyncify] FT_Load_Glyph can change the state due to initial scan
[asyncify] FT_New_GlyphSlot can change the state due to initial scan
[asyncify] open_face can change the state due to initial scan
[asyncify] BDF_Face_Init can change the state due to initial scan
[asyncify] FT_New_Size can change the state due to initial scan
[asyncify] FT_Open_Face can change the state due to initial scan
[asyncify] destroy_size can change the state due to initial scan
[asyncify] destroy_face can change the state due to initial scan
[asyncify] FT_Done_Size can change the state due to initial scan
[asyncify] FT_Select_Size can change the state due to initial scan
[asyncify] FT_Set_Charmap can change the state due to initial scan
[asyncify] FT_Request_Size can change the state due to initial scan
[asyncify] FT_Get_Next_Char can change the state due to initial scan
[asyncify] FT_CMap_New can change the state due to initial scan
[asyncify] FT_Remove_Module can change the state due to initial scan
[asyncify] FT_Add_Module can change the state due to initial scan
[asyncify] ft_module_get_service can change the state due to initial scan
[asyncify] FT_Outline_Decompose can change the state due to initial scan
[asyncify] FT_Stream_Close can change the state due to initial scan
[asyncify] FT_Stream_Seek can change the state due to initial scan
[asyncify] FT_Stream_Skip can change the state due to initial scan
[asyncify] FT_Stream_Read can change the state due to initial scan
[asyncify] FT_Stream_ReadAt can change the state due to initial scan
[asyncify] FT_Stream_TryRead can change the state due to initial scan
[asyncify] FT_Stream_EnterFrame can change the state due to initial scan
[asyncify] FT_Stream_ReadChar can change the state due to initial scan
[asyncify] FT_Stream_ReadUShort[asyncify] FT_Stream_ReadULong can change the state due to initial scan
[asyncify] FT_Stream_ReadULongLE can change the state due to initial scan
[asyncify] ft_mem_alloc[asyncify] [asyncify] FT_Stream_ReadUShortLE can change the state due to initial scan
[asyncify] ft_mem_free can change the state due to initial scan
[asyncify] ft_mem_strdup can change the state due to initial scan
[asyncify] ft_mem_qrealloc[asyncify] ft_mem_realloc can change the state due to initial scan
[asyncify] FT_List_Finalize can change the state due to initial scan
[asyncify] inflateInit2_ can change the state due to initial scan
[asyncify] ft_gzip_file_io can change the state due to initial scan
[asyncify] inflateEnd can change the state due to initial scan
[asyncify] ft_gzip_file_fill_output can change the state due to initial scan
[asyncify] inflate_flush can change the state due to initial scan
[asyncify] inflate can change the state due to initial scan
[asyncify] pfr_face_init can change the state due to initial scan
[asyncify] afm_parser_read_vals can change the state due to initial scan
[asyncify] t1_cmap_std_char_next can change the state due to initial scan
[asyncify] ft_raster1_render can change the state due to initial scan
[asyncify] ft_raster1_set_mode can change the state due to initial scan
[asyncify] t1_cmap_std_char_index can change the state due to initial scan
[asyncify] t1_cmap_unicode_init can change the state due to initial scan
[asyncify] t1_cmap_unicode_char_index can change the state due to initial scan
[asyncify] t1_cmap_unicode_char_next can change the state due to initial scan
[asyncify] t1_decoder_parse_charstrings can change the state due to initial scan
[asyncify] Bezier_Up can change the state due to initial scan
[asyncify] Render_Single_Pass can change the state due to initial scan
[asyncify] tt_cmap14_char_var_index can change the state due to initial scan
[asyncify] tt_face_get_name can change the state due to initial scan
[asyncify] tt_face_load_head can change the state due to initial scan
[asyncify] tt_face_load_cmap can change the state due to initial scan
[asyncify] tt_face_load_hhea can change the state due to initial scan
[asyncify] tt_face_load_maxp can change the state due to initial scan
[asyncify] tt_face_load_post can change the state due to initial scan
[asyncify] tt_face_load_os2 can change the state due to initial scan
[asyncify] sfnt_init_face can change the state due to initial scan
[asyncify] tt_face_load_name can change the state due to initial scan
[asyncify] ps_unicodes_init can change the state due to initial scan
[asyncify] [asyncify] tt_face_load_gasp can change the state due to initial scan
[asyncify] sfnt_load_face can change the state due to initial scan
[asyncify] tt_face_load_pclt can change the state due to initial scan
[asyncify] tt_face_load_bhed can change the state due to initial scan
[asyncify] tt_face_load_sbit_image can change the state due to initial scan
[asyncify] tt_face_get_ps_name can change the state due to initial scan
[asyncify] tt_sbit_decoder_load_image can change the state due to initial scan
[asyncify] tt_face_load_hmtx can change the state due to initial scan
[asyncify] tt_face_load_sbit can change the state due to initial scan
[asyncify] tt_face_load_strike_metrics can change the state due to initial scan
[asyncify] load_post_names can change the state due to initial scan
[asyncify] tt_get_cmap_info can change the state due to initial scan
[asyncify] gray_hline can change the state due to initial scan
[asyncify] gray_raster_render can change the state due to initial scan
[asyncify] ft_smooth_render_generic can change the state due to initial scan
[asyncify] tt_get_interface can change the state due to initial scan
[asyncify] tt_face_load_cvt can change the state due to initial scan
[asyncify] tt_face_done can change the state due to initial scan
[asyncify] tt_face_init can change the state due to initial scan
[asyncify] tt_size_run_prep can change the state due to initial scan
[asyncify] tt_get_advances can change the state due to initial scan
[asyncify] ft_raster1_init can change the state due to initial scan
[asyncify] tt_glyph_load can change the state due to initial scan
[asyncify] tt_size_select[asyncify] [asyncify] load_truetype_glyph can change the state due to initial scan
[asyncify] sfnt_done_face can change the state due to initial scan
[asyncify] Compute_Point_Displacement can change the state due to initial scan
[asyncify] Ins_DELTAP can change the state due to initial scan
[asyncify] tt_face_vary_cvt can change the state due to initial scan
[asyncify] TT_Set_Var_Design can change the state due to initial scan
[asyncify] TT_Set_MM_Blend can change the state due to initial scan
[asyncify] tt_get_metrics can change the state due to initial scan
[asyncify] TT_Hint_Glyph can change the state due to initial scan
[asyncify] TT_Get_MM_Var can change the state due to initial scan
[asyncify] T1_Parse_Glyph can change the state due to initial scan
[asyncify] parse_dict can change the state due to initial scan
[asyncify] T1_Parse_Glyph_And_Get_Char_String can change the state due to initial scan
[asyncify] T1_Size_Init can change the state due to initial scan
[asyncify] T1_Size_Done can change the state due to initial scan
[asyncify] T1_GlyphSlot_Init can change the state due to initial scan
[asyncify] T1_Get_Advances can change the state due to initial scan
[asyncify] T1_Load_Glyph can change the state due to initial scan
[asyncify] T1_Size_Request can change the state due to initial scan
[asyncify] T1_Read_Metrics can change the state due to initial scan
[asyncify] TT_RunIns can change the state due to initial scan
[asyncify] t1_parse_font_matrix can change the state due to initial scan
[asyncify] parse_encoding can change the state due to initial scan
[asyncify] T1_Face_Init can change the state due to initial scan
[asyncify] parse_blend_design_positions can change the state due to initial scan
[asyncify] parse_blend_design_map can change the state due to initial scan
[asyncify] [asyncify] parse_subrs can change the state due to initial scan
[asyncify] parse_blend_axis_types can change the state due to initial scan
[asyncify] parse_buildchar can change the state due to initial scan
[asyncify] parse_charstrings can change the state due to initial scan
[asyncify] cid_size_init can change the state due to initial scan
[asyncify] cid_size_done can change the state due to initial scan
[asyncify] cid_slot_init can change the state due to initial scan
[asyncify] cid_slot_load_glyph can change the state due to initial scan
[asyncify] cid_size_request can change the state due to initial scan
[asyncify] cid_load_glyph can change the state due to initial scan
[asyncify] cid_face_init can change the state due to initial scan
[asyncify] parse_fd_array can change the state due to initial scan
[asyncify] parse_expansion_factor can change the state due to initial scan
[asyncify] cid_parse_font_matrix can change the state due to initial scan
[asyncify] T42_GlyphSlot_Done can change the state due to initial scan
[asyncify] T42_GlyphSlot_Load can change the state due to initial scan
[asyncify] T42_Face_Init can change the state due to initial scan
[asyncify] t42_parse_encoding can change the state due to initial scan
[asyncify] t42_parse_charstrings can change the state due to initial scan
[asyncify] t42_parse_sfnts can change the state due to initial scan
[asyncify] png_error can change the state due to initial scan
[asyncify] png_free can change the state due to initial scan
[asyncify] png_malloc_base[asyncify] [asyncify] png_malloc_warn can change the state due to initial scan
[asyncify] png_malloc can change the state due to initial scan
[asyncify] png_realloc_array can change the state due to initial scan
[asyncify] png_destroy_png_struct can change the state due to initial scan
[asyncify] png_read_data can change the state due to initial scan
[asyncify] png_handle_unknown can change the state due to initial scan
[asyncify] png_write_data can change the state due to initial scan
[asyncify] deflateEnd can change the state due to initial scan
[asyncify] deflateInit2_ can change the state due to initial scan
[asyncify] png_read_row can change the state due to initial scan
[asyncify] inflateInit2_.1 can change the state due to initial scan
[asyncify] inflateReset2 can change the state due to initial scan
[asyncify] inflateEnd.1 can change the state due to initial scan
[asyncify] deflate can change the state due to initial scan
[asyncify] jpeg_abort can change the state due to initial scan
[asyncify] jpeg_destroy can change the state due to initial scan
[asyncify] finish_input_pass can change the state due to initial scan
[asyncify] reset_input_controller can change the state due to initial scan
[asyncify] start_input_pass can change the state due to initial scan
[asyncify] inflate.1 can change the state due to initial scan
[asyncify] consume_markers can change the state due to initial scan
[asyncify] jpeg_resync_to_restart can change the state due to initial scan
[asyncify] next_marker can change the state due to initial scan
[asyncify] skip_variable can change the state due to initial scan
[asyncify] read_restart_marker can change the state due to initial scan
[asyncify] get_interesting_appn can change the state due to initial scan
[asyncify] get_sof can change the state due to initial scan
[asyncify] build_ycc_rgb_table can change the state due to initial scan
[asyncify] start_pass can change the state due to initial scan
[asyncify] read_markers can change the state due to initial scan
[asyncify] decode_mcu_DC_first can change the state due to initial scan
[asyncify] start_pass.1 can change the state due to initial scan
[asyncify] decode_mcu_AC_first can change the state due to initial scan
[asyncify] decode_mcu_AC_refine can change the state due to initial scan
[asyncify] process_restart can change the state due to initial scan
[asyncify] decode_mcu can change the state due to initial scan
[asyncify] arith_decode can change the state due to initial scan
[asyncify] start_pass_huff_decoder can change the state due to initial scan
[asyncify] decode_mcu_DC_refine.1 can change the state due to initial scan
[asyncify] decode_mcu_AC_first.1 can change the state due to initial scan
[asyncify] decode_mcu_DC_first.1 can change the state due to initial scan
[asyncify] jpeg_huff_decode can change the state due to initial scan
[asyncify] jpeg_fill_bit_buffer can change the state due to initial scan
[asyncify] decode_mcu_AC_refine.1 can change the state due to initial scan
[asyncify] jpeg_make_d_derived_tbl can change the state due to initial scan
[asyncify] start_output_pass can change the state due to initial scan
[asyncify] decode_mcu_sub can change the state due to initial scan
[asyncify] decompress_data can change the state due to initial scan
[asyncify] consume_data can change the state due to initial scan
[asyncify] decompress_onepass can change the state due to initial scan
[asyncify] decode_mcu.1 can change the state due to initial scan
[asyncify] decompress_smooth_data can change the state due to initial scan
[asyncify] start_pass_main can change the state due to initial scan
[asyncify] process_data_simple_main can change the state due to initial scan
[asyncify] process_data_context_main can change the state due to initial scan
[asyncify] process_data_crank_post can change the state due to initial scan
[asyncify] finish_output_pass can change the state due to initial scan
[asyncify] merged_2v_upsample can change the state due to initial scan
[asyncify] merged_1v_upsample can change the state due to initial scan
[asyncify] prepare_for_output_pass can change the state due to initial scan
[asyncify] post_process_1pass can change the state due to initial scan
[asyncify] start_pass_dpost can change the state due to initial scan
[asyncify] post_process_prepass can change the state due to initial scan
[asyncify] post_process_2pass can change the state due to initial scan
[asyncify] sep_upsample can change the state due to initial scan
[asyncify] output_message can change the state due to initial scan
[asyncify] emit_message can change the state due to initial scan
[asyncify] error_exit can change the state due to initial scan
[asyncify] free_pool can change the state due to initial scan
[asyncify] request_virt_barray can change the state due to initial scan
[asyncify] access_virt_barray can change the state due to initial scan
[asyncify] access_virt_sarray can change the state due to initial scan
[asyncify] request_virt_sarray can change the state due to initial scan
[asyncify] alloc_barray can change the state due to initial scan
[asyncify] jpeg_open_backing_store can change the state due to initial scan
[asyncify] new_color_map_1_quant can change the state due to initial scan
[asyncify] alloc_small can change the state due to initial scan
[asyncify] alloc_large can change the state due to initial scan
[asyncify] create_colorindex can change the state due to initial scan
[asyncify] start_pass_1_quant can change the state due to initial scan
[asyncify] alloc_sarray can change the state due to initial scan
[asyncify] init_error_limit can change the state due to initial scan
[asyncify] start_pass_2_quant can change the state due to initial scan
[asyncify] finish_pass1 can change the state due to initial scan
[asyncify] SDL_PromptAssertion can change the state due to initial scan
[asyncify] SDL_InitSubSystem can change the state due to initial scan
[asyncify] SDL_OpenedAudioDeviceDisconnected can change the state due to initial scan
[asyncify] SDL_AudioQuit can change the state due to initial scan
[asyncify] SDL_QuitSubSystem can change the state due to initial scan
[asyncify] close_audio_device can change the state due to initial scan
[asyncify] SDL_PauseAudio can change the state due to initial scan
[asyncify] SDL_RunAudio can change the state due to initial scan
[asyncify] SDL_CaptureAudio can change the state due to initial scan
[asyncify] SDL_ConvertStereoToMono can change the state due to initial scan
[asyncify] SDL_ConvertMonoToStereo can change the state due to initial scan
[asyncify] SDL_Convert_Byteswap can change the state due to initial scan
[asyncify] SDL_FreeAudioStream can change the state due to initial scan
[asyncify] SDL_AudioStreamPutInternal can change the state due to initial scan
[asyncify] SDL_AudioStreamClear can change the state due to initial scan
[asyncify] SDL_ConvertMonoTo21 can change the state due to initial scan
[asyncify] SDL_ConvertMonoToQuad can change the state due to initial scan
[asyncify] SDL_ConvertMonoTo41 can change the state due to initial scan
[asyncify] SDL_ConvertMonoTo51 can change the state due to initial scan
[asyncify] SDL_ConvertMonoTo61 can change the state due to initial scan
[asyncify] SDL_ConvertStereoTo21 can change the state due to initial scan
[asyncify] SDL_ConvertStereoToQuad can change the state due to initial scan
[asyncify] SDL_ConvertStereoTo41 can change the state due to initial scan
[asyncify] SDL_ConvertStereoTo51 can change the state due to initial scan
[asyncify] SDL_ConvertMonoTo71 can change the state due to initial scan
[asyncify] SDL_ConvertStereoTo61 can change the state due to initial scan
[asyncify] SDL_ConvertStereoTo71 can change the state due to initial scan
[asyncify] SDL_Convert21ToMono can change the state due to initial scan
[asyncify] open_audio_device can change the state due to initial scan
[asyncify] SDL_Convert21ToStereo can change the state due to initial scan
[asyncify] SDL_Convert21To41[asyncify] SDL_Convert21ToQuad can change the state due to initial scan
[asyncify] SDL_Convert21To71 can change the state due to initial scan
[asyncify] SDL_ConvertQuadToMono can change the state due to initial scan
[asyncify] SDL_Convert21To61[asyncify] [asyncify] SDL_ConvertQuadTo41 can change the state due to initial scan
[asyncify] SDL_ConvertQuadTo51 can change the state due to initial scan
[asyncify] SDL_ConvertQuadTo61[asyncify] SDL_ConvertQuadTo21 can change the state due to initial scan
[asyncify] SDL_Convert41ToStereo can change the state due to initial scan
[asyncify] SDL_Convert41To21[asyncify] SDL_Convert41ToQuad can change the state due to initial scan
[asyncify] SDL_ConvertQuadTo71 can change the state due to initial scan
[asyncify] SDL_Convert41ToMono can change the state due to initial scan
[asyncify] SDL_Convert41To51 can change the state due to initial scan
[asyncify] SDL_Convert41To61 can change the state due to initial scan
[asyncify] [asyncify] SDL_Convert41To71 can change the state due to initial scan
[asyncify] SDL_Convert51ToMono can change the state due to initial scan
[asyncify] SDL_Convert51ToStereo can change the state due to initial scan
[asyncify] SDL_Convert51ToQuad[asyncify] SDL_Convert51To21 can change the state due to initial scan
[asyncify] SDL_Convert51To71 can change the state due to initial scan
[asyncify] SDL_Convert61ToQuad can change the state due to initial scan
[asyncify] SDL_Convert61To41 can change the state due to initial scan
[asyncify] SDL_Convert61To51 can change the state due to initial scan
[asyncify] SDL_Convert51To61 can change the state due to initial scan
[asyncify] SDL_Convert61To71 can change the state due to initial scan
[asyncify] SDL_Convert21To51 can change the state due to initial scan
[asyncify] SDL_Convert61To21 can change the state due to initial scan
[asyncify] SDL_Convert71ToMono can change the state due to initial scan
[asyncify] SDL_Convert61ToMono can change the state due to initial scan
[asyncify] SDL_Convert71ToStereo can change the state due to initial scan
[asyncify] SDL_Convert61ToStereo can change the state due to initial scan
[asyncify] SDL_Convert71To51 can change the state due to initial scan
[asyncify] SDL_Convert71To41 can change the state due to initial scan
[asyncify] SDL_Convert71To21[asyncify] [asyncify] SDL_ResampleCVTSDL_Convert71ToQuad can change the state due to initial scan
[asyncify] SDL_Convert_U8_to_F32_Scalar can change the state due to initial scan
[asyncify] SDL_Convert_S16_to_F32_Scalar can change the state due to initial scan
[asyncify] [asyncify] SDL_Convert_S32_to_F32_Scalar can change the state due to initial scan
[asyncify] SDL_Convert_F32_to_S8_Scalar can change the state due to initial scan
[asyncify] SDL_Convert_S8_to_F32_Scalar can change the state due to initial scan
[asyncify] SDL_Convert_F32_to_U8_Scalar can change the state due to initial scan
[asyncify] SDL_Convert_F32_to_S16_Scalar can change the state due to initial scan
[asyncify] SDL_Convert_U16_to_F32_Scalar can change the state due to initial scan
[asyncify] SDL_Convert_F32_to_U16_Scalar can change the state due to initial scan
[asyncify] SDL_Convert_F32_to_S32_Scalar can change the state due to initial scan
[asyncify] DISKAUDIO_PlayDevice can change the state due to initial scan
[asyncify] HandleCaptureProcess can change the state due to initial scan
[asyncify] SDL_SetError can change the state due to initial scan
[asyncify] HandleAudioProcess can change the state due to initial scan
[asyncify] SDL_PumpEventsInternal can change the state due to initial scan
[asyncify] SDL_FilterEvents can change the state due to initial scan
[asyncify] SDL_EventState can change the state due to initial scan
[asyncify] SDL_FillRects can change the state due to initial scan
[asyncify] SDL_PushEvent can change the state due to initial scan
[asyncify] SDL_GameControllerAddMappingsFromRW can change the state due to initial scan
[asyncify] SDL_LoadVIDPIDListFromHint can change the state due to initial scan
[asyncify] SDL_PeepEventsInternal can change the state due to initial scan
[asyncify] SDL_PrivateGetControllerMapping can change the state due to initial scan
[asyncify] SDL_SetHint can change the state due to initial scan
[asyncify] SDL_NumJoysticks can change the state due to initial scan
[asyncify] SDL_JoystickClose can change the state due to initial scan
[asyncify] SDL_AddHintCallback can change the state due to initial scan
[asyncify] SDL_JoystickOpen can change the state due to initial scan
[asyncify] SDL_JoystickGetDeviceIndexFromInstanceID can change the state due to initial scan
[asyncify] SDL_JoystickUpdate can change the state due to initial scan
[asyncify] SDL_SetKeyboardFocus can change the state due to initial scan
[asyncify] SDL_malloc can change the state due to initial scan
[asyncify] SDL_free can change the state due to initial scan
[asyncify] SDL_realloc can change the state due to initial scan
[asyncify] SDL_calloc can change the state due to initial scan
[asyncify] SDL_LogMessageV can change the state due to initial scan
[asyncify] SDL_SetDefaultCursor can change the state due to initial scan
[asyncify] SDL_SetMouseFocus can change the state due to initial scan
[asyncify] SDL_UpdateMouseCapture can change the state due to initial scan
[asyncify] SDL_ShowCursor can change the state due to initial scan
[asyncify] SDL_MouseQuit can change the state due to initial scan
[asyncify] SDL_SetRelativeMouseMode can change the state due to initial scan
[asyncify] SDL_UpdateMouseFocus can change the state due to initial scan
[asyncify] SDL_WarpMouseInWindow can change the state due to initial scan
[asyncify] SDL_UnRLESurface can change the state due to initial scan
[asyncify] SDL_PrivateSendMouseMotion can change the state due to initial scan
[asyncify] SDL_RLESurface can change the state due to initial scan
[asyncify] SDL_SoftBlit can change the state due to initial scan
[asyncify] SDL_GetRendererOutputSize can change the state due to initial scan
[asyncify] SDL_CreateRenderer can change the state due to initial scan
[asyncify] QueueCmdSetViewport can change the state due to initial scan
[asyncify] SDL_SetRenderTarget can change the state due to initial scan
[asyncify] FlushRenderCommandsIfNotBatching can change the state due to initial scan
[asyncify] SDL_DestroyTexture can change the state due to initial scan
[asyncify] SDL_RendererEventWatch can change the state due to initial scan
[asyncify] SDL_UnlockTexture can change the state due to initial scan
[asyncify] FlushRenderCommandsIfTextureNeeded can change the state due to initial scan
[asyncify] SDL_LockTexture can change the state due to initial scan
[asyncify] SDL_CreateTexture can change the state due to initial scan
[asyncify] SDL_UpdateTexture can change the state due to initial scan
[asyncify] PrepQueueCmdDraw can change the state due to initial scan
[asyncify] GLES2_SetRenderTarget can change the state due to initial scan
[asyncify] GLES2_SetTextureScaleMode can change the state due to initial scan
[asyncify] GLES2_UpdateTextureNV can change the state due to initial scan
[asyncify] GLES2_UpdateTextureYUV can change the state due to initial scan
[asyncify] GLES2_WindowEvent can change the state due to initial scan
[asyncify] [asyncify] GLES2_BindTexture can change the state due to initial scan
[asyncify] GLES2_CreateRenderer can change the state due to initial scan
[asyncify] GLES2_DestroyTexture can change the state due to initial scan
[asyncify] GLES2_UpdateTexture can change the state due to initial scan
[asyncify] GLES2_DestroyRenderer can change the state due to initial scan
[asyncify] GLES2_CreateTexture can change the state due to initial scan
[asyncify] GLES2_RenderReadPixels can change the state due to initial scan
[asyncify] GLES2_RunCommandQueue can change the state due to initial scan
[asyncify] GLES2_TexSubImage2D can change the state due to initial scan
[asyncify] GLES2_CacheShader can change the state due to initial scan
[asyncify] SetDrawState can change the state due to initial scan
[asyncify] SW_RenderPresent can change the state due to initial scan
[asyncify] stdio_size can change the state due to initial scan
[asyncify] SDL_RWread can change the state due to initial scan
[asyncify] SDL_RWclose can change the state due to initial scan
[asyncify] SDL_SensorClose can change the state due to initial scan
[asyncify] SDL_SensorUpdate can change the state due to initial scan
[asyncify] SW_RunCommandQueue can change the state due to initial scan
[asyncify] SDL_UpperBlit can change the state due to initial scan
[asyncify] SDL_PrivateUpperBlitScaled can change the state due to initial scan
[asyncify] SDL_ConvertSurface can change the state due to initial scan
[asyncify] SDL_ConvertPixels can change the state due to initial scan
[asyncify] Emscripten_JoyStickConnected can change the state due to initial scan
[asyncify] SDL_Emscripten_TimerHelper can change the state due to initial scan
[asyncify] SDL_GetTouch can change the state due to initial scan
[asyncify] SDL_EGL_HasExtension can change the state due to initial scan
[asyncify] SDL_EGL_UnloadLibrary can change the state due to initial scan
[asyncify] SDL_EGL_MakeCurrent can change the state due to initial scan
[asyncify] SDL_EGL_PrivateChooseConfig can change the state due to initial scan
[asyncify] SDL_EGL_DeleteContext can change the state due to initial scan
[asyncify] SDL_EGL_SetSwapInterval can change the state due to initial scan
[asyncify] Emscripten_GLES_LoadLibrary can change the state due to initial scan
[asyncify] [asyncify] Emscripten_GLES_CreateContext can change the state due to initial scan
[asyncify] SDL_EGL_GetProcAddress can change the state due to initial scan
[asyncify] Emscripten_HandleWheel can change the state due to initial scan
[asyncify] Emscripten_DestroyWindow can change the state due to initial scan
[asyncify] SDL_DisableScreenSaver can change the state due to initial scan
[asyncify] SDL_VideoQuit can change the state due to initial scan
[asyncify] [asyncify] SDL_GetDisplayBounds can change the state due to initial scan
[asyncify] SDL_DestroyWindow can change the state due to initial scan
[asyncify] SDL_GetClosestDisplayModeForDisplay can change the state due to initial scan
[asyncify] SDL_SetDisplayModeForDisplay can change the state due to initial scan
[asyncify] SDL_SetWindowTitle[asyncify] SDL_GetWindowDisplayIndex can change the state due to initial scan
[asyncify] SDL_FinishWindowCreation can change the state due to initial scan
[asyncify] SDL_UpdateFullscreenMode can change the state due to initial scan
[asyncify] SDL_UpdateWindowGrab can change the state due to initial scan
[asyncify] SDL_GL_MakeCurrent[asyncify] SDL_MinimizeWindow can change the state due to initial scan
[asyncify] SDL_SetWindowMouseRect can change the state due to initial scan
[asyncify] SDL_GetWindowSurface can change the state due to initial scan
[asyncify] SDL_GL_GetProcAddress can change the state due to initial scan
[asyncify] SDL_EnableScreenSaver can change the state due to initial scan
[asyncify] SDL_GL_CreateContext can change the state due to initial scan
[asyncify] SDL_GL_SetSwapInterval can change the state due to initial scan
[asyncify] SDL_GL_GetSwapInterval can change the state due to initial scan
[asyncify] SDL_GL_DeleteContext can change the state due to initial scan
[asyncify] [asyncify] SDL_GL_SwapWindow can change the state due to initial scan
[asyncify] SDL_GL_GetAttribute can change the state due to initial scan
[asyncify] SDL_RecreateWindow can change the state due to initial scan
[asyncify] SDL_SendWindowEvent can change the state due to initial scan
[asyncify] SDL_CreateWindow can change the state due to initial scan
[asyncify] fclose can change the state due to initial scan
[asyncify] fflush can change the state due to initial scan
[asyncify] __overflow can change the state due to initial scan
[asyncify] fread can change the state due to initial scan
[asyncify] __toread can change the state due to initial scan
[asyncify] __fseeko_unlocked can change the state due to initial scan
[asyncify] __ftello_unlocked can change the state due to initial scan
[asyncify] __fwritex can change the state due to initial scan
[asyncify] wrapper_cmp can change the state due to initial scan
[asyncify] __shgetc can change the state due to initial scan
[asyncify] __vfprintf_internal can change the state due to initial scan
[asyncify] pop_arg can change the state due to initial scan
[asyncify] printf_core can change the state due to initial scan
[asyncify] operator\20new\28unsigned\20long\29 can change the state due to initial scan
[asyncify] __dynamic_cast can change the state due to initial scan
[asyncify] __cxxabiv1::__class_type_info::can_catch\28__cxxabiv1::__shim_type_info\20const*\2c\20void*&\29\20const can change the state due to initial scan
[asyncify] __cxxabiv1::__base_class_type_info::has_unambiguous_public_base\28__cxxabiv1::__dynamic_cast_info*\2c\20void*\2c\20int\29\20const can change the state due to initial scan
[asyncify] __cxxabiv1::__si_class_type_info::has_unambiguous_public_base\28__cxxabiv1::__dynamic_cast_info*\2c\20void*\2c\20int\29\20const can change the state due to initial scan
[asyncify] __cxxabiv1::__base_class_type_info::search_above_dst\28__cxxabiv1::__dynamic_cast_info*\2c\20void\20const*\2c\20void\20const*\2c\20int\2c\20bool\29\20const can change the state due to initial scan
[asyncify] __cxxabiv1::__base_class_type_info::search_below_dst\28__cxxabiv1::__dynamic_cast_info*\2c\20void\20const*\2c\20int\2c\20bool\29\20const can change the state due to initial scan
[asyncify] __cxxabiv1::__si_class_type_info::search_below_dst\28__cxxabiv1::__dynamic_cast_info*\2c\20void\20const*\2c\20int\2c\20bool\29\20const can change the state due to initial scan
[asyncify] __cxxabiv1::__si_class_type_info::search_above_dst\28__cxxabiv1::__dynamic_cast_info*\2c\20void\20const*\2c\20void\20const*\2c\20int\2c\20bool\29\20const can change the state due to initial scan
[asyncify] dynCall_vi[asyncify] [asyncify] dynCall_viii can change the state due to initial scan
[asyncify] dynCall_viiii can change the state due to initial scan
[asyncify] dynCall_viiiiiiiii can change the state due to initial scan
[asyncify] dynCall_iii can change the state due to initial scan
[asyncify] dynCall_iiii can change the state due to initial scan
[asyncify] dynCall_iiiii can change the state due to initial scan
[asyncify] dynCall_v can change the state due to initial scan
[asyncify] dynCall_fi can change the state due to initial scan
[asyncify] dynCall_viiiiiii can change the state due to initial scan
[asyncify] dynCall_viiiiii can change the state due to initial scan
[asyncify] dynCall_iiiiiii can change the state due to initial scan
[asyncify] dynCall_iiiiii can change the state due to initial scan
[asyncify] dynCall_iiiiiiii can change the state due to initial scan
[asyncify] dynCall_viffff can change the state due to initial scan
[asyncify] dynCall_viiiiiiii can change the state due to initial scan
[asyncify] dynCall_viiiiiiiiii can change the state due to initial scan
[asyncify] dynCall_viiiiiiiiiiii can change the state due to initial scan
[asyncify] dynCall_fif can change the state due to initial scan
[asyncify] dynCall_viiiiiiiiiii can change the state due to initial scan
[asyncify] dynCall_vif can change the state due to initial scan
[asyncify] dynCall_vifi can change the state due to initial scan
[asyncify] dynCall_iiiiiiiiii[asyncify] dynCall_iiiiiiiiiiiiiiff can change the state due to initial scan
[asyncify] dynCall_iiiiiiiii can change the state due to initial scan
[asyncify] dynCall_iiiiiidiiff can change the state due to initial scan
[asyncify] dynCall_i can change the state due to initial scan
[asyncify] dynCall_vf can change the state due to initial scan
[asyncify] dynCall_vff can change the state due to initial scan
[asyncify] dynCall_vfi can change the state due to initial scan
[asyncify] dynCall_viif can change the state due to initial scan
[asyncify] dynCall_viff can change the state due to initial scan
[asyncify] dynCall_vifff can change the state due to initial scan
[asyncify] dynCall_iidiiii can change the state due to initial scan
[asyncify] legalstub$dynCall_ji can change the state due to initial scan
[asyncify] legalstub$dynCall_iiji can change the state due to initial scan
[asyncify] legalstub$dynCall_jiji can change the state due to initial scan
[asyncify] byn$mgfn-shared$Audio::LimitingAudioStream::~LimitingAudioStream\28\29 can change the state due to initial scan
[asyncify] dynCall_viiiii can change the state due to initial scan
[asyncify] dynCall_vffff can change the state due to initial scan
[asyncify] byn$mgfn-shared$Common::Array<Common::FSNode>::freeStorage\28Common::FSNode*\2c\20unsigned\20int\29 can change the state due to initial scan
[asyncify] byn$mgfn-shared$Common::File::err\28\29\20const can change the state due to initial scan
[asyncify] byn$mgfn-shared$Common::File::clearErr\28\29 can change the state due to initial scan
[asyncify] [asyncify] byn$mgfn-shared$MT32Emu::AnalogImpl<int>::~AnalogImpl\28\29byn$mgfn-shared$NormalScaler::decreaseFactor\28\29 can change the state due to initial scan
[asyncify] [asyncify] byn$mgfn-shared$NormalScaler::increaseFactor\28\29 can change the state due to initial scan
[asyncify] byn$mgfn-shared$SdlEventSource::handleMouseButtonDown\28SDL_Event&\2c\20Common::Event&\29 can change the state due to initial scan
[asyncify] byn$mgfn-shared$StaticPlugin::~StaticPlugin\28\29 can change the state due to initial scan
[asyncify] png_create_png_struct can change the state due to invoke_iii
[asyncify] SDL_Delay can change the state due to emscripten_sleep
[asyncify] Emscripten_UpdateWindowFramebuffer can change the state due to emscripten_sleep
[asyncify] Common::QuickTimeParser::readELST\28Common::QuickTimeParser::Atom\29 can change the state due to Common::ReadStream::readByte\28\29
[asyncify] Common::QuickTimeParser::readMDHD\28Common::QuickTimeParser::Atom\29 can change the state due to Common::ReadStream::readByte\28\29
[asyncify] Common::QuickTimeParser::readSTCO\28Common::QuickTimeParser::Atom\29 can change the state due to Common::ReadStream::readByte\28\29
[asyncify] Common::QuickTimeParser::readSTSC\28Common::QuickTimeParser::Atom\29 can change the state due to Common::ReadStream::readByte\28\29
[asyncify] Common::QuickTimeParser::readSTSS\28Common::QuickTimeParser::Atom\29 can change the state due to Common::ReadStream::readByte\28\29
[asyncify] Common::QuickTimeParser::readSTSZ\28Common::QuickTimeParser::Atom\29 can change the state due to Common::ReadStream::readByte\28\29
[asyncify] Common::QuickTimeParser::readSTTS\28Common::QuickTimeParser::Atom\29 can change the state due to Common::ReadStream::readByte\28\29
[asyncify] Common::QuickTimeParser::readESDS\28Common::QuickTimeParser::Atom\29 can change the state due to Common::ReadStream::readByte\28\29
[asyncify] Common::readMP4Desc\28Common::SeekableReadStream*\2c\20unsigned\20char&\2c\20int&\29 can change the state due to Common::ReadStream::readByte\28\29
[asyncify] Gob::DataIO::unpackChunk\28Common::SeekableReadStream&\2c\20unsigned\20char*\2c\20unsigned\20int\29 can change the state due to Common::ReadStream::readByte\28\29
[asyncify] Gob::DataIO::openArchive\28Common::String\2c\20bool\29 can change the state due to Common::ReadStream::readByte\28\29
[asyncify] Common::Singleton<Common::MainTranslationManager>::instance\28\29 can change the state due to Common::ReadStream::readUint32BE\28\29
[asyncify] Common::WinResources::VersionInfo::readVSVersionInfo\28Common::SeekableReadStream*\29 can change the state due to Common::ReadStream::readUint16LE\28\29
[asyncify] Common::SharedPtr<Audio::RewindableAudioStream>::reset\28\29 can change the state due to Common::BasePtrTrackerInternal::decStrong\28\29
[asyncify] void\20Common::SharedPtr<AbstractFSNode>::reset<AbstractFSNode>\28Common::SharedPtr<AbstractFSNode>\20const&\29 can change the state due to Common::BasePtrTrackerInternal::decStrong\28\29
[asyncify] Common::SharedPtr<AbstractFSNode>::~SharedPtr\28\29 can change the state due to Common::BasePtrTrackerInternal::decStrong\28\29
[asyncify] Common::SharedArchiveContents::operator=\28Common::SharedArchiveContents&&\29 can change the state due to Common::BasePtrTrackerInternal::decWeak\28\29
[asyncify] Common::SharedArchiveContents::~SharedArchiveContents\28\29 can change the state due to Common::BasePtrTrackerInternal::decWeak\28\29
[asyncify] Scumm::detectLanguage\28Common::FSList\20const&\2c\20unsigned\20char\2c\20Common::Language\29 can change the state due to Scumm::searchFSNode\28Common::FSList\20const&\2c\20Common::String\20const&\2c\20Common::FSNode&\29
[asyncify] Scumm::ScummDiskImage::extractIndex\28Common::WriteStream*\29 can change the state due to Scumm::write_word\28Common::WriteStream*\2c\20unsigned\20short\29
[asyncify] Scumm::ScummDiskImage::extractResource\28Common::WriteStream*\2c\20int\29 can change the state due to Scumm::write_word\28Common::WriteStream*\2c\20unsigned\20short\29
[asyncify] Scumm::ScummNESFile::extractResource\28Common::WriteStream*\2c\20Scumm::ScummNESFile::Resource\20const*\2c\20Scumm::ScummNESFile::ResType\29 can change the state due to Scumm::write_word\28Common::WriteStream*\2c\20unsigned\20short\29
[asyncify] OSystem_SDL::~OSystem_SDL\28\29.1 can change the state due to OSystem_SDL::~OSystem_SDL\28\29
[asyncify] OSystem_POSIX::~OSystem_POSIX\28\29 can change the state due to OSystem_SDL::~OSystem_SDL\28\29
[asyncify] OSystem_Emscripten::~OSystem_Emscripten\28\29 can change the state due to OSystem_SDL::~OSystem_SDL\28\29
[asyncify] virtual\20thunk\20to\20OSystem_SDL::init\28\29 can change the state due to OSystem_SDL::init\28\29
[asyncify] OSystem_POSIX::init\28\29 can change the state due to OSystem_SDL::init\28\29
[asyncify] virtual\20thunk\20to\20OSystem_SDL::initBackend\28\29 can change the state due to OSystem_SDL::initBackend\28\29
[asyncify] OSystem_POSIX::initBackend\28\29 can change the state due to OSystem_SDL::initBackend\28\29
[asyncify] virtual\20thunk\20to\20OSystem_SDL::getGlobalKeymaps\28\29 can change the state due to OSystem_SDL::getGlobalKeymaps\28\29
[asyncify] virtual\20thunk\20to\20OSystem_SDL::getTextFromClipboard\28\29 can change the state due to OSystem_SDL::getTextFromClipboard\28\29
[asyncify] virtual\20thunk\20to\20OSystem_SDL::setTextInClipboard\28Common::U32String\20const&\29 can change the state due to OSystem_SDL::setTextInClipboard\28Common::U32String\20const&\29
[asyncify] non-virtual\20thunk\20to\20OSystem_SDL::getSupportedGraphicsModes\28\29\20const can change the state due to OSystem_SDL::getSupportedGraphicsModes\28\29\20const
[asyncify] virtual\20thunk\20to\20OSystem_SDL::getSupportedGraphicsModes\28\29\20const can change the state due to OSystem_SDL::getSupportedGraphicsModes\28\29\20const
[asyncify] non-virtual\20thunk\20to\20OSystem_SDL::getDefaultGraphicsMode\28\29\20const can change the state due to OSystem_SDL::getDefaultGraphicsMode\28\29\20const
[asyncify] virtual\20thunk\20to\20OSystem_SDL::getDefaultGraphicsMode\28\29\20const can change the state due to OSystem_SDL::getDefaultGraphicsMode\28\29\20const
[asyncify] non-virtual\20thunk\20to\20OSystem_SDL::setGraphicsMode\28int\2c\20unsigned\20int\29 can change the state due to OSystem_SDL::setGraphicsMode\28int\2c\20unsigned\20int\29
[asyncify] virtual\20thunk\20to\20OSystem_SDL::setGraphicsMode\28int\2c\20unsigned\20int\29 can change the state due to OSystem_SDL::setGraphicsMode\28int\2c\20unsigned\20int\29
[asyncify] non-virtual\20thunk\20to\20OSystem_SDL::getGraphicsMode\28\29\20const can change the state due to OSystem_SDL::getGraphicsMode\28\29\20const
[asyncify] virtual\20thunk\20to\20OSystem_SDL::getGraphicsMode\28\29\20const can change the state due to OSystem_SDL::getGraphicsMode\28\29\20const
[asyncify] SdlGraphicsManager::createOrUpdateWindow\28int\2c\20int\2c\20unsigned\20int\29 can change the state due to SdlWindow::createOrUpdateWindow\28int\2c\20int\2c\20unsigned\20int\29
[asyncify] Common::SearchSet::~SearchSet\28\29.1 can change the state due to Common::SearchSet::~SearchSet\28\29
[asyncify] Common::SearchManager::~SearchManager\28\29 can change the state due to Common::SearchSet::~SearchSet\28\29
[asyncify] Common::SearchManager::~SearchManager\28\29.1 can change the state due to Common::SearchSet::~SearchSet\28\29
[asyncify] non-virtual\20thunk\20to\20Common::SearchManager::~SearchManager\28\29 can change the state due to Common::SearchSet::~SearchSet\28\29
[asyncify] GUI::GuiManager::~GuiManager\28\29 can change the state due to Common::SearchSet::~SearchSet\28\29
[asyncify] Base::recAddGames\28Common::FSNode\20const&\2c\20Common::String\20const&\2c\20Common::String\20const&\2c\20bool\29 can change the state due to Base::getGameList\28Common::FSNode\20const&\29
[asyncify] Base::recListGames\28Common::FSNode\20const&\2c\20Common::String\20const&\2c\20Common::String\20const&\2c\20bool\29 can change the state due to Base::getGameList\28Common::FSNode\20const&\29
[asyncify] byn$mgfn-shared$AdvancedMetaEngine&\20Plugin::get<AdvancedMetaEngine>\28\29\20const can change the state due to Plugin::getName\28\29\20const
[asyncify] PluginManager::~PluginManager\28\29.1 can change the state due to PluginManager::~PluginManager\28\29
[asyncify] PluginManager::unloadAllPlugins\28\29 can change the state due to PluginManager::unloadPluginsExcept\28PluginType\2c\20Plugin\20const*\2c\20bool\29
[asyncify] Base::findGameMatchingName\28Common::String\20const&\29 can change the state due to EngineManager::findGamesMatching\28Common::String\20const&\2c\20Common::String\20const&\29\20const
[asyncify] GUI::generateEntries\28Common::HashMap<Common::String\2c\20Common::ConfigManager::Domain\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\2c\20Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\29 can change the state due to EngineManager::findTarget\28Common::String\20const&\2c\20Plugin\20const**\29\20const
[asyncify] SurfaceSdlGraphicsManager::getDefaultScaler\28\29\20const can change the state due to ScalerManager::findScalerPluginIndex\28char\20const*\29\20const
[asyncify] MohawkMetaEngineDetection::toDetectedGame\28ADDetectedGame\20const&\2c\20ADDetectedGameExtraInfo*\29\20const can change the state due to AdvancedMetaEngineDetection::toDetectedGame\28ADDetectedGame\20const&\2c\20ADDetectedGameExtraInfo*\29\20const
[asyncify] AdvancedMetaEngineDetection::detectGameFilebased\28Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\2c\20ADFileBasedFallback\20const*\29\20const can change the state due to AdvancedMetaEngineDetection::getFileProperties\28Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\2c\20ADGameDescription\20const&\2c\20Common::String\20const&\2c\20FileProperties&\29\20const
[asyncify] MainMenuDialog::~MainMenuDialog\28\29.1 can change the state due to MainMenuDialog::~MainMenuDialog\28\29
[asyncify] GUI::GuiObject::resize\28int\2c\20int\2c\20int\2c\20int\2c\20bool\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::GuiObject::reflowLayout\28\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::GlobalOptionsDialog::handleCommand\28GUI::CommandSender*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::SaveLoadChooserGrid::handleMouseWheel\28int\2c\20int\2c\20int\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::ThemeBrowser::open\28\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::Tooltip::drawDialog\28GUI::DrawLayer\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::Widget::setEnabled\28bool\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::StaticTextWidget::StaticTextWidget\28GUI::GuiObject*\2c\20int\2c\20int\2c\20int\2c\20int\2c\20Common::U32String\20const&\2c\20Graphics::TextAlign\2c\20Common::U32String\20const&\2c\20GUI::ThemeEngine::FontStyle\2c\20Common::Language\2c\20bool\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::StaticTextWidget::StaticTextWidget\28GUI::GuiObject*\2c\20Common::String\20const&\2c\20Common::U32String\20const&\2c\20Common::U32String\20const&\2c\20GUI::ThemeEngine::FontStyle\2c\20Common::Language\2c\20bool\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::StaticTextWidget::drawWidget\28\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::ButtonWidget::drawWidget\28\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::addClearButton\28GUI::GuiObject*\2c\20Common::String\20const&\2c\20unsigned\20int\2c\20int\2c\20int\2c\20int\2c\20int\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::PicButtonWidget::setGfxFromTheme\28char\20const*\2c\20int\2c\20bool\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::DropdownButtonWidget::reset\28\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::DropdownButtonWidget::drawWidget\28\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::PicButtonWidget::drawWidget\28\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::CheckboxWidget::CheckboxWidget\28GUI::GuiObject*\2c\20Common::String\20const&\2c\20Common::U32String\20const&\2c\20Common::U32String\20const&\2c\20unsigned\20int\2c\20unsigned\20char\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::CheckboxWidget::drawWidget\28\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::RadiobuttonWidget::RadiobuttonWidget\28GUI::GuiObject*\2c\20Common::String\20const&\2c\20GUI::RadiobuttonGroup*\2c\20int\2c\20Common::U32String\20const&\2c\20Common::U32String\20const&\2c\20unsigned\20char\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::RadiobuttonWidget::drawWidget\28\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::SliderWidget::drawWidget\28\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::GraphicsWidget::setGfxFromTheme\28char\20const*\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::GraphicsWidget::drawWidget\28\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::ContainerWidget::drawWidget\28\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::EditableWidget::EditableWidget\28GUI::GuiObject*\2c\20Common::String\20const&\2c\20Common::U32String\20const&\2c\20unsigned\20int\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::EditableWidget::getCaretOffset\28\29\20const can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::EditTextWidget::reflowLayout\28\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::GridItemWidget::drawWidget\28\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::GridWidget::calcEntrySizes\28\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::GridWidget::scrollBarRecalc\28\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::ListWidget::findItem\28int\2c\20int\29\20const can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::ListWidget::drawFormattedText\28Common::Rect\20const&\2c\20Common::U32String\20const&\2c\20GUI::ThemeEngine::State\2c\20Graphics::TextAlign\2c\20GUI::ThemeEngine::TextInversionState\2c\20int\2c\20bool\2c\20GUI::ThemeEngine::FontColor\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::ListWidget::getCaretOffset\28\29\20const can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::PopUpWidget::reflowLayout\28\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::PopUpWidget::drawWidget\28\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::ScrollBarWidget::drawWidget\28\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::TabWidget::recalc\28\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::TabWidget::TabWidget\28GUI::GuiObject*\2c\20Common::String\20const&\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::TabWidget::addTab\28Common::U32String\20const&\2c\20Common::String\20const&\2c\20bool\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::TabWidget::drawWidget\28\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::AboutDialog::addLine\28Common::U32String\20const&\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::ConsoleDialog::print\28char\20const*\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::ConsoleDialog::reflowLayout\28\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::ConsoleDialog::scrollToCurrent\28\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::ConsoleDialog::historyScroll\28int\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::ConsoleDialog::handleCommand\28GUI::CommandSender*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::Dialog::Dialog\28int\2c\20int\2c\20int\2c\20int\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::Dialog::Dialog\28Common::String\20const&\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::LauncherDialog::createSwitchButton\28Common::String\20const&\2c\20Common::U32String\20const&\2c\20Common::U32String\20const&\2c\20char\20const*\2c\20unsigned\20int\29 can change the state due to Common::Singleton<GUI::GuiManager>::instance\28\29
[asyncify] GUI::Debugger::preEnter\28\29 can change the state due to Engine::pauseEngine\28\29
[asyncify] PauseToken::~PauseToken\28\29 can change the state due to Engine::resumeEngine\28\29
[asyncify] GUI::Debugger::postEnter\28\29 can change the state due to Engine::resumeEngine\28\29
[asyncify] SaveStateDescriptor::SaveStateDescriptor\28MetaEngine\20const*\2c\20int\2c\20Common::String\20const&\29 can change the state due to SaveStateDescriptor::initSaveType\28MetaEngine\20const*\29
[asyncify] GUI::ConsoleDialog::~ConsoleDialog\28\29.1 can change the state due to GUI::ConsoleDialog::~ConsoleDialog\28\29
[asyncify] GUI::ConsoleDialog::drawDialog\28GUI::DrawLayer\29 can change the state due to GUI::ConsoleDialog::drawLine\28int\29
[asyncify] GUI::Debugger::debuggerInputCallback\28GUI::ConsoleDialog*\2c\20char\20const*\2c\20void*\29 can change the state due to GUI::Debugger::parseCommand\28char\20const*\29
[asyncify] GUI::Debugger::cmdExecFile\28int\2c\20char\20const**\29 can change the state due to GUI::Debugger::parseCommand\28char\20const*\29
[asyncify] GUI::Debugger::~Debugger\28\29.1 can change the state due to GUI::Debugger::~Debugger\28\29
[asyncify] byn$mgfn-shared$MT32Emu::ScummVMReportHandler::onErrorControlROM\28\29 can change the state due to GUI::Dialog::runModal\28\29
[asyncify] AdvancedMetaEngineDetection::cleanupPirated\28Common::Array<ADDetectedGame>&\29\20const can change the state due to GUI::Dialog::runModal\28\29
[asyncify] GUI::BrowserDialog::runModal\28\29 can change the state due to GUI::Dialog::runModal\28\29
[asyncify] GUI::displayErrorDialog\28Common::U32String\20const&\29 can change the state due to GUI::Dialog::runModal\28\29
[asyncify] GUI::SaveLoadChooserDialog::open\28\29 can change the state due to GUI::Dialog::open\28\29
[asyncify] GUI::SavenameDialog::open\28\29 can change the state due to GUI::Dialog::open\28\29
[asyncify] GUI::BrowserDialog::open\28\29 can change the state due to GUI::Dialog::open\28\29
[asyncify] GUI::SaveLoadChooserSimple::close\28\29 can change the state due to GUI::Dialog::close\28\29
[asyncify] GUI::SaveLoadChooserGrid::close\28\29 can change the state due to GUI::Dialog::close\28\29
[asyncify] GUI::AboutDialog::close\28\29 can change the state due to GUI::Dialog::close\28\29
[asyncify] GUI::UnknownGameDialog::reflowLayout\28\29 can change the state due to GUI::Dialog::reflowLayout\28\29
[asyncify] GUI::LauncherDialog::handleKeyDown\28Common::KeyState\29 can change the state due to GUI::Dialog::handleKeyDown\28Common::KeyState\29
[asyncify] GUI::SaveLoadChooserDialog::handleTickle\28\29 can change the state due to GUI::Dialog::handleTickle\28\29
[asyncify] GUI::GuiManager::displayTopDialogOnly\28bool\29 can change the state due to GUI::GuiManager::redrawFull\28\29
[asyncify] GUI::LauncherDialog::handleOtherEvent\28Common::Event\20const&\29 can change the state due to GUI::LauncherDialog::doGameDetection\28Common::String\20const&\29
[asyncify] GUI::LauncherSimple::~LauncherSimple\28\29 can change the state due to GUI::LauncherDialog::~LauncherDialog\28\29.1
[asyncify] GUI::MessageDialog::MessageDialog\28Common::U32String\20const&\2c\20Common::U32String\20const&\2c\20Common::U32String\20const&\2c\20Graphics::TextAlign\2c\20char\20const*\2c\20Common::U32String\20const&\29 can change the state due to GUI::MessageDialog::init\28Common::U32String\20const&\2c\20Common::U32String\20const&\2c\20Common::Array<Common::U32String>\20const&\2c\20Graphics::TextAlign\2c\20char\20const*\2c\20Common::U32String\20const&\29
[asyncify] GUI::MessageDialog::MessageDialog\28Common::String\20const&\2c\20Common::String\20const&\2c\20Common::String\20const&\2c\20Graphics::TextAlign\2c\20char\20const*\29 can change the state due to GUI::MessageDialog::init\28Common::U32String\20const&\2c\20Common::U32String\20const&\2c\20Common::Array<Common::U32String>\20const&\2c\20Graphics::TextAlign\2c\20char\20const*\2c\20Common::U32String\20const&\29
[asyncify] GUI::MessageDialog::MessageDialog\28Common::U32String\20const&\2c\20Common::U32String\20const&\2c\20Common::Array<Common::U32String>\20const&\2c\20Graphics::TextAlign\29 can change the state due to GUI::MessageDialog::init\28Common::U32String\20const&\2c\20Common::U32String\20const&\2c\20Common::Array<Common::U32String>\20const&\2c\20Graphics::TextAlign\2c\20char\20const*\2c\20Common::U32String\20const&\29
[asyncify] GUI::SaveLoadChooserDialog::~SaveLoadChooserDialog\28\29.1 can change the state due to GUI::GuiObject::~GuiObject\28\29
[asyncify] GUI::Tooltip::~Tooltip\28\29 can change the state due to GUI::GuiObject::~GuiObject\28\29
[asyncify] GUI::PopUpDialog::~PopUpDialog\28\29 can change the state due to GUI::GuiObject::~GuiObject\28\29
[asyncify] GUI::GridItemTray::~GridItemTray\28\29 can change the state due to GUI::GuiObject::~GuiObject\28\29
[asyncify] non-virtual\20thunk\20to\20GUI::GridItemTray::~GridItemTray\28\29 can change the state due to GUI::GuiObject::~GuiObject\28\29
[asyncify] GUI::ThemeBrowser::~ThemeBrowser\28\29 can change the state due to GUI::GuiObject::~GuiObject\28\29
[asyncify] GUI::AboutDialog::~AboutDialog\28\29 can change the state due to GUI::GuiObject::~GuiObject\28\29
[asyncify] GUI::Dialog::~Dialog\28\29 can change the state due to GUI::GuiObject::~GuiObject\28\29
[asyncify] GUI::BrowserDialog::~BrowserDialog\28\29 can change the state due to GUI::GuiObject::~GuiObject\28\29
[asyncify] GUI::UnknownGameDialog::~UnknownGameDialog\28\29 can change the state due to GUI::GuiObject::~GuiObject\28\29
[asyncify] GUI::MassAddDialog::~MassAddDialog\28\29 can change the state due to GUI::GuiObject::~GuiObject\28\29
[asyncify] GUI::CountdownMessageDialog::~CountdownMessageDialog\28\29 can change the state due to GUI::GuiObject::~GuiObject\28\29
[asyncify] GUI::OptionsDialog::OptionsDialog\28Common::String\20const&\2c\20Common::String\20const&\29 can change the state due to GUI::OptionsDialog::init\28\29
[asyncify] GUI::GlobalOptionsDialog::~GlobalOptionsDialog\28\29 can change the state due to GUI::OptionsDialog::~OptionsDialog\28\29
[asyncify] GUI::ConfigDialog::~ConfigDialog\28\29 can change the state due to GUI::OptionsDialog::~OptionsDialog\28\29
[asyncify] GUI::ConfigDialog::~ConfigDialog\28\29.1 can change the state due to GUI::OptionsDialog::~OptionsDialog\28\29
[asyncify] GUI::EditGameDialog::~EditGameDialog\28\29 can change the state due to GUI::OptionsDialog::~OptionsDialog\28\29
[asyncify] GUI::GlobalOptionsDialog::clean\28\29 can change the state due to GUI::OptionsDialog::clean\28\29
[asyncify] GUI::GlobalOptionsDialog::close\28\29 can change the state due to GUI::OptionsDialog::close\28\29
[asyncify] GUI::GlobalOptionsDialog::handleTickle\28\29 can change the state due to GUI::OptionsDialog::handleTickle\28\29
[asyncify] GUI::EditGameDialog::setupGraphicsTab\28\29 can change the state due to GUI::OptionsDialog::setupGraphicsTab\28\29
[asyncify] GUI::SaveLoadChooser::runModalWithCurrentTarget\28\29 can change the state due to GUI::SaveLoadChooser::runModalWithMetaEngineAndTarget\28MetaEngine\20const*\2c\20Common::String\20const&\29
[asyncify] GUI::SaveLoadChooserDialog::SaveLoadChooserDialog\28Common::String\20const&\2c\20bool\29 can change the state due to GUI::SaveLoadChooserDialog::addChooserButtons\28\29
[asyncify] GUI::SaveLoadChooserGrid::~SaveLoadChooserGrid\28\29.1 can change the state due to GUI::SaveLoadChooserGrid::~SaveLoadChooserGrid\28\29
[asyncify] GUI::ThemeEngine::drawCaret\28Common::Rect\20const&\2c\20bool\29 can change the state due to GUI::ThemeEngine::restoreBackground\28Common::Rect\29
[asyncify] GUI::ThemeParser::parserCallback_language\28Common::XMLParser::ParserNode*\29 can change the state due to GUI::ThemeEngine::addFont\28GUI::TextData\2c\20Common::String\20const&\2c\20Common::String\20const&\2c\20Common::String\20const&\2c\20int\29
[asyncify] GUI::ThemeEngine::drawButton\28Common::Rect\20const&\2c\20Common::U32String\20const&\2c\20GUI::ThemeEngine::State\2c\20unsigned\20short\29 can change the state due to GUI::ThemeEngine::drawDD\28GUI::DrawData\2c\20Common::Rect\20const&\2c\20unsigned\20int\2c\20bool\29
[asyncify] GUI::ThemeEngine::drawWidgetBackground\28Common::Rect\20const&\2c\20GUI::ThemeEngine::WidgetBackground\29 can change the state due to GUI::ThemeEngine::drawDD\28GUI::DrawData\2c\20Common::Rect\20const&\2c\20unsigned\20int\2c\20bool\29
[asyncify] GUI::ThemeEngine::drawDialogBackground\28Common::Rect\20const&\2c\20GUI::ThemeEngine::DialogBackground\29 can change the state due to GUI::ThemeEngine::drawDD\28GUI::DrawData\2c\20Common::Rect\20const&\2c\20unsigned\20int\2c\20bool\29
[asyncify] GUI::ThemeEngine::drawText\28Common::Rect\20const&\2c\20Common::U32String\20const&\2c\20GUI::ThemeEngine::State\2c\20Graphics::TextAlign\2c\20GUI::ThemeEngine::TextInversionState\2c\20int\2c\20bool\2c\20GUI::ThemeEngine::FontStyle\2c\20GUI::ThemeEngine::FontColor\2c\20bool\2c\20Common::Rect\20const&\29 can change the state due to GUI::ThemeEngine::drawDD\28GUI::DrawData\2c\20Common::Rect\20const&\2c\20unsigned\20int\2c\20bool\29
[asyncify] GUI::GuiManager::getFontHeight\28GUI::ThemeEngine::FontStyle\29\20const can change the state due to GUI::ThemeEngine::getFontHeight\28GUI::ThemeEngine::FontStyle\29\20const
[asyncify] Graphics::circleColorNoblend\28Graphics::ManagedSurface*\2c\20double\2c\20double\2c\20double\2c\20int\2c\20bool\29 can change the state due to Graphics::ManagedSurface::vLine\28int\2c\20int\2c\20int\2c\20unsigned\20int\29
[asyncify] GUI::ThemeEngine::unloadTheme\28\29 can change the state due to GUI::ThemeEval::reset\28\29
[asyncify] GUI::ThemeEval::getWidgetData\28Common::String\20const&\2c\20short&\2c\20short&\2c\20short&\2c\20short&\29 can change the state due to GUI::ThemeEval::getWidgetData\28Common::String\20const&\2c\20short&\2c\20short&\2c\20short&\2c\20short&\2c\20bool&\29
[asyncify] GUI::ThemeLayoutWidget::~ThemeLayoutWidget\28\29 can change the state due to GUI::ThemeLayout::~ThemeLayout\28\29
[asyncify] GUI::ThemeLayoutStacked::~ThemeLayoutStacked\28\29 can change the state due to GUI::ThemeLayout::~ThemeLayout\28\29
[asyncify] GUI::ThemeLayoutMain::~ThemeLayoutMain\28\29 can change the state due to GUI::ThemeLayout::~ThemeLayout\28\29
[asyncify] GUI::ThemeLayoutMain::resetLayout\28\29 can change the state due to GUI::ThemeLayout::resetLayout\28\29
[asyncify] GUI::ThemeLayoutWidget::isBound\28GUI::Widget*\29\20const can change the state due to GUI::ThemeLayoutWidget::getWidget\28GUI::Widget*\29\20const
[asyncify] GUI::Widget::Widget\28GUI::GuiObject*\2c\20int\2c\20int\2c\20int\2c\20int\2c\20Common::U32String\20const&\29 can change the state due to GUI::Widget::init\28\29
[asyncify] GUI::Widget::Widget\28GUI::GuiObject*\2c\20Common::String\20const&\2c\20Common::U32String\20const&\29 can change the state due to GUI::Widget::init\28\29
[asyncify] GUI::GraphicsWidget::~GraphicsWidget\28\29 can change the state due to GUI::Widget::~Widget\28\29
[asyncify] GUI::OptionsContainerWidget::~OptionsContainerWidget\28\29 can change the state due to GUI::Widget::~Widget\28\29
[asyncify] GUI::StaticTextWidget::~StaticTextWidget\28\29 can change the state due to GUI::Widget::~Widget\28\29
[asyncify] GUI::SliderWidget::~SliderWidget\28\29 can change the state due to GUI::Widget::~Widget\28\29
[asyncify] GUI::SliderWidget::~SliderWidget\28\29.1 can change the state due to GUI::Widget::~Widget\28\29
[asyncify] non-virtual\20thunk\20to\20GUI::SliderWidget::~SliderWidget\28\29 can change the state due to GUI::Widget::~Widget\28\29
[asyncify] GUI::EditableWidget::~EditableWidget\28\29 can change the state due to GUI::Widget::~Widget\28\29
[asyncify] GUI::PopUpWidget::~PopUpWidget\28\29 can change the state due to GUI::Widget::~Widget\28\29
[asyncify] GUI::ScrollContainerWidget::~ScrollContainerWidget\28\29 can change the state due to GUI::Widget::~Widget\28\29
[asyncify] GUI::ContainerWidget::findWidget\28int\2c\20int\29 can change the state due to GUI::Widget::findWidgetInChain\28GUI::Widget*\2c\20int\2c\20int\29
[asyncify] GUI::TabWidget::findWidget\28int\2c\20int\29 can change the state due to GUI::Widget::findWidgetInChain\28GUI::Widget*\2c\20int\2c\20int\29
[asyncify] GUI::Dialog::findWidget\28int\2c\20int\29 can change the state due to GUI::Widget::findWidgetInChain\28GUI::Widget*\2c\20int\2c\20int\29
[asyncify] GUI::ContainerWidget::containsWidget\28GUI::Widget*\29\20const can change the state due to GUI::Widget::containsWidgetInChain\28GUI::Widget*\2c\20GUI::Widget*\29
[asyncify] GUI::StaticTextWidget::readLabel\28\29 can change the state due to GUI::Widget::read\28Common::U32String\20const&\29
[asyncify] GUI::ListWidget::handleMouseMoved\28int\2c\20int\2c\20int\29 can change the state due to GUI::Widget::read\28Common::U32String\20const&\29
[asyncify] GUI::PopUpDialog::handleMouseMoved\28int\2c\20int\2c\20int\29 can change the state due to GUI::Widget::read\28Common::U32String\20const&\29
[asyncify] GUI::TabWidget::handleMouseMoved\28int\2c\20int\2c\20int\29 can change the state due to GUI::Widget::read\28Common::U32String\20const&\29
[asyncify] GUI::GlobalOptionsDialog::build\28\29::$_0::operator\28\29\28GUI::StaticTextWidget*\2c\20Common::String\20const&\2c\20Common::U32String\20const&\29\20const can change the state due to GUI::StaticTextWidget::setLabel\28Common::U32String\20const&\29
[asyncify] GUI::ButtonWidget::setLabel\28Common::U32String\20const&\29 can change the state due to GUI::StaticTextWidget::setLabel\28Common::U32String\20const&\29
[asyncify] Common::RemapWidget::refreshKeymap\28\29 can change the state due to GUI::StaticTextWidget::setLabel\28Common::U32String\20const&\29
[asyncify] GUI::DropdownButtonWidget::getMinSize\28int&\2c\20int&\29 can change the state due to GUI::ButtonWidget::getMinSize\28int&\2c\20int&\29
[asyncify] GUI::CheckboxWidget::handleMouseUp\28int\2c\20int\2c\20int\2c\20int\29 can change the state due to GUI::ButtonWidget::setUnpressedState\28\29
[asyncify] GUI::RadiobuttonWidget::handleMouseUp\28int\2c\20int\2c\20int\2c\20int\29 can change the state due to GUI::ButtonWidget::setUnpressedState\28\29
[asyncify] GUI::SaveLoadChooserGrid::hideButtons\28\29 can change the state due to GUI::PicButtonWidget::setGfx\28Graphics::ManagedSurface\20const*\2c\20int\2c\20bool\29
[asyncify] non-virtual\20thunk\20to\20GUI::PicButtonWidget::~PicButtonWidget\28\29 can change the state due to GUI::PicButtonWidget::~PicButtonWidget\28\29
[asyncify] GUI::PicButtonWidget::~PicButtonWidget\28\29.1 can change the state due to GUI::PicButtonWidget::~PicButtonWidget\28\29
[asyncify] Graphics::boxColor\28Graphics::ManagedSurface*\2c\20int\2c\20int\2c\20int\2c\20int\2c\20int\29 can change the state due to Graphics::ManagedSurface::fillRect\28Common::Rect\2c\20unsigned\20int\29
[asyncify] GUI::ContainerWidget::~ContainerWidget\28\29.1 can change the state due to GUI::ContainerWidget::~ContainerWidget\28\29
[asyncify] GUI::GridWidget::~GridWidget\28\29 can change the state due to GUI::ContainerWidget::~ContainerWidget\28\29
[asyncify] GUI::GridItemWidget::~GridItemWidget\28\29 can change the state due to GUI::ContainerWidget::~ContainerWidget\28\29
[asyncify] GUI::EditTextWidget::setEditString\28Common::U32String\20const&\29 can change the state due to GUI::EditableWidget::setEditString\28Common::U32String\20const&\29
[asyncify] GUI::EditableWidget::setCaretPos\28int\29 can change the state due to GUI::EditableWidget::adjustOffset\28\29
[asyncify] GUI::GridWidget::setFilter\28Common::U32String\20const&\29 can change the state due to GUI::GridWidget::sortGroups\28\29
[asyncify] GUI::GridWidget::setSelected\28int\29 can change the state due to GUI::GridWidget::scrollToEntry\28int\2c\20bool\29
[asyncify] GUI::GroupedListWidget::groupByAttribute\28\29 can change the state due to GUI::GroupedListWidget::sortGroups\28\29
[asyncify] GUI::LauncherSimple::selectTarget\28Common::String\20const&\29 can change the state due to GUI::GroupedListWidget::setSelected\28int\29
[asyncify] GUI::PopUpDialog::setSelection\28int\29 can change the state due to GUI::PopUpDialog::drawMenuEntry\28int\2c\20bool\29
[asyncify] GUI::ScrollBarWidget::handleMouseWheel\28int\2c\20int\2c\20int\29 can change the state due to GUI::ScrollBarWidget::checkBounds\28int\29
[asyncify] GUI::ScrollContainerWidget::ScrollContainerWidget\28GUI::GuiObject*\2c\20Common::String\20const&\2c\20Common::String\20const&\2c\20unsigned\20int\29 can change the state due to GUI::ScrollContainerWidget::recalc\28\29
[asyncify] GUI::TabWidget::~TabWidget\28\29.1 can change the state due to GUI::TabWidget::~TabWidget\28\29
[asyncify] GUI::TabWidget::handleMouseDown\28int\2c\20int\2c\20int\2c\20int\29 can change the state due to GUI::TabWidget::setActiveTab\28int\29
[asyncify] GUI::TabWidget::adjustTabs\28int\29 can change the state due to GUI::TabWidget::setActiveTab\28int\29
[asyncify] OSystem_SDL::hasFeature\28OSystem::Feature\29 can change the state due to ModularGraphicsBackend::hasFeature\28OSystem::Feature\29
[asyncify] OSystem_Emscripten::setFeatureState\28OSystem::Feature\2c\20bool\29 can change the state due to ModularGraphicsBackend::setFeatureState\28OSystem::Feature\2c\20bool\29
[asyncify] OSystem_Emscripten::getFeatureState\28OSystem::Feature\29 can change the state due to ModularGraphicsBackend::getFeatureState\28OSystem::Feature\29
[asyncify] virtual\20thunk\20to\20ModularGraphicsBackend::warpMouse\28int\2c\20int\29 can change the state due to ModularGraphicsBackend::warpMouse\28int\2c\20int\29
[asyncify] virtual\20thunk\20to\20ModularMixerBackend::getMixer\28\29 can change the state due to ModularMixerBackend::getMixer\28\29
[asyncify] BaseBackend::initBackend\28\29 can change the state due to DefaultAudioCDManager::DefaultAudioCDManager\28\29
[asyncify] OSystem_SDL::createAudioCDManager\28\29 can change the state due to DefaultAudioCDManager::DefaultAudioCDManager\28\29
[asyncify] DefaultAudioCDManager::~DefaultAudioCDManager\28\29 can change the state due to DefaultAudioCDManager::stop\28\29
[asyncify] non-virtual\20thunk\20to\20DefaultEventManager::~DefaultEventManager\28\29 can change the state due to DefaultEventManager::~DefaultEventManager\28\29
[asyncify] DefaultEventManager::~DefaultEventManager\28\29.1 can change the state due to DefaultEventManager::~DefaultEventManager\28\29
[asyncify] Common::CompositeHardwareInputSet::~CompositeHardwareInputSet\28\29.1 can change the state due to Common::CompositeHardwareInputSet::~CompositeHardwareInputSet\28\29
[asyncify] Common::Keymap::resetMapping\28Common::Action*\29 can change the state due to Common::Keymap::registerMappings\28Common::Action*\2c\20Common::Array<Common::String>\20const&\29
[asyncify] Common::Keymapper::reloadKeymapMappings\28Common::Keymap*\29 can change the state due to Common::Keymap::registerMappings\28Common::Action*\2c\20Common::Array<Common::String>\20const&\29
[asyncify] Common::Keymapper::~Keymapper\28\29 can change the state due to Common::Keymapper::clear\28\29
[asyncify] Common::RemapWidget::~RemapWidget\28\29.1 can change the state due to Common::RemapWidget::~RemapWidget\28\29
[asyncify] Common::RemapWidget::load\28\29 can change the state due to Common::RemapWidget::reflowActionWidgets\28\29
[asyncify] Common::RemapWidget::handleMouseDown\28int\2c\20int\2c\20int\2c\20int\29 can change the state due to Common::RemapWidget::stopRemapping\28\29
[asyncify] OSystem_SDL::logMessage\28LogMessageType::Type\2c\20char\20const*\29 can change the state due to Backends::Log::Log::print\28char\20const*\2c\20bool\29
[asyncify] Common::OutSaveFile::~OutSaveFile\28\29.2 can change the state due to Common::OutSaveFile::~OutSaveFile\28\29.1
[asyncify] SdlEventSource::handleJoystickAdded\28SDL_JoyDeviceEvent\20const&\2c\20Common::Event&\29 can change the state due to SdlEventSource::openJoystick\28int\29
[asyncify] virtual\20thunk\20to\20SdlGraphicsManager::showMouse\28bool\29 can change the state due to SdlGraphicsManager::showMouse\28bool\29
[asyncify] virtual\20thunk\20to\20SdlGraphicsManager::saveScreenshot\28\29 can change the state due to SdlGraphicsManager::saveScreenshot\28\29
[asyncify] virtual\20thunk\20to\20WindowedGraphicsManager::setShakePos\28int\2c\20int\29 can change the state due to WindowedGraphicsManager::setShakePos\28int\2c\20int\29
[asyncify] virtual\20thunk\20to\20WindowedGraphicsManager::showOverlay\28bool\29 can change the state due to WindowedGraphicsManager::showOverlay\28bool\29
[asyncify] virtual\20thunk\20to\20WindowedGraphicsManager::hideOverlay\28\29 can change the state due to WindowedGraphicsManager::hideOverlay\28\29
[asyncify] OpenGLSdlGraphics3dManager::hideOverlay\28\29 can change the state due to WindowedGraphicsManager::hideOverlay\28\29
[asyncify] virtual\20thunk\20to\20WindowedGraphicsManager::warpMouse\28int\2c\20int\29 can change the state due to WindowedGraphicsManager::warpMouse\28int\2c\20int\29
[asyncify] SurfaceSdlGraphicsManager::~SurfaceSdlGraphicsManager\28\29.1 can change the state due to SurfaceSdlGraphicsManager::~SurfaceSdlGraphicsManager\28\29
[asyncify] virtual\20thunk\20to\20SurfaceSdlGraphicsManager::~SurfaceSdlGraphicsManager\28\29 can change the state due to SurfaceSdlGraphicsManager::~SurfaceSdlGraphicsManager\28\29
[asyncify] SurfaceSdlGraphicsManager::~SurfaceSdlGraphicsManager\28\29.2 can change the state due to SurfaceSdlGraphicsManager::~SurfaceSdlGraphicsManager\28\29
[asyncify] virtual\20thunk\20to\20SurfaceSdlGraphicsManager::setFeatureState\28OSystem::Feature\2c\20bool\29 can change the state due to SurfaceSdlGraphicsManager::setFeatureState\28OSystem::Feature\2c\20bool\29
[asyncify] virtual\20thunk\20to\20SurfaceSdlGraphicsManager::endGFXTransaction\28\29 can change the state due to SurfaceSdlGraphicsManager::endGFXTransaction\28\29
[asyncify] virtual\20thunk\20to\20SurfaceSdlGraphicsManager::setScaler\28unsigned\20int\2c\20int\29 can change the state due to SurfaceSdlGraphicsManager::setScaler\28unsigned\20int\2c\20int\29
[asyncify] virtual\20thunk\20to\20SurfaceSdlGraphicsManager::initSize\28unsigned\20int\2c\20unsigned\20int\2c\20Graphics::PixelFormat\20const*\29 can change the state due to SurfaceSdlGraphicsManager::initSize\28unsigned\20int\2c\20unsigned\20int\2c\20Graphics::PixelFormat\20const*\29
[asyncify] SurfaceSdlGraphicsManager::unloadGFXMode\28\29 can change the state due to SurfaceSdlGraphicsManager::deinitializeRenderer\28\29
[asyncify] virtual\20thunk\20to\20SurfaceSdlGraphicsManager::updateScreen\28\29 can change the state due to SurfaceSdlGraphicsManager::updateScreen\28\29
[asyncify] virtual\20thunk\20to\20SurfaceSdlGraphicsManager::copyRectToScreen\28void\20const*\2c\20int\2c\20int\2c\20int\2c\20int\2c\20int\29 can change the state due to SurfaceSdlGraphicsManager::copyRectToScreen\28void\20const*\2c\20int\2c\20int\2c\20int\2c\20int\2c\20int\29
[asyncify] virtual\20thunk\20to\20SurfaceSdlGraphicsManager::fillScreen\28unsigned\20int\29 can change the state due to SurfaceSdlGraphicsManager::fillScreen\28unsigned\20int\29
[asyncify] virtual\20thunk\20to\20SurfaceSdlGraphicsManager::setPalette\28unsigned\20char\20const*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to SurfaceSdlGraphicsManager::setPalette\28unsigned\20char\20const*\2c\20unsigned\20int\2c\20unsigned\20int\29
[asyncify] virtual\20thunk\20to\20SurfaceSdlGraphicsManager::setCursorPalette\28unsigned\20char\20const*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to SurfaceSdlGraphicsManager::setCursorPalette\28unsigned\20char\20const*\2c\20unsigned\20int\2c\20unsigned\20int\29
[asyncify] virtual\20thunk\20to\20SurfaceSdlGraphicsManager::setFocusRectangle\28Common::Rect\20const&\29 can change the state due to SurfaceSdlGraphicsManager::setFocusRectangle\28Common::Rect\20const&\29
[asyncify] virtual\20thunk\20to\20SurfaceSdlGraphicsManager::clearFocusRectangle\28\29 can change the state due to SurfaceSdlGraphicsManager::clearFocusRectangle\28\29
[asyncify] virtual\20thunk\20to\20SurfaceSdlGraphicsManager::copyRectToOverlay\28void\20const*\2c\20int\2c\20int\2c\20int\2c\20int\2c\20int\29 can change the state due to SurfaceSdlGraphicsManager::copyRectToOverlay\28void\20const*\2c\20int\2c\20int\2c\20int\2c\20int\2c\20int\29
[asyncify] virtual\20thunk\20to\20SurfaceSdlGraphicsManager::setMouseCursor\28void\20const*\2c\20unsigned\20int\2c\20unsigned\20int\2c\20int\2c\20int\2c\20unsigned\20int\2c\20bool\2c\20Graphics::PixelFormat\20const*\29 can change the state due to SurfaceSdlGraphicsManager::setMouseCursor\28void\20const*\2c\20unsigned\20int\2c\20unsigned\20int\2c\20int\2c\20int\2c\20unsigned\20int\2c\20bool\2c\20Graphics::PixelFormat\20const*\29
[asyncify] virtual\20thunk\20to\20SurfaceSdlGraphicsManager::displayMessageOnOSD\28Common::U32String\20const&\29 can change the state due to SurfaceSdlGraphicsManager::displayMessageOnOSD\28Common::U32String\20const&\29
[asyncify] virtual\20thunk\20to\20SurfaceSdlGraphicsManager::handleResizeImpl\28int\2c\20int\29 can change the state due to SurfaceSdlGraphicsManager::handleResizeImpl\28int\2c\20int\29
[asyncify] OpenGL::ShaderManager::notifyCreate\28\29 can change the state due to OpenGL::Shader::setUniform\28Common::String\20const&\2c\20unsigned\20int\29
[asyncify] OpenGL::LibRetroPipeline::Pass::addTexSampler\28Common::String\20const&\2c\20unsigned\20int*\2c\20OpenGL::LibRetroPipeline::Pass::TextureSampler::Type\2c\20unsigned\20int\2c\20bool\29 can change the state due to OpenGL::Shader::setUniform\28Common::String\20const&\2c\20unsigned\20int\29
[asyncify] OpenGL::LibRetroPipeline::activateInternal\28\29 can change the state due to OpenGL::Pipeline::activate\28\29
[asyncify] OpenGL::Pipeline::~Pipeline\28\29.1 can change the state due to OpenGL::Pipeline::deactivate\28\29
[asyncify] OpenGL::ShaderPipeline::setProjectionMatrix\28Math::Matrix<4\2c\204>\20const&\29 can change the state due to OpenGL::Shader::setUniform\28Common::String\20const&\2c\20Math::Matrix<4\2c\204>\20const&\29
[asyncify] OpenGL::LibRetroPipeline::setupFBOs\28\29 can change the state due to OpenGL::Shader::setUniform\28Common::String\20const&\2c\20Math::Matrix<4\2c\204>\20const&\29
[asyncify] OpenGL::GLTexture::GLTexture\28unsigned\20int\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to OpenGL::GLTexture::create\28\29
[asyncify] OpenGL::Texture::recreate\28\29 can change the state due to OpenGL::GLTexture::create\28\29
[asyncify] OpenGL::Texture::destroy\28\29 can change the state due to OpenGL::GLTexture::destroy\28\29
[asyncify] OpenGL::Texture::~Texture\28\29 can change the state due to OpenGL::GLTexture::~GLTexture\28\29
[asyncify] OpenGL::Texture::enableLinearFiltering\28bool\29 can change the state due to OpenGL::GLTexture::enableLinearFiltering\28bool\29
[asyncify] OpenGL::TextureCLUT8GPU::enableLinearFiltering\28bool\29 can change the state due to OpenGL::GLTexture::enableLinearFiltering\28bool\29
[asyncify] OpenGL::Texture::allocate\28unsigned\20int\2c\20unsigned\20int\29 can change the state due to OpenGL::GLTexture::setSize\28unsigned\20int\2c\20unsigned\20int\29
[asyncify] OpenGL::TextureCLUT8GPU::allocate\28unsigned\20int\2c\20unsigned\20int\29 can change the state due to OpenGL::GLTexture::setSize\28unsigned\20int\2c\20unsigned\20int\29
[asyncify] OpenGL::TextureTarget::setSize\28unsigned\20int\2c\20unsigned\20int\29 can change the state due to OpenGL::GLTexture::setSize\28unsigned\20int\2c\20unsigned\20int\29
[asyncify] OpenGL::Texture::updateGLTexture\28Common::Rect&\29 can change the state due to OpenGL::GLTexture::updateArea\28Common::Rect\20const&\2c\20Graphics::Surface\20const&\29
[asyncify] OpenGL::OpenGLGraphicsManager::copyRectToScreen\28void\20const*\2c\20int\2c\20int\2c\20int\2c\20int\2c\20int\29 can change the state due to OpenGL::Surface::copyRectToTexture\28unsigned\20int\2c\20unsigned\20int\2c\20unsigned\20int\2c\20unsigned\20int\2c\20void\20const*\2c\20unsigned\20int\29
[asyncify] OpenGL::OpenGLGraphicsManager::copyRectToOverlay\28void\20const*\2c\20int\2c\20int\2c\20int\2c\20int\2c\20int\29 can change the state due to OpenGL::Surface::copyRectToTexture\28unsigned\20int\2c\20unsigned\20int\2c\20unsigned\20int\2c\20unsigned\20int\2c\20void\20const*\2c\20unsigned\20int\29
[asyncify] OpenGL::OpenGLGraphicsManager::fillScreen\28unsigned\20int\29 can change the state due to OpenGL::Surface::fill\28unsigned\20int\29
[asyncify] OpenGL::OpenGLGraphicsManager::clearOverlay\28\29 can change the state due to OpenGL::Surface::fill\28unsigned\20int\29
[asyncify] OpenGL::ScaledTexture::~ScaledTexture\28\29.1 can change the state due to OpenGL::ScaledTexture::~ScaledTexture\28\29
[asyncify] OpenGL::TextureCLUT8GPU::~TextureCLUT8GPU\28\29.1 can change the state due to OpenGL::TextureCLUT8GPU::~TextureCLUT8GPU\28\29
[asyncify] OpenGL::Pipeline::activateInternal\28\29 can change the state due to OpenGL::Framebuffer::activate\28OpenGL::Pipeline*\29
[asyncify] OpenGL::Pipeline::setFramebuffer\28OpenGL::Framebuffer*\29 can change the state due to OpenGL::Framebuffer::activate\28OpenGL::Pipeline*\29
[asyncify] OpenGL::Framebuffer::enableBlend\28OpenGL::Framebuffer::BlendMode\29 can change the state due to OpenGL::Framebuffer::applyBlendState\28\29
[asyncify] OpenGL::Framebuffer::enableScissorTest\28bool\29 can change the state due to OpenGL::Framebuffer::applyScissorTestState\28\29
[asyncify] OpenGL::Pipeline::deactivateInternal\28\29 can change the state due to OpenGL::Framebuffer::deactivate\28\29
[asyncify] OpenGL::TextureTarget::~TextureTarget\28\29.1 can change the state due to OpenGL::TextureTarget::~TextureTarget\28\29
[asyncify] OpenGL::LibRetroTextureTarget::~LibRetroTextureTarget\28\29 can change the state due to OpenGL::TextureTarget::~TextureTarget\28\29
[asyncify] OpenGL::LibRetroPipeline::~LibRetroPipeline\28\29 can change the state due to OpenGL::LibRetroPipeline::close\28\29
[asyncify] OpenGL::LibRetroPipeline::setPipelineState\28\29 can change the state due to OpenGL::Shader::setUniform\28Common::String\20const&\2c\20Math::Matrix<2\2c\201>\20const&\29
[asyncify] OpenGL::LibRetroPipeline::setShaderTexUniforms\28Common::String\20const&\2c\20OpenGL::Shader*\2c\20OpenGL::GLTexture\20const&\29 can change the state due to OpenGL::Shader::setUniform\28Common::String\20const&\2c\20Math::Matrix<2\2c\201>\20const&\29
[asyncify] OpenGL::OpenGLGraphicsManager::setFeatureState\28OSystem::Feature\2c\20bool\29 can change the state due to OpenGL::OpenGLGraphicsManager::updateCursorPalette\28\29
[asyncify] OpenGL::OpenGLGraphicsManager::setCursorPalette\28unsigned\20char\20const*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to OpenGL::OpenGLGraphicsManager::updateCursorPalette\28\29
[asyncify] OpenGLSdlGraphicsManager::updateScreen\28\29 can change the state due to OpenGL::OpenGLGraphicsManager::updateScreen\28\29
[asyncify] virtual\20thunk\20to\20OpenGL::OpenGLGraphicsManager::handleResizeImpl\28int\2c\20int\29 can change the state due to OpenGL::OpenGLGraphicsManager::handleResizeImpl\28int\2c\20int\29
[asyncify] OpenGLSdlGraphicsManager::handleResizeImpl\28int\2c\20int\29 can change the state due to OpenGL::OpenGLGraphicsManager::handleResizeImpl\28int\2c\20int\29
[asyncify] virtual\20thunk\20to\20OpenGL::OpenGLGraphicsManager::gameNeedsAspectRatioCorrection\28\29\20const can change the state due to OpenGL::OpenGLGraphicsManager::gameNeedsAspectRatioCorrection\28\29\20const
[asyncify] virtual\20thunk\20to\20OpenGL::OpenGLGraphicsManager::recalculateDisplayAreas\28\29 can change the state due to OpenGL::OpenGLGraphicsManager::recalculateDisplayAreas\28\29
[asyncify] OpenGLSdlGraphicsManager::saveScreenshot\28Common::String\20const&\29\20const can change the state due to OpenGL::OpenGLGraphicsManager::saveScreenshot\28Common::String\20const&\29\20const
[asyncify] non-virtual\20thunk\20to\20OpenGLSdlGraphicsManager::saveScreenshot\28Common::String\20const&\29\20const can change the state due to OpenGL::OpenGLGraphicsManager::saveScreenshot\28Common::String\20const&\29\20const
[asyncify] OpenGLSdlGraphicsManager::~OpenGLSdlGraphicsManager\28\29.1 can change the state due to OpenGLSdlGraphicsManager::~OpenGLSdlGraphicsManager\28\29
[asyncify] virtual\20thunk\20to\20OpenGLSdlGraphicsManager::~OpenGLSdlGraphicsManager\28\29 can change the state due to OpenGLSdlGraphicsManager::~OpenGLSdlGraphicsManager\28\29
[asyncify] non-virtual\20thunk\20to\20OpenGLSdlGraphicsManager::~OpenGLSdlGraphicsManager\28\29 can change the state due to OpenGLSdlGraphicsManager::~OpenGLSdlGraphicsManager\28\29
[asyncify] OpenGLSdlGraphicsManager::~OpenGLSdlGraphicsManager\28\29.2 can change the state due to OpenGLSdlGraphicsManager::~OpenGLSdlGraphicsManager\28\29
[asyncify] non-virtual\20thunk\20to\20OpenGLSdlGraphicsManager::notifyResize\28int\2c\20int\29 can change the state due to OpenGLSdlGraphicsManager::notifyResize\28int\2c\20int\29
[asyncify] OpenGLSdlGraphicsManager::loadVideoMode\28unsigned\20int\2c\20unsigned\20int\2c\20Graphics::PixelFormat\20const&\29 can change the state due to OpenGLSdlGraphicsManager::setupMode\28unsigned\20int\2c\20unsigned\20int\29
[asyncify] non-virtual\20thunk\20to\20OpenGLSdlGraphicsManager::notifyEvent\28Common::Event\20const&\29 can change the state due to OpenGLSdlGraphicsManager::notifyEvent\28Common::Event\20const&\29
[asyncify] OpenGL::TextureGL::~TextureGL\28\29.1 can change the state due to OpenGL::TextureGL::~TextureGL\28\29
[asyncify] OpenGL::FrameBuffer::~FrameBuffer\28\29.1 can change the state due to OpenGL::FrameBuffer::~FrameBuffer\28\29
[asyncify] OpenGLSdlGraphics3dManager::~OpenGLSdlGraphics3dManager\28\29 can change the state due to OpenGLSdlGraphics3dManager::closeOverlay\28\29
[asyncify] OpenGLSdlGraphics3dManager::setFeatureState\28OSystem::Feature\2c\20bool\29 can change the state due to OpenGLSdlGraphics3dManager::createOrUpdateScreen\28\29
[asyncify] OpenGLSdlGraphics3dManager::endGFXTransaction\28\29 can change the state due to OpenGLSdlGraphics3dManager::setupScreen\28\29
[asyncify] OpenGLSdlGraphics3dManager::initSize\28unsigned\20int\2c\20unsigned\20int\2c\20Graphics::PixelFormat\20const*\29 can change the state due to OpenGLSdlGraphics3dManager::setupScreen\28\29
[asyncify] virtual\20thunk\20to\20OpenGLSdlGraphics3dManager::setStretchMode\28int\29 can change the state due to OpenGLSdlGraphics3dManager::setStretchMode\28int\29
[asyncify] virtual\20thunk\20to\20OpenGLSdlGraphics3dManager::handleResizeImpl\28int\2c\20int\29 can change the state due to OpenGLSdlGraphics3dManager::handleResizeImpl\28int\2c\20int\29
[asyncify] virtual\20thunk\20to\20OpenGLSdlGraphics3dManager::gameNeedsAspectRatioCorrection\28\29\20const can change the state due to OpenGLSdlGraphics3dManager::gameNeedsAspectRatioCorrection\28\29\20const
[asyncify] virtual\20thunk\20to\20OpenGLSdlGraphics3dManager::updateScreen\28\29 can change the state due to OpenGLSdlGraphics3dManager::updateScreen\28\29
[asyncify] virtual\20thunk\20to\20OpenGLSdlGraphics3dManager::showOverlay\28bool\29 can change the state due to OpenGLSdlGraphics3dManager::showOverlay\28bool\29
[asyncify] POSIXFilesystemNode::makeNode\28Common::String\20const&\29\20const can change the state due to POSIXFilesystemNode::POSIXFilesystemNode\28Common::String\20const&\29
[asyncify] POSIXFilesystemFactory::makeRootFileNode\28\29\20const can change the state due to POSIXFilesystemNode::POSIXFilesystemNode\28Common::String\20const&\29
[asyncify] POSIXFilesystemFactory::makeCurrentDirectoryFileNode\28\29\20const can change the state due to POSIXFilesystemNode::POSIXFilesystemNode\28Common::String\20const&\29
[asyncify] POSIXFilesystemFactory::makeFileNodePath\28Common::String\20const&\29\20const can change the state due to POSIXFilesystemNode::POSIXFilesystemNode\28Common::String\20const&\29
[asyncify] Image::BitmapDecoder::~BitmapDecoder\28\29 can change the state due to Image::BitmapDecoder::destroy\28\29
[asyncify] Common::SubReadStream::~SubReadStream\28\29 can change the state due to Common::DisposablePtr<Common::ReadStream\2c\20Common::DefaultDeleter<Common::ReadStream>>::~DisposablePtr\28\29
[asyncify] Audio::makeLoopingAudioStream\28Audio::RewindableAudioStream*\2c\20unsigned\20int\29 can change the state due to Common::DisposablePtr<Common::ReadStream\2c\20Common::DefaultDeleter<Common::ReadStream>>::~DisposablePtr\28\29
[asyncify] Audio::LoopingAudioStream::~LoopingAudioStream\28\29 can change the state due to Common::DisposablePtr<Common::ReadStream\2c\20Common::DefaultDeleter<Common::ReadStream>>::~DisposablePtr\28\29
[asyncify] Audio::SubSeekableAudioStream::~SubSeekableAudioStream\28\29.1 can change the state due to Common::DisposablePtr<Common::ReadStream\2c\20Common::DefaultDeleter<Common::ReadStream>>::~DisposablePtr\28\29
[asyncify] Audio::RawStream<3\2c\20true\2c\20true>::~RawStream\28\29.1 can change the state due to Common::DisposablePtr<Common::ReadStream\2c\20Common::DefaultDeleter<Common::ReadStream>>::~DisposablePtr\28\29
[asyncify] Common::GzioReadStream::~GzioReadStream\28\29 can change the state due to Common::DisposablePtr<Common::ReadStream\2c\20Common::DefaultDeleter<Common::ReadStream>>::~DisposablePtr\28\29
[asyncify] non-virtual\20thunk\20to\20Image::JPEGDecoder::decodeFrame\28Common::SeekableReadStream&\29 can change the state due to Image::JPEGDecoder::decodeFrame\28Common::SeekableReadStream&\29
[asyncify] SurfaceSdlGraphicsManager::saveScreenshot\28Common::String\20const&\29\20const can change the state due to Image::writePNG\28Common::WriteStream&\2c\20Graphics::Surface\20const&\2c\20unsigned\20char\20const*\29
[asyncify] GUI::GuiManager::setupCursor\28\29 can change the state due to Graphics::CursorManager::showMouse\28bool\29
[asyncify] GUI::ThemeEngine::getStringWidth\28Common::U32String\20const&\2c\20GUI::ThemeEngine::FontStyle\29\20const can change the state due to Graphics::Font::getStringWidth\28Common::U32String\20const&\29\20const
[asyncify] Graphics::FontManager::~FontManager\28\29.1 can change the state due to Graphics::FontManager::~FontManager\28\29
[asyncify] Graphics::ManagedSurface::ManagedSurface\28int\2c\20int\2c\20Graphics::PixelFormat\20const&\29 can change the state due to Graphics::ManagedSurface::create\28short\2c\20short\2c\20Graphics::PixelFormat\20const&\29
[asyncify] Graphics::ManagedSurface::ManagedSurface\28Graphics::Surface\20const*\29 can change the state due to Graphics::ManagedSurface::copyFrom\28Graphics::Surface\20const&\29
[asyncify] Graphics::ManagedSurface::blitFrom\28Graphics::ManagedSurface\20const&\2c\20Common::Rect\20const&\2c\20Common::Point\20const&\29 can change the state due to Graphics::ManagedSurface::blitFromInner\28Graphics::Surface\20const&\2c\20Common::Rect\20const&\2c\20Common::Rect\20const&\2c\20unsigned\20int\20const*\29
[asyncify] Graphics::ManagedSurface::transBlitFrom\28Graphics::ManagedSurface\20const&\2c\20Common::Rect\20const&\2c\20Common::Rect\20const&\2c\20unsigned\20int\2c\20bool\2c\20unsigned\20int\2c\20unsigned\20int\2c\20Graphics::Surface\20const*\2c\20bool\29 can change the state due to Graphics::ManagedSurface::transBlitFromInner\28Graphics::Surface\20const&\2c\20Common::Rect\20const&\2c\20Common::Rect\20const&\2c\20unsigned\20int\2c\20bool\2c\20unsigned\20int\2c\20unsigned\20int\2c\20unsigned\20int\20const*\2c\20unsigned\20int\20const*\2c\20Graphics::Surface\20const*\2c\20bool\29
[asyncify] glad_gl_load_GL_EXT_draw_instanced\28void\20\28*\20\28*\29\28void*\2c\20char\20const*\29\29\28\29\2c\20void*\29 can change the state due to glad_gl_get_proc_from_userptr\28void*\2c\20char\20const*\29
[asyncify] glad_gl_load_GL_EXT_multi_draw_arrays\28void\20\28*\20\28*\29\28void*\2c\20char\20const*\29\29\28\29\2c\20void*\29 can change the state due to glad_gl_get_proc_from_userptr\28void*\2c\20char\20const*\29
[asyncify] glad_gl_load_GL_KHR_debug\28void\20\28*\20\28*\29\28void*\2c\20char\20const*\29\29\28\29\2c\20void*\29 can change the state due to glad_gl_get_proc_from_userptr\28void*\2c\20char\20const*\29
[asyncify] glad_gl_load_GL_NV_conditional_render\28void\20\28*\20\28*\29\28void*\2c\20char\20const*\29\29\28\29\2c\20void*\29 can change the state due to glad_gl_get_proc_from_userptr\28void*\2c\20char\20const*\29
[asyncify] glad_gl_load_GL_OES_single_precision\28void\20\28*\20\28*\29\28void*\2c\20char\20const*\29\29\28\29\2c\20void*\29 can change the state due to glad_gl_get_proc_from_userptr\28void*\2c\20char\20const*\29
[asyncify] OpenGL::Shader::fromStrings\28Common::String\20const&\2c\20char\20const*\2c\20char\20const*\2c\20char\20const*\20const*\2c\20int\29 can change the state due to OpenGL::Shader::createDirectShader\28unsigned\20long\2c\20char\20const*\20const*\2c\20unsigned\20int\2c\20Common::String\20const&\29
[asyncify] OpenGL::ShaderPipeline::ShaderPipeline\28OpenGL::Shader*\29 can change the state due to OpenGL::Shader::createBuffer\28unsigned\20int\2c\20long\2c\20void\20const*\2c\20unsigned\20int\29
[asyncify] OpenGL::ShaderPipeline::~ShaderPipeline\28\29 can change the state due to OpenGL::Shader::freeBuffer\28unsigned\20int\29
[asyncify] OpenGL::ShaderSurfaceRenderer::~ShaderSurfaceRenderer\28\29 can change the state due to OpenGL::Shader::freeBuffer\28unsigned\20int\29
[asyncify] OpenGL::ShaderPipeline::deactivateInternal\28\29 can change the state due to OpenGL::Shader::unbind\28\29
[asyncify] OpenGL::Shader::~Shader\28\29 can change the state due to OpenGL::Shader::unbind\28\29
[asyncify] SurfaceSdlGraphicsManager::clearOverlay\28\29 can change the state due to Scaler::scale\28unsigned\20char\20const*\2c\20unsigned\20int\2c\20unsigned\20char*\2c\20unsigned\20int\2c\20int\2c\20int\2c\20int\2c\20int\29
[asyncify] MidiDriver_ADLIB::mcOff\28AdLibVoice*\29 can change the state due to MidiDriver_ADLIB::adlibWrite\28unsigned\20char\2c\20unsigned\20char\29
[asyncify] MidiDriver_ADLIB::partKeyOn\28AdLibPart*\2c\20AdLibInstrument\20const*\2c\20unsigned\20char\2c\20unsigned\20char\2c\20AdLibInstrument\20const*\2c\20unsigned\20char\29 can change the state due to MidiDriver_ADLIB::adlibWrite\28unsigned\20char\2c\20unsigned\20char\29
[asyncify] MidiDriver_ADLIB::adlibNoteOnEx\28int\2c\20unsigned\20char\2c\20int\29 can change the state due to MidiDriver_ADLIB::adlibWrite\28unsigned\20char\2c\20unsigned\20char\29
[asyncify] MidiDriver_ADLIB::adlibPlayNote\28int\2c\20int\29 can change the state due to MidiDriver_ADLIB::adlibWrite\28unsigned\20char\2c\20unsigned\20char\29
[asyncify] MidiDriver_ADLIB::adlibSetParam\28int\2c\20unsigned\20char\2c\20int\2c\20bool\29 can change the state due to MidiDriver_ADLIB::adlibWrite\28unsigned\20char\2c\20unsigned\20char\29
[asyncify] MidiDriver_ADLIB::mcIncStuff\28AdLibVoice*\2c\20Struct10*\2c\20Struct11*\29 can change the state due to MidiDriver_ADLIB::adlibWrite\28unsigned\20char\2c\20unsigned\20char\29
[asyncify] MidiDriver_MPU401::MidiDriver_MPU401\28\29 can change the state due to MidiDriver::MidiDriver\28\29
[asyncify] Audio::QueuingAudioStreamImpl::~QueuingAudioStreamImpl\28\29.1 can change the state due to Audio::QueuingAudioStreamImpl::~QueuingAudioStreamImpl\28\29
[asyncify] OPL::EmulatedOPL::~EmulatedOPL\28\29 can change the state due to OPL::OPL::stop\28\29
[asyncify] OPL::DOSBox::OPL::~OPL\28\29 can change the state due to OPL::OPL::stop\28\29
[asyncify] OPL::MAME::OPL::~OPL\28\29 can change the state due to OPL::OPL::stop\28\29
[asyncify] OPL::NUKED::OPL::~OPL\28\29 can change the state due to OPL::OPL::stop\28\29
[asyncify] non-virtual\20thunk\20to\20OPL::EmulatedOPL::readBuffer\28short*\2c\20int\29 can change the state due to OPL::EmulatedOPL::readBuffer\28short*\2c\20int\29
[asyncify] non-virtual\20thunk\20to\20OPL::EmulatedOPL::getRate\28\29\20const can change the state due to OPL::EmulatedOPL::getRate\28\29\20const
[asyncify] MidiDriver::midiDriverCommonSend\28unsigned\20int\29 can change the state due to MidiDriver_BASE::midiDumpDelta\28\29
[asyncify] MidiDriver::midiDriverCommonSysEx\28unsigned\20char\20const*\2c\20unsigned\20short\29 can change the state due to MidiDriver_BASE::midiDumpDelta\28\29
[asyncify] MidiDriver_SEQ::~MidiDriver_SEQ\28\29 can change the state due to MidiDriver_BASE::~MidiDriver_BASE\28\29
[asyncify] MidiDriver_ADLIB::~MidiDriver_ADLIB\28\29 can change the state due to MidiDriver_BASE::~MidiDriver_BASE\28\29
[asyncify] MidiDriver_MPU401::~MidiDriver_MPU401\28\29 can change the state due to MidiDriver_BASE::~MidiDriver_BASE\28\29
[asyncify] MidiDriver_MT32::~MidiDriver_MT32\28\29 can change the state due to MidiDriver_BASE::~MidiDriver_BASE\28\29
[asyncify] MidiDriver_Emulated::~MidiDriver_Emulated\28\29 can change the state due to MidiDriver_BASE::~MidiDriver_BASE\28\29
[asyncify] non-virtual\20thunk\20to\20MidiDriver_Emulated::~MidiDriver_Emulated\28\29 can change the state due to MidiDriver_BASE::~MidiDriver_BASE\28\29
[asyncify] MidiDriver::setPitchBendRange\28unsigned\20char\2c\20unsigned\20int\29 can change the state due to MidiDriver_BASE::send\28unsigned\20char\2c\20unsigned\20char\2c\20unsigned\20char\29
[asyncify] Audio::MixerImpl::muteSoundType\28Audio::Mixer::SoundType\2c\20bool\29 can change the state due to Audio::Channel::updateChannelVolumes\28\29
[asyncify] Audio::MixerImpl::setChannelVolume\28Audio::SoundHandle\2c\20unsigned\20char\29 can change the state due to Audio::Channel::updateChannelVolumes\28\29
[asyncify] Audio::MixerImpl::setChannelBalance\28Audio::SoundHandle\2c\20signed\20char\29 can change the state due to Audio::Channel::updateChannelVolumes\28\29
[asyncify] Audio::MixerImpl::setVolumeForSoundType\28Audio::Mixer::SoundType\2c\20int\29 can change the state due to Audio::Channel::updateChannelVolumes\28\29
[asyncify] Audio::MixerImpl::pauseAll\28bool\29 can change the state due to Audio::Channel::pause\28bool\29
[asyncify] Audio::MixerImpl::pauseID\28int\2c\20bool\29 can change the state due to Audio::Channel::pause\28bool\29
[asyncify] Audio::MixerImpl::pauseHandle\28Audio::SoundHandle\2c\20bool\29 can change the state due to Audio::Channel::pause\28bool\29
[asyncify] Audio::MixerImpl::~MixerImpl\28\29 can change the state due to Audio::Channel::~Channel\28\29
[asyncify] Audio::MixerImpl::stopAll\28\29 can change the state due to Audio::Channel::~Channel\28\29
[asyncify] Audio::MixerImpl::stopID\28int\29 can change the state due to Audio::Channel::~Channel\28\29
[asyncify] Audio::MixerImpl::stopHandle\28Audio::SoundHandle\29 can change the state due to Audio::Channel::~Channel\28\29
[asyncify] MidiDriver_SEQ::close\28\29 can change the state due to MidiDriver_MPU401::close\28\29
[asyncify] MidiDriver_TIMIDITY::close\28\29 can change the state due to MidiDriver_MPU401::close\28\29
[asyncify] byn$mgfn-shared$SeqMusicPlugin::getDevices\28\29\20const can change the state due to MusicDevice::MusicDevice\28MusicPluginObject\20const*\2c\20Common::String\2c\20MusicType\29
[asyncify] Audio::Ima_ADPCMStream::Ima_ADPCMStream\28Common::SeekableReadStream*\2c\20DisposeAfterUse::Flag\2c\20unsigned\20int\2c\20int\2c\20int\2c\20unsigned\20int\29 can change the state due to Audio::ADPCMStream::ADPCMStream\28Common::SeekableReadStream*\2c\20DisposeAfterUse::Flag\2c\20unsigned\20int\2c\20int\2c\20int\2c\20unsigned\20int\29
[asyncify] Audio::QuickTimeAudioDecoder::~QuickTimeAudioDecoder\28\29.1 can change the state due to Audio::QuickTimeAudioDecoder::~QuickTimeAudioDecoder\28\29
[asyncify] Audio::QuickTimeAudioStream::~QuickTimeAudioStream\28\29 can change the state due to Audio::QuickTimeAudioDecoder::~QuickTimeAudioDecoder\28\29
[asyncify] Audio::QuickTimeAudioStream::~QuickTimeAudioStream\28\29.1 can change the state due to Audio::QuickTimeAudioDecoder::~QuickTimeAudioDecoder\28\29
[asyncify] non-virtual\20thunk\20to\20Audio::QuickTimeAudioStream::~QuickTimeAudioStream\28\29 can change the state due to Audio::QuickTimeAudioDecoder::~QuickTimeAudioDecoder\28\29
[asyncify] Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::~QuickTimeAudioTrack\28\29.2 can change the state due to Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::~QuickTimeAudioTrack\28\29.1
[asyncify] Audio::QuickTimeAudioDecoder::AudioSampleDesc::~AudioSampleDesc\28\29.1 can change the state due to Audio::QuickTimeAudioDecoder::AudioSampleDesc::~AudioSampleDesc\28\29
[asyncify] Audio::RawStream<3\2c\20true\2c\20true>::readBuffer\28short*\2c\20int\29 can change the state due to Audio::RawStream<3\2c\20true\2c\20true>::fillBuffer\28int\29
[asyncify] Audio::RawStream<3\2c\20true\2c\20false>::readBuffer\28short*\2c\20int\29 can change the state due to Audio::RawStream<3\2c\20true\2c\20true>::fillBuffer\28int\29
[asyncify] Audio::RawStream<3\2c\20false\2c\20true>::readBuffer\28short*\2c\20int\29 can change the state due to Audio::RawStream<3\2c\20true\2c\20true>::fillBuffer\28int\29
[asyncify] Audio::RawStream<3\2c\20false\2c\20false>::readBuffer\28short*\2c\20int\29 can change the state due to Audio::RawStream<3\2c\20true\2c\20true>::fillBuffer\28int\29
[asyncify] Audio::RawStream<2\2c\20true\2c\20true>::readBuffer\28short*\2c\20int\29 can change the state due to Audio::RawStream<2\2c\20true\2c\20true>::fillBuffer\28int\29
[asyncify] Audio::RawStream<2\2c\20true\2c\20false>::readBuffer\28short*\2c\20int\29 can change the state due to Audio::RawStream<2\2c\20true\2c\20true>::fillBuffer\28int\29
[asyncify] Audio::RawStream<2\2c\20false\2c\20true>::readBuffer\28short*\2c\20int\29 can change the state due to Audio::RawStream<2\2c\20true\2c\20true>::fillBuffer\28int\29
[asyncify] Audio::RawStream<2\2c\20false\2c\20false>::readBuffer\28short*\2c\20int\29 can change the state due to Audio::RawStream<2\2c\20true\2c\20true>::fillBuffer\28int\29
[asyncify] Audio::RawStream<1\2c\20true\2c\20false>::readBuffer\28short*\2c\20int\29 can change the state due to Audio::RawStream<1\2c\20true\2c\20false>::fillBuffer\28int\29
[asyncify] Audio::RawStream<1\2c\20false\2c\20false>::readBuffer\28short*\2c\20int\29 can change the state due to Audio::RawStream<1\2c\20true\2c\20false>::fillBuffer\28int\29
[asyncify] OPL::DOSBox::DBOPL::Operator::GetSample\28int\29 can change the state due to OPL::DOSBox::DBOPL::Operator::ForwardVolume\28\29
[asyncify] OPL::DOSBox::DBOPL::Channel*\20OPL::DOSBox::DBOPL::Channel::BlockTemplate<\28OPL::DOSBox::DBOPL::SynthMode\2911>\28OPL::DOSBox::DBOPL::Chip*\2c\20unsigned\20int\2c\20int*\29 can change the state due to OPL::DOSBox::DBOPL::Operator::ForwardVolume\28\29
[asyncify] OPL::DOSBox::DBOPL::Channel*\20OPL::DOSBox::DBOPL::Channel::BlockTemplate<\28OPL::DOSBox::DBOPL::SynthMode\2910>\28OPL::DOSBox::DBOPL::Chip*\2c\20unsigned\20int\2c\20int*\29 can change the state due to OPL::DOSBox::DBOPL::Operator::ForwardVolume\28\29
[asyncify] OPL::DOSBox::OPL::write\28int\2c\20int\29 can change the state due to OPL::DOSBox::Chip::write\28unsigned\20int\2c\20unsigned\20char\29
[asyncify] OPL::DOSBox::OPL::dualWrite\28unsigned\20char\2c\20unsigned\20char\2c\20unsigned\20char\29 can change the state due to OPL::DOSBox::Chip::write\28unsigned\20int\2c\20unsigned\20char\29
[asyncify] OPL::DOSBox::OPL::read\28int\29 can change the state due to OPL::DOSBox::Chip::read\28\29
[asyncify] OPL::MAME::OPLResetChip\28OPL::MAME::fm_opl_f*\29 can change the state due to OPL::MAME::OPL_STATUS_RESET\28OPL::MAME::fm_opl_f*\2c\20int\29
[asyncify] OPL::MAME::OPL::writeReg\28int\2c\20int\29 can change the state due to OPL::MAME::OPLWriteReg\28OPL::MAME::fm_opl_f*\2c\20int\2c\20int\29
[asyncify] non-virtual\20thunk\20to\20MidiDriver_MT32::close\28\29 can change the state due to MidiDriver_MT32::close\28\29
[asyncify] non-virtual\20thunk\20to\20MidiDriver_MT32::open\28\29 can change the state due to MidiDriver_MT32::open\28\29
[asyncify] non-virtual\20thunk\20to\20MidiDriver_Emulated::open\28\29 can change the state due to MidiDriver_Emulated::open\28\29
[asyncify] OPL::NUKED::OPL::generateSamples\28short*\2c\20int\29 can change the state due to OPL::NUKED::OPL3_SlotGenerate\28OPL::NUKED::_opl3_slot*\29
[asyncify] Common::SearchSet::addDirectory\28Common::String\20const&\2c\20Common::FSNode\20const&\2c\20int\2c\20int\2c\20bool\29 can change the state due to Common::SearchSet::add\28Common::String\20const&\2c\20Common::Archive*\2c\20int\2c\20bool\29
[asyncify] OSystem_SDL::addSysArchivesToSearchSet\28Common::SearchSet&\2c\20int\29 can change the state due to Common::SearchSet::add\28Common::String\20const&\2c\20Common::Archive*\2c\20int\2c\20bool\29
[asyncify] OSystem_POSIX::addSysArchivesToSearchSet\28Common::SearchSet&\2c\20int\29 can change the state due to Common::SearchSet::add\28Common::String\20const&\2c\20Common::Archive*\2c\20int\2c\20bool\29
[asyncify] non-virtual\20thunk\20to\20Common::SearchManager::clear\28\29 can change the state due to Common::SearchManager::clear\28\29
[asyncify] Common::Singleton<Common::SearchManager>::instance\28\29 can change the state due to Common::SearchManager::clear\28\29
[asyncify] DefaultSaveFileManager::getSavePath\28\29\20const can change the state due to Common::ConfigManager::flushToDisk\28\29
[asyncify] Common::ConfigManager::setAndFlush\28Common::String\20const&\2c\20Common::String\20const&\29 can change the state due to Common::ConfigManager::flushToDisk\28\29
[asyncify] debugC\28int\2c\20unsigned\20int\2c\20char\20const*\2c\20...\29 can change the state due to debugHelper\28char\20const*\2c\20void*\2c\20bool\29
[asyncify] byn$mgfn-shared$debug\28char\20const*\2c\20...\29 can change the state due to debugHelper\28char\20const*\2c\20void*\2c\20bool\29
[asyncify] byn$mgfn-shared$debug\28int\2c\20char\20const*\2c\20...\29 can change the state due to debugHelper\28char\20const*\2c\20void*\2c\20bool\29
[asyncify] DefaultEventManager::purgeMouseEvents\28\29 can change the state due to Common::EventDispatcher::dispatch\28\29
[asyncify] DefaultEventManager::purgeKeyboardEvents\28\29 can change the state due to Common::EventDispatcher::dispatch\28\29
[asyncify] Common::VirtualMouse::~VirtualMouse\28\29 can change the state due to Common::EventDispatcher::unregisterSource\28Common::EventSource*\29
[asyncify] Common::OSDMessageQueue::~OSDMessageQueue\28\29 can change the state due to Common::EventDispatcher::unregisterSource\28Common::EventSource*\29
[asyncify] Common::InputWatcher::stopWatching\28\29 can change the state due to Common::EventDispatcher::unregisterObserver\28Common::EventObserver*\29
[asyncify] SdlGraphicsManager::deactivateManager\28\29 can change the state due to Common::EventDispatcher::unregisterObserver\28Common::EventObserver*\29
[asyncify] Common::File::~File\28\29.1 can change the state due to Common::File::~File\28\29
[asyncify] Scumm::ScummDiskImage::~ScummDiskImage\28\29 can change the state due to Common::File::~File\28\29
[asyncify] Scumm::ScummNESFile::~ScummNESFile\28\29 can change the state due to Common::File::~File\28\29
[asyncify] Glk::Blorb::createReadStreamForMember\28Common::Path\20const&\29\20const can change the state due to Common::File::open\28Common::Path\20const&\29
[asyncify] Scumm::ScummDiskImage::openDisk\28char\29 can change the state due to Common::File::open\28Common::Path\20const&\29
[asyncify] DefaultAudioCDManager::existExtractedCDAudioFiles\28unsigned\20int\29 can change the state due to Common::File::exists\28Common::Path\20const&\29
[asyncify] MT32EmuMusicPlugin::checkDevice\28unsigned\20int\29\20const can change the state due to Common::File::exists\28Common::Path\20const&\29
[asyncify] Gob::DataIO::hasFile\28Common::String\20const&\29 can change the state due to Common::File::exists\28Common::Path\20const&\29
[asyncify] Scumm::ScummDiskImage::open\28Common::Path\20const&\29 can change the state due to Common::File::seek\28long\20long\2c\20int\29
[asyncify] Scumm::ScummDiskImage::fileReadByte\28\29 can change the state due to Common::File::read\28void*\2c\20unsigned\20int\29
[asyncify] Common::DumpFile::~DumpFile\28\29.1 can change the state due to Common::DumpFile::~DumpFile\28\29
[asyncify] Common::DumpFile::~DumpFile\28\29.2 can change the state due to Common::DumpFile::~DumpFile\28\29
[asyncify] Common::FSDirectory::FSDirectory\28Common::Path\20const&\2c\20int\2c\20bool\2c\20bool\2c\20bool\29 can change the state due to Common::FSNode::FSNode\28Common::Path\20const&\29
[asyncify] Base::detectGames\28Common::String\20const&\2c\20Common::String\20const&\2c\20Common::String\20const&\2c\20bool\29 can change the state due to Common::FSNode::FSNode\28Common::Path\20const&\29
[asyncify] Common::FSDirectory::hasFile\28Common::Path\20const&\29\20const can change the state due to Common::FSNode::isDirectory\28\29\20const
[asyncify] Common::FSDirectory::getMember\28Common::Path\20const&\29\20const can change the state due to Common::FSNode::isDirectory\28\29\20const
[asyncify] Common::FSDirectory::listMatchingMembers\28Common::List<Common::SharedPtr<Common::ArchiveMember>>&\2c\20Common::Path\20const&\29\20const can change the state due to Common::FSNode::isDirectory\28\29\20const
[asyncify] Common::FSDirectory::listMembers\28Common::List<Common::SharedPtr<Common::ArchiveMember>>&\29\20const can change the state due to Common::FSNode::isDirectory\28\29\20const
[asyncify] OpenGL::getChildRecursive\28Common::FSNode\20const&\2c\20Common::String\20const&\29 can change the state due to Common::FSNode::getChild\28Common::String\20const&\29\20const
[asyncify] FileMapArchive::createReadStreamForMember\28Common::Path\20const&\29\20const can change the state due to Common::FSNode::createReadStream\28\29\20const
[asyncify] Common::FSDirectory::ensureCached\28\29\20const can change the state due to Common::FSDirectory::cacheDirectoryRecursive\28Common::FSNode\2c\20int\2c\20Common::Path\20const&\29\20const
[asyncify] Common::MacResManager::~MacResManager\28\29 can change the state due to Common::MacResManager::close\28\29
[asyncify] Audio::MixerImpl::MixerImpl\28unsigned\20int\2c\20bool\2c\20unsigned\20int\29 can change the state due to Common::Mutex::Mutex\28\29
[asyncify] Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::createStream\28\29\20const can change the state due to Common::Mutex::Mutex\28\29
[asyncify] Common::lockMemoryPoolMutex\28\29 can change the state due to Common::Mutex::Mutex\28\29
[asyncify] Common::Singleton<Common::OSDMessageQueue>::instance\28\29 can change the state due to Common::Mutex::Mutex\28\29
[asyncify] DefaultTimerManager::~DefaultTimerManager\28\29 can change the state due to Common::Mutex::~Mutex\28\29
[asyncify] SurfaceSdlGraphicsManager::lockScreen\28\29 can change the state due to Common::Mutex::lock\28\29
[asyncify] MT32Emu::ScummVMReportHandler::showLCDMessage\28char\20const*\29 can change the state due to Common::Mutex::lock\28\29
[asyncify] SurfaceSdlGraphicsManager::unlockScreen\28\29 can change the state due to Common::Mutex::unlock\28\29
[asyncify] Common::unlockMemoryPoolMutex\28\29 can change the state due to Common::Mutex::unlock\28\29
[asyncify] SurfaceSdlGraphicsManager::setStretchMode\28int\29 can change the state due to Common::StackLock::StackLock\28Common::Mutex\20const&\2c\20char\20const*\29
[asyncify] SurfaceSdlGraphicsManager::setAspectRatioCorrection\28bool\29 can change the state due to Common::StackLock::StackLock\28Common::Mutex\20const&\2c\20char\20const*\29
[asyncify] SurfaceSdlGraphicsManager::displayActivityIconOnOSD\28Graphics::Surface\20const*\29 can change the state due to Common::StackLock::StackLock\28Common::Mutex\20const&\2c\20char\20const*\29
[asyncify] DefaultTimerManager::removeTimerProc\28void\20\28*\29\28void*\29\29 can change the state due to Common::StackLock::StackLock\28Common::Mutex\20const&\2c\20char\20const*\29
[asyncify] Audio::QueuingAudioStreamImpl::endOfStream\28\29\20const can change the state due to Common::StackLock::StackLock\28Common::Mutex\20const&\2c\20char\20const*\29
[asyncify] Audio::QueuingAudioStreamImpl::finish\28\29 can change the state due to Common::StackLock::StackLock\28Common::Mutex\20const&\2c\20char\20const*\29
[asyncify] Audio::QueuingAudioStreamImpl::numQueuedStreams\28\29\20const can change the state due to Common::StackLock::StackLock\28Common::Mutex\20const&\2c\20char\20const*\29
[asyncify] Audio::MixerImpl::setReady\28bool\29 can change the state due to Common::StackLock::StackLock\28Common::Mutex\20const&\2c\20char\20const*\29
[asyncify] Audio::MixerImpl::isSoundIDActive\28int\29 can change the state due to Common::StackLock::StackLock\28Common::Mutex\20const&\2c\20char\20const*\29
[asyncify] Audio::MixerImpl::getSoundID\28Audio::SoundHandle\29 can change the state due to Common::StackLock::StackLock\28Common::Mutex\20const&\2c\20char\20const*\29
[asyncify] Audio::MixerImpl::isSoundHandleActive\28Audio::SoundHandle\29 can change the state due to Common::StackLock::StackLock\28Common::Mutex\20const&\2c\20char\20const*\29
[asyncify] Audio::MixerImpl::hasActiveChannelOfType\28Audio::Mixer::SoundType\29 can change the state due to Common::StackLock::StackLock\28Common::Mutex\20const&\2c\20char\20const*\29
[asyncify] Audio::MixerImpl::isReady\28\29\20const can change the state due to Common::StackLock::StackLock\28Common::Mutex\20const&\2c\20char\20const*\29
[asyncify] MidiDriver_MT32::send\28unsigned\20int\29 can change the state due to Common::StackLock::StackLock\28Common::Mutex\20const&\2c\20char\20const*\29
[asyncify] MidiDriver_MT32::setPitchBendRange\28unsigned\20char\2c\20unsigned\20int\29 can change the state due to Common::StackLock::StackLock\28Common::Mutex\20const&\2c\20char\20const*\29
[asyncify] MidiDriver_MT32::sysEx\28unsigned\20char\20const*\2c\20unsigned\20short\29 can change the state due to Common::StackLock::StackLock\28Common::Mutex\20const&\2c\20char\20const*\29
[asyncify] Common::StackLock::~StackLock\28\29 can change the state due to Common::StackLock::unlock\28\29
[asyncify] non-virtual\20thunk\20to\20Common::OSDMessageQueue::pollEvent\28Common::Event&\29 can change the state due to Common::OSDMessageQueue::pollEvent\28Common::Event&\29
[asyncify] Common::QuickTimeParser::readSMI\28Common::QuickTimeParser::Atom\29 can change the state due to Common::ReadStream::readStream\28unsigned\20int\29
[asyncify] virtual\20thunk\20to\20Common::SeekableSubReadStream::seek\28long\20long\2c\20int\29 can change the state due to Common::SeekableSubReadStream::seek\28long\20long\2c\20int\29
[asyncify] OSystem_SDL::quit\28\29 can change the state due to OSystem::destroy\28\29
[asyncify] OSystem_SDL::fatalError\28\29 can change the state due to OSystem::destroy\28\29
[asyncify] GUI::ThemeEngine::themeConfigParseHeader\28Common::String\2c\20Common::String&\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] GUI::parseBoolean\28Common::String\20const&\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] GUI::ThemeParser::parseDrawStep\28Common::XMLParser::ParserNode*\2c\20Graphics::DrawStep*\2c\20bool\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] GUI::ThemeParser::resolutionCheck\28Common::String\20const&\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] Common::Keymapper::initKeymap\28Common::Keymap*\2c\20Common::ConfigManager::Domain*\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] MidiDriver_SEQ::open\28\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] MidiDriver_SEQ::send\28unsigned\20int\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] MidiDriver_SEQ::sysEx\28unsigned\20char\20const*\2c\20unsigned\20short\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] MidiDriver_TIMIDITY::open\28\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] MidiDriver_TIMIDITY::connect_to_server\28char\20const*\2c\20char\20const*\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] MidiDriver_TIMIDITY::timidity_ctl_command\28char\20const*\2c\20...\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] MidiDriver_TIMIDITY::timidity_sync\28int\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] MidiDriver_TIMIDITY::timidity_write_data\28void\20const*\2c\20unsigned\20long\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] MidiDriver_TIMIDITY::send\28unsigned\20int\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] SdlGraphicsManager::initSizeHint\28Common::Array<Graphics::Mode>\20const&\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] OpenGL::ShaderManager::query\28OpenGL::ShaderManager::ShaderUsage\29\20const can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] OpenGL::LibRetro::PresetParser::lookUpValue\28Common::String\20const&\2c\20unsigned\20int*\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] OpenGL::OpenGLGraphicsManager::setGraphicsMode\28int\2c\20unsigned\20int\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] Image::Indeo3Decoder::decodeChunk\28unsigned\20char*\2c\20unsigned\20char*\2c\20int\2c\20int\2c\20unsigned\20char\20const*\2c\20unsigned\20int\2c\20unsigned\20char\20const*\2c\20unsigned\20char\20const*\2c\20int\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] Image::Indeo4Decoder::decodePictureHeader\28\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] Image::Indeo4Decoder::decodeBandHeader\28Image::Indeo::IVIBandDesc*\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] Image::Indeo4Decoder::decodeMbInfo\28Image::Indeo::IVIBandDesc*\2c\20Image::Indeo::IVITile*\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] Image::Indeo4Decoder::decodeRLETransparency\28short\20\28*\29\20\5b2\5d\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] Image::Indeo4Decoder::decodeTransparency\28\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] Image::Indeo5Decoder::decodePictureHeader\28\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] Image::Indeo5Decoder::decodeBandHeader\28Image::Indeo::IVIBandDesc*\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] Image::Indeo5Decoder::decodeMbInfo\28Image::Indeo::IVIBandDesc*\2c\20Image::Indeo::IVITile*\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] Image::Indeo::IVIHuffDesc::createHuffFromDesc\28Image::Indeo::VLC*\2c\20bool\29\20const can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] Image::Indeo::IVIHuffTab::decodeHuffDesc\28Image::Indeo::IVI45DecContext*\2c\20int\2c\20int\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] Image::Indeo::IVIPlaneDesc::initTiles\28Image::Indeo::IVIPlaneDesc*\2c\20int\2c\20int\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] Image::Indeo::VLC::buildTable\28int\2c\20int\2c\20Image::Indeo::VLCcode*\2c\20int\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] Graphics::TTFFont::cacheGlyph\28Graphics::TTFFont::Glyph&\2c\20unsigned\20int\29\20const can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] OpenGL::Shader::getAttribute\28char\20const*\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] AdLibPart::sysEx_customInstrument\28unsigned\20int\2c\20unsigned\20char\20const*\2c\20unsigned\20int\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] AdLibPercussionChannel::sysEx_customInstrument\28unsigned\20int\2c\20unsigned\20char\20const*\2c\20unsigned\20int\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] OPL::Config::create\28signed\20char\2c\20OPL::Config::OplType\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] OPL::MAME::OPL::read\28int\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] Common::BaseString<char>::assignAppend\28char\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] Common::ConfigManager::addDomain\28Common::String\20const&\2c\20Common::ConfigManager::Domain\20const&\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] Common::DebugManager::addDebugChannels\28DebugChannelDef\20const*\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] Common::punycode_encodefilename\28Common::U32String\20const&\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] Common::strcpy_s\28char*\2c\20unsigned\20long\2c\20char\20const*\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] Common::vsprintf_s\28char*\2c\20unsigned\20long\2c\20char\20const*\2c\20void*\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] OSystem::isConnectionLimited\28\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] Common::UnicodeBiDiText::UnicodeBiDiText\28Common::U32String\20const&\2c\20Common::BiDiParagraph\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] Common::U32String::vformat\28char32_t\20const*\2c\20char32_t\20const*\2c\20Common::U32String&\2c\20void*\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] Common::INIFile::hasKey\28Common::String\20const&\2c\20Common::String\20const&\29\20const can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] Common::INIFile::getKey\28Common::String\20const&\2c\20Common::String\20const&\2c\20Common::String&\29\20const can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] Common::INIFile::setKey\28Common::String\20const&\2c\20Common::String\20const&\2c\20Common::String\20const&\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] OSystem_SDL::openUrl\28Common::String\20const&\29 can change the state due to warning\28char\20const*\2c\20...\29
[asyncify] Common::Array<GUI::ExistingSave>::push_back\28GUI::ExistingSave\20const&\29 can change the state due to error\28char\20const*\2c\20...\29
[asyncify] Common::Array<GUI::DropdownButtonWidget::Entry>::push_back\28GUI::DropdownButtonWidget::Entry\20const&\29 can change the state due to error\28char\20const*\2c\20...\29
[asyncify] void\20Common::unknownKeyError<Common::U32String>\28Common::U32String\29 can change the state due to error\28char\20const*\2c\20...\29
[asyncify] GUI::GroupedListWidget::startEditMode\28\29 can change the state due to error\28char\20const*\2c\20...\29
[asyncify] GUI::ListWidget::stripGUIformatting\28Common::U32String\20const&\29 can change the state due to error\28char\20const*\2c\20...\29
[asyncify] Common::Array<GUI::ListWidget::ListData>::push_back\28GUI::ListWidget::ListData\20const&\29 can change the state due to error\28char\20const*\2c\20...\29
[asyncify] Common::Keymap::addAction\28Common::Action*\29 can change the state due to error\28char\20const*\2c\20...\29
[asyncify] Common::Keymap::getActionMapping\28Common::Action*\29\20const can change the state due to error\28char\20const*\2c\20...\29
[asyncify] WindowedGraphicsManager::convertWindowToVirtual\28int\2c\20int\29\20const can change the state due to error\28char\20const*\2c\20...\29
[asyncify] SurfaceSdlGraphicsManager::grabOverlay\28Graphics::Surface&\29\20const can change the state due to error\28char\20const*\2c\20...\29
[asyncify] Common::Array<OpenGLSdlGraphics3dManager::OpenGLPixelFormat>::push_back\28OpenGLSdlGraphics3dManager::OpenGLPixelFormat\20const&\29 can change the state due to error\28char\20const*\2c\20...\29
[asyncify] Image::pngError\28png_struct_def*\2c\20char\20const*\29 can change the state due to error\28char\20const*\2c\20...\29
[asyncify] Image::BitmapRawDecoder::getPixelFormat\28\29\20const can change the state due to error\28char\20const*\2c\20...\29
[asyncify] Common::BitStreamImpl<Common::BitStreamMemoryStream\2c\20unsigned\20long\20long\2c\208\2c\20false\2c\20true>::getBits\28unsigned\20long\29 can change the state due to error\28char\20const*\2c\20...\29
[asyncify] Image::Indeo::IVIPlaneDesc::initPlanes\28Image::Indeo::IVIPlaneDesc*\2c\20Image::Indeo::IVIPicConfig\20const*\2c\20bool\29 can change the state due to error\28char\20const*\2c\20...\29
[asyncify] Graphics::AmigaFont::mapChar\28unsigned\20int\29\20const can change the state due to error\28char\20const*\2c\20...\29
[asyncify] Graphics::Surface::fillRect\28Common::Rect\2c\20unsigned\20int\29 can change the state due to error\28char\20const*\2c\20...\29
[asyncify] Graphics::Surface::convertToInPlace\28Graphics::PixelFormat\20const&\2c\20unsigned\20char\20const*\29 can change the state due to error\28char\20const*\2c\20...\29
[asyncify] Graphics::Surface::convertTo\28Graphics::PixelFormat\20const&\2c\20unsigned\20char\20const*\2c\20int\2c\20unsigned\20char\20const*\2c\20int\2c\20Graphics::DitherMethod\29\20const can change the state due to error\28char\20const*\2c\20...\29
[asyncify] Graphics::VectorRenderer::stepGetPositions\28Graphics::DrawStep\20const&\2c\20Common::Rect\20const&\2c\20unsigned\20short&\2c\20unsigned\20short&\2c\20unsigned\20short&\2c\20unsigned\20short&\29 can change the state due to error\28char\20const*\2c\20...\29
[asyncify] OPL::EmulatedOPL::EmulatedOPL\28\29 can change the state due to error\28char\20const*\2c\20...\29
[asyncify] Common::ConfigManager::removeKey\28Common::String\20const&\2c\20Common::String\20const&\29 can change the state due to error\28char\20const*\2c\20...\29
[asyncify] Common::ConfigManager::get\28Common::String\20const&\2c\20Common::String\20const&\29\20const can change the state due to error\28char\20const*\2c\20...\29
[asyncify] Common::ConfigManager::getInt\28Common::String\20const&\2c\20Common::String\20const&\29\20const can change the state due to error\28char\20const*\2c\20...\29
[asyncify] Common::ConfigManager::getBool\28Common::String\20const&\2c\20Common::String\20const&\29\20const can change the state due to error\28char\20const*\2c\20...\29
[asyncify] Common::ConfigManager::set\28Common::String\20const&\2c\20Common::String\20const&\2c\20Common::String\20const&\29 can change the state due to error\28char\20const*\2c\20...\29
[asyncify] void\20Common::unknownKeyError<Common::String>\28Common::String\29 can change the state due to error\28char\20const*\2c\20...\29
[asyncify] Common::Array<ADDetectedGame>::push_back\28ADDetectedGame\20const&\29 can change the state due to error\28char\20const*\2c\20...\29
[asyncify] Common::Array<bool>::allocCapacity\28unsigned\20int\29 can change the state due to error\28char\20const*\2c\20...\29
[asyncify] byn$mgfn-shared$Common::Array<Agi::WagProperty>::allocCapacity\28unsigned\20int\29 can change the state due to error\28char\20const*\2c\20...\29
[asyncify] Common::Array<Glk::ChunkEntry>::push_back\28Glk::ChunkEntry\20const&\29 can change the state due to error\28char\20const*\2c\20...\29
[asyncify] byn$mgfn-shared$Common::Array<PlainGameDescriptor>::allocCapacity\28unsigned\20int\29 can change the state due to error\28char\20const*\2c\20...\29
[asyncify] OSystem_SDL::initSDL\28\29 can change the state due to error\28char\20const*\2c\20...\29
[asyncify] Common::Array<QualifiedGameDescriptor>::insert_aux\28QualifiedGameDescriptor*\2c\20QualifiedGameDescriptor\20const*\2c\20QualifiedGameDescriptor\20const*\29 can change the state due to error\28char\20const*\2c\20...\29
[asyncify] generatePreferredTarget\28ADGameDescription\20const*\2c\20int\2c\20Common::String\29 can change the state due to error\28char\20const*\2c\20...\29
[asyncify] PauseToken::operator=\28PauseToken&&\29 can change the state due to error\28char\20const*\2c\20...\29
[asyncify] Common::Array<SaveStateDescriptor>::insert_aux\28SaveStateDescriptor*\2c\20SaveStateDescriptor\20const*\2c\20SaveStateDescriptor\20const*\29 can change the state due to error\28char\20const*\2c\20...\29
[asyncify] GUI::ThemeEval::getVar\28Common::String\20const&\29 can change the state due to error\28char\20const*\2c\20...\29
[asyncify] Common::GzioReadStream::readAtOffset\28long\20long\2c\20unsigned\20char*\2c\20unsigned\20int\29 can change the state due to Common::GzioReadStream::parentGetByte\28\29
[asyncify] Common::ZipArchive::~ZipArchive\28\29.1 can change the state due to Common::ZipArchive::~ZipArchive\28\29
[asyncify] Common::GZipReadStream::~GZipReadStream\28\29.2 can change the state due to Common::GZipReadStream::~GZipReadStream\28\29
[asyncify] Common::GZipWriteStream::~GZipWriteStream\28\29.2 can change the state due to Common::GZipWriteStream::~GZipWriteStream\28\29
[asyncify] Common::QuickTimeParser::~QuickTimeParser\28\29 can change the state due to Common::QuickTimeParser::close\28\29
[asyncify] Common::QuickTimeParser::readMOOV\28Common::QuickTimeParser::Atom\29 can change the state due to Common::QuickTimeParser::readDefault\28Common::QuickTimeParser::Atom\29
[asyncify] Common::QuickTimeParser::readTRAK\28Common::QuickTimeParser::Atom\29 can change the state due to Common::QuickTimeParser::readDefault\28Common::QuickTimeParser::Atom\29
[asyncify] Common::QuickTimeParser::init\28\29 can change the state due to Common::QuickTimeParser::Track::~Track\28\29
[asyncify] Common::NEResources::~NEResources\28\29 can change the state due to Common::NEResources::clear\28\29
[asyncify] Common::PEResources::~PEResources\28\29 can change the state due to Common::PEResources::clear\28\29
[asyncify] GUI::ThemeParser::~ThemeParser\28\29 can change the state due to Common::XMLParser::~XMLParser\28\29
[asyncify] GUI::MetadataParser::~MetadataParser\28\29 can change the state due to Common::XMLParser::~XMLParser\28\29
[asyncify] GUI::ThemeParser::parserCallback_defaults\28Common::XMLParser::ParserNode*\29 can change the state due to Common::XMLParser::parserError\28Common::String\20const&\29
[asyncify] GUI::ThemeParser::parserCallback_text_color\28Common::XMLParser::ParserNode*\29 can change the state due to Common::XMLParser::parserError\28Common::String\20const&\29
[asyncify] GUI::ThemeParser::parserCallback_cursor\28Common::XMLParser::ParserNode*\29 can change the state due to Common::XMLParser::parserError\28Common::String\20const&\29
[asyncify] GUI::ThemeParser::parserCallback_text\28Common::XMLParser::ParserNode*\29 can change the state due to Common::XMLParser::parserError\28Common::String\20const&\29
[asyncify] GUI::ThemeParser::parserCallback_color\28Common::XMLParser::ParserNode*\29 can change the state due to Common::XMLParser::parserError\28Common::String\20const&\29
[asyncify] GUI::ThemeParser::parserCallback_drawstep\28Common::XMLParser::ParserNode*\29 can change the state due to Common::XMLParser::parserError\28Common::String\20const&\29
[asyncify] GUI::ThemeParser::parserCallback_drawdata\28Common::XMLParser::ParserNode*\29 can change the state due to Common::XMLParser::parserError\28Common::String\20const&\29
[asyncify] GUI::ThemeParser::parserCallback_def\28Common::XMLParser::ParserNode*\29 can change the state due to Common::XMLParser::parserError\28Common::String\20const&\29
[asyncify] GUI::ThemeParser::parserCallback_widget\28Common::XMLParser::ParserNode*\29 can change the state due to Common::XMLParser::parserError\28Common::String\20const&\29
[asyncify] GUI::ThemeParser::parserCallback_layout\28Common::XMLParser::ParserNode*\29 can change the state due to Common::XMLParser::parserError\28Common::String\20const&\29
[asyncify] MT32Emu::PartialManager::produceOutput\28int\2c\20short*\2c\20short*\2c\20unsigned\20int\29 can change the state due to MT32Emu::Partial::deactivate\28\29
[asyncify] MT32Emu::PartialManager::produceOutput\28int\2c\20float*\2c\20float*\2c\20unsigned\20int\29 can change the state due to MT32Emu::Partial::deactivate\28\29
[asyncify] MT32Emu::Poly::noteOff\28bool\29 can change the state due to MT32Emu::Poly::setState\28MT32Emu::PolyState\29
[asyncify] MT32Emu::Poly::startDecay\28\29 can change the state due to MT32Emu::Poly::setState\28MT32Emu::PolyState\29
[asyncify] MT32Emu::Part::noteOn\28unsigned\20int\2c\20unsigned\20int\29 can change the state due to MT32Emu::Part::playPoly\28MT32Emu::PatchCache\20const*\2c\20MT32Emu::MemParams::RhythmTemp\20const*\2c\20unsigned\20int\2c\20unsigned\20int\2c\20unsigned\20int\29
[asyncify] MT32Emu::BReverbModelImpl<short>::~BReverbModelImpl\28\29 can change the state due to MT32Emu::BReverbModelImpl<short>::close\28\29
[asyncify] MT32Emu::BReverbModelImpl<float>::~BReverbModelImpl\28\29 can change the state due to MT32Emu::BReverbModelImpl<short>::close\28\29
[asyncify] MT32Emu::Service::addROMData\28unsigned\20char\20const*\2c\20unsigned\20long\2c\20char\20const\20\28*\29\20\5b41\5d\29 can change the state due to MT32Emu::ROMImage::freeROMImage\28MT32Emu::ROMImage\20const*\29
[asyncify] MT32Emu::ROMImage::makeROMImage\28MT32Emu::File*\2c\20MT32Emu::ROMInfo\20const*\20const*\29 can change the state due to MT32Emu::ROMImage::ROMImage\28MT32Emu::File*\2c\20bool\2c\20MT32Emu::ROMInfo\20const*\20const*\29
[asyncify] non-virtual\20thunk\20to\20MT32Emu::AccurateLowPassFilter::process\28float\29 can change the state due to MT32Emu::AccurateLowPassFilter::process\28float\29
[asyncify] MT32Emu::Synth::close\28\29 can change the state due to MT32Emu::Synth::dispose\28\29
[asyncify] MT32Emu::Partial::getAmpValue\28\29 can change the state due to MT32Emu::Synth::printDebug\28char\20const*\2c\20...\29
[asyncify] MT32Emu::Partial::canProduceOutput\28\29 can change the state due to MT32Emu::Synth::printDebug\28char\20const*\2c\20...\29
[asyncify] MT32Emu::RhythmPart::setTimbre\28MT32Emu::TimbreParam*\29 can change the state due to MT32Emu::Synth::printDebug\28char\20const*\2c\20...\29
[asyncify] MT32Emu::RhythmPart::getAbsTimbreNum\28\29\20const can change the state due to MT32Emu::Synth::printDebug\28char\20const*\2c\20...\29
[asyncify] MT32Emu::Synth::initTimbres\28unsigned\20short\2c\20unsigned\20short\2c\20unsigned\20short\2c\20unsigned\20short\2c\20bool\29 can change the state due to MT32Emu::Synth::printDebug\28char\20const*\2c\20...\29
[asyncify] MT32Emu::Synth::playSysexNow\28unsigned\20char\20const*\2c\20unsigned\20int\29 can change the state due to MT32Emu::Synth::printDebug\28char\20const*\2c\20...\29
[asyncify] MT32Emu::Renderer::printDebug\28char\20const*\29\20const can change the state due to MT32Emu::Synth::printDebug\28char\20const*\2c\20...\29
[asyncify] MT32Emu::DefaultMidiStreamParser::printDebug\28char\20const*\29 can change the state due to MT32Emu::Synth::printDebug\28char\20const*\2c\20...\29
[asyncify] MT32Emu::Synth::refreshSystem\28\29 can change the state due to MT32Emu::Synth::refreshSystemReverbParameters\28\29
[asyncify] MT32Emu::Synth::playMsg\28unsigned\20int\29 can change the state due to MT32Emu::Synth::playMsg\28unsigned\20int\2c\20unsigned\20int\29
[asyncify] MT32Emu::Synth::playSysex\28unsigned\20char\20const*\2c\20unsigned\20int\29 can change the state due to MT32Emu::Synth::playSysex\28unsigned\20char\20const*\2c\20unsigned\20int\2c\20unsigned\20int\29
[asyncify] MT32Emu::Service::writeSysex\28unsigned\20char\2c\20unsigned\20char\20const*\2c\20unsigned\20int\29 can change the state due to MT32Emu::Synth::writeSysex\28unsigned\20char\2c\20unsigned\20char\20const*\2c\20unsigned\20int\29
[asyncify] MT32Emu::RendererImpl<short>::render\28short*\2c\20unsigned\20int\29 can change the state due to MT32Emu::RendererImpl<short>::doRender\28short*\2c\20unsigned\20int\29
[asyncify] MT32Emu::RendererImpl<short>::render\28float*\2c\20unsigned\20int\29 can change the state due to MT32Emu::RendererImpl<short>::doRender\28short*\2c\20unsigned\20int\29
[asyncify] MT32Emu::RendererImpl<short>::renderStreams\28MT32Emu::DACOutputStreams<short>\20const&\2c\20unsigned\20int\29 can change the state due to MT32Emu::RendererImpl<short>::doRenderStreams\28MT32Emu::DACOutputStreams<short>\20const&\2c\20unsigned\20int\29
[asyncify] MT32Emu::RendererImpl<short>::renderStreams\28MT32Emu::DACOutputStreams<float>\20const&\2c\20unsigned\20int\29 can change the state due to MT32Emu::RendererImpl<short>::doRenderStreams\28MT32Emu::DACOutputStreams<short>\20const&\2c\20unsigned\20int\29
[asyncify] MT32Emu::RendererImpl<float>::render\28short*\2c\20unsigned\20int\29 can change the state due to MT32Emu::RendererImpl<float>::doRender\28float*\2c\20unsigned\20int\29
[asyncify] MT32Emu::RendererImpl<float>::render\28float*\2c\20unsigned\20int\29 can change the state due to MT32Emu::RendererImpl<float>::doRender\28float*\2c\20unsigned\20int\29
[asyncify] MT32Emu::RendererImpl<float>::renderStreams\28MT32Emu::DACOutputStreams<short>\20const&\2c\20unsigned\20int\29 can change the state due to MT32Emu::RendererImpl<float>::doRenderStreams\28MT32Emu::DACOutputStreams<float>\20const&\2c\20unsigned\20int\29
[asyncify] MT32Emu::RendererImpl<float>::renderStreams\28MT32Emu::DACOutputStreams<float>\20const&\2c\20unsigned\20int\29 can change the state due to MT32Emu::RendererImpl<float>::doRenderStreams\28MT32Emu::DACOutputStreams<float>\20const&\2c\20unsigned\20int\29
[asyncify] MT32Emu::SynthWrapper::getOutputSamples\28float*\2c\20unsigned\20int\29 can change the state due to MT32Emu::Synth::render\28float*\2c\20unsigned\20int\29
[asyncify] non-virtual\20thunk\20to\20MT32Emu::DefaultMidiStreamParser::handleShortMessage\28unsigned\20int\29 can change the state due to MT32Emu::DefaultMidiStreamParser::handleShortMessage\28unsigned\20int\29
[asyncify] non-virtual\20thunk\20to\20MT32Emu::DefaultMidiStreamParser::handleSysex\28unsigned\20char\20const*\2c\20unsigned\20int\29 can change the state due to MT32Emu::DefaultMidiStreamParser::handleSysex\28unsigned\20char\20const*\2c\20unsigned\20int\29
[asyncify] MT32Emu::Service::freeContext\28\29 can change the state due to mt32emu_free_context
[asyncify] af_latin_metrics_init can change the state due to FT_Get_Advance
[asyncify] af_cjk_metrics_init can change the state due to FT_Get_Advance
[asyncify] af_indic_metrics_init can change the state due to FT_Get_Advance
[asyncify] cf2_interpT2CharString can change the state due to cf2_glyphpath_lineTo
[asyncify] cf2_glyphpath_moveTo can change the state due to cf2_glyphpath_lineTo
[asyncify] cf2_doFlex can change the state due to cf2_glyphpath_curveTo
[asyncify] cff_subfont_load can change the state due to cff_parser_run
[asyncify] T42_GlyphSlot_Init can change the state due to FT_New_GlyphSlot
[asyncify] af_cjk_metrics_init_widths can change the state due to FT_Load_Glyph
[asyncify] af_face_globals_new can change the state due to FT_Get_Char_Index
[asyncify] open_face_from_buffer can change the state due to FT_Open_Face
[asyncify] T42_Size_Init can change the state due to FT_New_Size
[asyncify] Graphics::TTFLibrary::~TTFLibrary\28\29 can change the state due to destroy_face
[asyncify] FT_Done_Face can change the state due to destroy_face
[asyncify] T42_Size_Done can change the state due to FT_Done_Size
[asyncify] T42_Size_Select can change the state due to FT_Select_Size
[asyncify] T42_Size_Request can change the state due to FT_Request_Size
[asyncify] PCF_Face_Init can change the state due to FT_CMap_New
[asyncify] FNT_Face_Init can change the state due to FT_CMap_New
[asyncify] Common::Singleton<Graphics::TTFLibrary>::instance\28\29 can change the state due to FT_Add_Module
[asyncify] t1_decoder_init can change the state due to ft_module_get_service
[asyncify] FT_Stream_Free can change the state due to FT_Stream_Close
[asyncify] PCF_Face_Done can change the state due to FT_Stream_Close
[asyncify] cff_index_get_pointers can change the state due to FT_Stream_Seek
[asyncify] cff_index_access_element can change the state due to FT_Stream_Seek
[asyncify] open_face_PS_from_sfnt_stream can change the state due to FT_Stream_Seek
[asyncify] IsMacResource can change the state due to FT_Stream_Seek
[asyncify] FT_Raccess_Get_DataOffsets can change the state due to FT_Stream_Seek
[asyncify] ft_gzip_check_header can change the state due to FT_Stream_Seek
[asyncify] ft_lzw_stream_io can change the state due to FT_Stream_Seek
[asyncify] ft_lzwstate_io can change the state due to FT_Stream_Seek
[asyncify] pcf_load_font can change the state due to FT_Stream_Seek
[asyncify] PCF_Glyph_Load can change the state due to FT_Stream_Seek
[asyncify] pfr_slot_load can change the state due to FT_Stream_Seek
[asyncify] pfr_glyph_load_rec can change the state due to FT_Stream_Seek
[asyncify] pfr_face_get_kerning can change the state due to FT_Stream_Seek
[asyncify] tt_face_goto_table can change the state due to FT_Stream_Seek
[asyncify] tt_face_load_font_dir can change the state due to FT_Stream_Seek
[asyncify] tt_face_get_metrics can change the state due to FT_Stream_Seek
[asyncify] sfnt_get_ps_name can change the state due to FT_Stream_Seek
[asyncify] tt_face_find_bdf_prop can change the state due to FT_Stream_Seek
[asyncify] TT_Access_Glyph_Frame can change the state due to FT_Stream_Seek
[asyncify] TT_Vary_Apply_Glyph_Deltas can change the state due to FT_Stream_Seek
[asyncify] check_type1_format can change the state due to FT_Stream_Seek
[asyncify] fnt_font_load can change the state due to FT_Stream_Seek
[asyncify] cff_index_init can change the state due to FT_Stream_Skip
[asyncify] raccess_guess_apple_generic can change the state due to FT_Stream_Skip
[asyncify] pcf_get_accel can change the state due to FT_Stream_Skip
[asyncify] tt_face_load_any can change the state due to FT_Stream_ReadAt
[asyncify] ft_lzwstate_get_code can change the state due to FT_Stream_TryRead
[asyncify] FT_Stream_ExtractFrame can change the state due to FT_Stream_EnterFrame
[asyncify] FT_Stream_ReadFields can change the state due to FT_Stream_EnterFrame
[asyncify] cff_index_get_name can change the state due to ft_mem_alloc
[asyncify] cf2_decoder_parse_charstrings can change the state due to ft_mem_alloc
[asyncify] _bdf_parse_start can change the state due to ft_mem_alloc
[asyncify] hash_insert can change the state due to ft_mem_alloc
[asyncify] FT_Stream_New can change the state due to ft_mem_alloc
[asyncify] ft_glyphslot_alloc_bitmap can change the state due to ft_mem_alloc
[asyncify] raccess_make_file_name can change the state due to ft_mem_alloc
[asyncify] raccess_guess_darwin_newvfs can change the state due to ft_mem_alloc
[asyncify] raccess_guess_darwin_hfsplus can change the state due to ft_mem_alloc
[asyncify] ft_gzip_alloc can change the state due to ft_mem_alloc
[asyncify] pfr_aux_name_load can change the state due to ft_mem_alloc
[asyncify] pfr_extra_item_load_font_id can change the state due to ft_mem_alloc
[asyncify] pfr_extra_item_load_kerning_pairs can change the state due to ft_mem_alloc
[asyncify] ps_table_done can change the state due to ft_mem_alloc
[asyncify] ps_table_add can change the state due to ft_mem_alloc
[asyncify] ps_parser_load_field can change the state due to ft_mem_alloc
[asyncify] afm_parser_init can change the state due to ft_mem_alloc
[asyncify] psh_globals_new can change the state due to ft_mem_alloc
[asyncify] ft_black_new can change the state due to ft_mem_alloc
[asyncify] T1_Get_MM_Var can change the state due to ft_mem_alloc
[asyncify] t1_allocate_blend can change the state due to ft_mem_alloc
[asyncify] af_glyph_hints_reload can change the state due to ft_mem_realloc
[asyncify] af_latin_hints_compute_segments can change the state due to ft_mem_realloc
[asyncify] af_axis_hints_new_edge can change the state due to ft_mem_realloc
[asyncify] FT_GlyphLoader_CheckPoints can change the state due to ft_mem_realloc
[asyncify] FT_GlyphLoader_CheckSubGlyphs can change the state due to ft_mem_realloc
[asyncify] cf2_arrstack_push can change the state due to ft_mem_realloc
[asyncify] _bdf_list_split can change the state due to ft_mem_realloc
[asyncify] _bdf_add_property can change the state due to ft_mem_realloc
[asyncify] _bdf_parse_glyphs can change the state due to ft_mem_realloc
[asyncify] ft_var_readpackedpoints can change the state due to ft_mem_realloc
[asyncify] pfr_extra_item_load_bitmap_info can change the state due to ft_mem_realloc
[asyncify] pfr_extra_item_load_stem_snaps can change the state due to ft_mem_realloc
[asyncify] ps_table_new can change the state due to ft_mem_realloc
[asyncify] afm_parser_parse can change the state due to ft_mem_realloc
[asyncify] ps_hints_apply can change the state due to ft_mem_realloc
[asyncify] psh_hint_table_init can change the state due to ft_mem_realloc
[asyncify] ps_hints_t1reset can change the state due to ft_mem_realloc
[asyncify] ps_hints_t1stem3 can change the state due to ft_mem_realloc
[asyncify] ps_dimension_end can change the state due to ft_mem_realloc
[asyncify] ps_dimension_add_t1stem can change the state due to ft_mem_realloc
[asyncify] ps_dimension_set_mask_bits can change the state due to ft_mem_realloc
[asyncify] tt_cmap14_variants can change the state due to ft_mem_realloc
[asyncify] tt_cmap14_char_variants can change the state due to ft_mem_realloc
[asyncify] tt_cmap14_variant_chars can change the state due to ft_mem_realloc
[asyncify] tt_cmap14_get_def_chars can change the state due to ft_mem_realloc
[asyncify] tt_name_entry_ascii_from_other can change the state due to ft_mem_realloc
[asyncify] tt_name_entry_ascii_from_utf16 can change the state due to ft_mem_realloc
[asyncify] tt_slot_init can change the state due to ft_mem_realloc
[asyncify] TT_Load_Context can change the state due to ft_mem_realloc
[asyncify] ft_var_readpackeddeltas can change the state due to ft_mem_realloc
[asyncify] Update_Max can change the state due to ft_mem_realloc
[asyncify] FNT_Load_Glyph can change the state due to ft_mem_realloc
[asyncify] FT_Bitmap_Convert can change the state due to ft_mem_qrealloc
[asyncify] af_glyph_hints_done can change the state due to ft_mem_free
[asyncify] BDF_Face_Done can change the state due to ft_mem_free
[asyncify] cff_cmap_unicode_done can change the state due to ft_mem_free
[asyncify] bdf_free_font can change the state due to ft_mem_free
[asyncify] T42_Face_Done can change the state due to ft_mem_free
[asyncify] ft_glyphslot_set_bitmap can change the state due to ft_mem_free
[asyncify] memory_stream_close can change the state due to ft_mem_free
[asyncify] FT_Stream_ReleaseFrame can change the state due to ft_mem_free
[asyncify] FT_Stream_ExitFrame can change the state due to ft_mem_free
[asyncify] ft_gzip_free can change the state due to ft_mem_free
[asyncify] ft_gzip_stream_close can change the state due to ft_mem_free
[asyncify] ft_lzw_stream_close can change the state due to ft_mem_free
[asyncify] pfr_face_done can change the state due to ft_mem_free
[asyncify] pfr_slot_done can change the state due to ft_mem_free
[asyncify] ps_table_release can change the state due to ft_mem_free
[asyncify] afm_parser_done can change the state due to ft_mem_free
[asyncify] psh_globals_destroy can change the state due to ft_mem_free
[asyncify] ps_dimension_done can change the state due to ft_mem_free
[asyncify] ft_black_done can change the state due to ft_mem_free
[asyncify] tt_cmap14_done can change the state due to ft_mem_free
[asyncify] tt_face_free_name can change the state due to ft_mem_free
[asyncify] tt_face_free_ps_names can change the state due to ft_mem_free
[asyncify] tt_size_done_bytecode can change the state due to ft_mem_free
[asyncify] tt_glyphzone_done can change the state due to ft_mem_free
[asyncify] T1_Done_Blend can change the state due to ft_mem_free
[asyncify] T1_Face_Done can change the state due to ft_mem_free
[asyncify] cid_face_done can change the state due to ft_mem_free
[asyncify] FNT_Face_Done can change the state due to ft_mem_free
[asyncify] byn$mgfn-shared$raccess_guess_darwin_ufs_export can change the state due to ft_mem_free
[asyncify] ft_gzip_stream_io can change the state due to ft_gzip_file_io
[asyncify] ft_black_render can change the state due to Render_Single_Pass
[asyncify] Conic_To can change the state due to Bezier_Up
[asyncify] Cubic_To can change the state due to Bezier_Up
[asyncify] tt_sbit_decoder_load_compound can change the state due to tt_sbit_decoder_load_image
[asyncify] sfnt_get_glyph_name can change the state due to tt_face_get_ps_name
[asyncify] sfnt_get_name_index can change the state due to tt_face_get_ps_name
[asyncify] ft_smooth_render can change the state due to ft_smooth_render_generic
[asyncify] ft_smooth_render_lcd can change the state due to ft_smooth_render_generic
[asyncify] ft_smooth_render_lcd_v can change the state due to ft_smooth_render_generic
[asyncify] png_check_IHDR can change the state due to png_error
[asyncify] png_combine_row can change the state due to png_error
[asyncify] png_benign_error can change the state due to png_error
[asyncify] png_chunk_error can change the state due to png_error
[asyncify] png_app_warning can change the state due to png_error
[asyncify] png_app_error can change the state due to png_error
[asyncify] png_chunk_report can change the state due to png_error
[asyncify] png_default_read_data can change the state due to png_error
[asyncify] png_read_chunk_header can change the state due to png_error
[asyncify] png_handle_IHDR can change the state due to png_error
[asyncify] png_read_IDAT_data can change the state due to png_error
[asyncify] png_read_start_row can change the state due to png_error
[asyncify] png_default_write_data can change the state due to png_error
[asyncify] png_write_complete_chunk can change the state due to png_error
[asyncify] png_compress_IDAT can change the state due to png_error
[asyncify] png_write_tEXt can change the state due to png_error
[asyncify] png_write_zTXt can change the state due to png_error
[asyncify] png_write_iTXt can change the state due to png_error
[asyncify] png_destroy_read_struct can change the state due to png_destroy_png_struct
[asyncify] png_destroy_write_struct can change the state due to png_destroy_png_struct
[asyncify] png_zfree can change the state due to png_free
[asyncify] png_destroy_info_struct can change the state due to png_free
[asyncify] png_free_data can change the state due to png_free
[asyncify] png_colorspace_sync can change the state due to png_free
[asyncify] png_destroy_gamma_table can change the state due to png_free
[asyncify] png_decompress_chunk can change the state due to png_free
[asyncify] png_cache_unknown_chunk can change the state due to png_free
[asyncify] png_set_text_2 can change the state due to png_free
[asyncify] png_build_16bit_table can change the state due to png_calloc
[asyncify] png_create_info_struct can change the state due to png_malloc_base
[asyncify] png_text_compress can change the state due to png_malloc_base
[asyncify] png_zalloc can change the state due to png_malloc_warn
[asyncify] png_crc_finish can change the state due to png_read_data
[asyncify] png_inflate_read can change the state due to png_read_data
[asyncify] png_write_eXIf can change the state due to png_write_data
[asyncify] png_deflate_claim can change the state due to deflateInit2_
[asyncify] png_inflate_claim can change the state due to inflateReset2
[asyncify] png_inflate can change the state due to inflate.1
[asyncify] decode_mcu_DC_refine can change the state due to process_restart
[asyncify] self_destruct can change the state due to free_pool
[asyncify] realize_virt_arrays can change the state due to alloc_barray
[asyncify] SDL_OpenAudio can change the state due to SDL_InitSubSystem
[asyncify] SdlMixerManager::~SdlMixerManager\28\29 can change the state due to SDL_QuitSubSystem
[asyncify] SdlTimerManager::~SdlTimerManager\28\29 can change the state due to SDL_QuitSubSystem
[asyncify] SDL_CloseAudio can change the state due to close_audio_device
[asyncify] SdlMixerManager::startAudio\28\29 can change the state due to SDL_PauseAudio
[asyncify] SdlMixerManager::resumeAudio\28\29 can change the state due to SDL_PauseAudio
[asyncify] SDL_AudioStreamPut can change the state due to SDL_AudioStreamPutInternal
[asyncify] SDL_ResampleCVT_c1 can change the state due to SDL_ResampleCVT
[asyncify] SDL_ResampleCVT_c2 can change the state due to SDL_ResampleCVT
[asyncify] SDL_ResampleCVT_c4 can change the state due to SDL_ResampleCVT
[asyncify] SDL_ResampleCVT_c6 can change the state due to SDL_ResampleCVT
[asyncify] SDL_ResampleCVT_c8 can change the state due to SDL_ResampleCVT
[asyncify] SdlEventSource::handleJoystickRemoved\28SDL_JoyDeviceEvent\20const&\2c\20Common::Event&\29 can change the state due to SDL_SetError
[asyncify] SdlWindow::mouseIsGrabbed\28\29\20const can change the state due to SDL_SetError
[asyncify] SDL_BuildAudioCVT can change the state due to SDL_SetError
[asyncify] SDL_AddAudioCVTFilter can change the state due to SDL_SetError
[asyncify] SDL_PrivateGameControllerAddMapping can change the state due to SDL_SetError
[asyncify] SDL_AudioStreamGet can change the state due to SDL_SetError
[asyncify] SDL_WriteToDataQueue can change the state due to SDL_SetError
[asyncify] EMSCRIPTENAUDIO_Init can change the state due to SDL_SetError
[asyncify] EMSCRIPTENAUDIO_OpenDevice can change the state due to SDL_SetError
[asyncify] SDL_Error can change the state due to SDL_SetError
[asyncify] SDL_FillRect can change the state due to SDL_SetError
[asyncify] SDL_PrivateAddMappingForGUID can change the state due to SDL_SetError
[asyncify] SDL_PrivateLoadButtonMapping can change the state due to SDL_SetError
[asyncify] SDL_PrivateGameControllerParseElement can change the state due to SDL_SetError
[asyncify] SDL_AddDollarGesture can change the state due to SDL_SetError
[asyncify] dollarNormalize can change the state due to SDL_SetError
[asyncify] SDL_JoystickGetAxis can change the state due to SDL_SetError
[asyncify] SDL_JoystickGetHat can change the state due to SDL_SetError
[asyncify] SDL_JoystickGetButton can change the state due to SDL_SetError
[asyncify] SDL_JoystickName can change the state due to SDL_SetError
[asyncify] SDL_PixelFormatEnumToMasks can change the state due to SDL_SetError
[asyncify] SDL_AllocFormat can change the state due to SDL_SetError
[asyncify] SDL_FreeFormat can change the state due to SDL_SetError
[asyncify] SDL_SetPixelFormatPalette can change the state due to SDL_SetError
[asyncify] SDL_MapSurface can change the state due to SDL_SetError
[asyncify] SDL_IntersectRect can change the state due to SDL_SetError
[asyncify] SDL_IntersectRectAndLine can change the state due to SDL_SetError
[asyncify] SW_CreateTexture can change the state due to SDL_SetError
[asyncify] SW_GetOutputSize can change the state due to SDL_SetError
[asyncify] SW_RenderReadPixels can change the state due to SDL_SetError
[asyncify] SW_CreateRenderer can change the state due to SDL_SetError
[asyncify] SDL_RWFromFile can change the state due to SDL_SetError
[asyncify] stdio_seek can change the state due to SDL_SetError
[asyncify] SDL_UpperSoftStretch can change the state due to SDL_SetError
[asyncify] SDL_CreateRGBSurfaceWithFormat can change the state due to SDL_SetError
[asyncify] SDL_SetSurfacePalette can change the state due to SDL_SetError
[asyncify] SDL_CreateRGBSurface can change the state due to SDL_SetError
[asyncify] SDL_CreateRGBSurfaceFrom can change the state due to SDL_SetError
[asyncify] SDL_SetColorKey can change the state due to SDL_SetError
[asyncify] SDL_GetColorKey can change the state due to SDL_SetError
[asyncify] EMSCRIPTEN_JoystickInit can change the state due to SDL_SetError
[asyncify] EMSCRIPTEN_JoystickOpen can change the state due to SDL_SetError
[asyncify] SDL_TLSSet can change the state due to SDL_SetError
[asyncify] SDL_EGL_GetSwapInterval can change the state due to SDL_SetError
[asyncify] SDL_GetCurrentVideoDriver can change the state due to SDL_SetError
[asyncify] SDL_GetDesktopDisplayMode can change the state due to SDL_SetError
[asyncify] SDL_GetWindowDisplayMode can change the state due to SDL_SetError
[asyncify] SDL_SetWindowFullscreen can change the state due to SDL_SetError
[asyncify] SDL_SetWindowGrab can change the state due to SDL_SetError
[asyncify] SDL_GetWindowID can change the state due to SDL_SetError
[asyncify] SDL_GetWindowFlags can change the state due to SDL_SetError
[asyncify] SDL_SetWindowData can change the state due to SDL_SetError
[asyncify] SDL_GetWindowSize can change the state due to SDL_SetError
[asyncify] SDL_GL_SetAttribute can change the state due to SDL_SetError
[asyncify] SDL_GL_GetCurrentContext can change the state due to SDL_SetError
[asyncify] SDL_ConvertPixels_YUV_to_RGB can change the state due to SDL_SetError
[asyncify] GetYUVPlanes can change the state due to SDL_SetError
[asyncify] SDL_ConvertPixels_ARGB8888_to_YUV can change the state due to SDL_SetError
[asyncify] SdlWindow::destroyWindow\28\29 can change the state due to SDL_SetError
[asyncify] SDL_AddAudioDevice can change the state due to SDL_EventState
[asyncify] SDL_AudioDetectDevices_Default can change the state due to SDL_EventState
[asyncify] SDL_PollSentinelChanged can change the state due to SDL_EventState
[asyncify] SDL_GameControllerEventWatcher can change the state due to SDL_EventState
[asyncify] SDL_PrivateGameControllerButton can change the state due to SDL_EventState
[asyncify] ResetOutput can change the state due to SDL_EventState
[asyncify] SDL_PrivateJoystickAxis can change the state due to SDL_EventState
[asyncify] SDL_PrivateJoystickButton can change the state due to SDL_EventState
[asyncify] SDL_JoystickEventState can change the state due to SDL_EventState
[asyncify] SDL_SendKeyboardKeyInternal can change the state due to SDL_EventState
[asyncify] SDL_SendMouseButton can change the state due to SDL_EventState
[asyncify] Emscripten_JoyStickDisconnected can change the state due to SDL_EventState
[asyncify] SDL_SendTouch can change the state due to SDL_EventState
[asyncify] SDL_SendTouchMotion can change the state due to SDL_EventState
[asyncify] Emscripten_HandleMouseButton can change the state due to SDL_EventState
[asyncify] Emscripten_HandleMouseFocus can change the state due to SDL_EventState
[asyncify] Emscripten_HandleFocus can change the state due to SDL_EventState
[asyncify] Emscripten_HandleTouch can change the state due to SDL_EventState
[asyncify] Emscripten_HandleKey can change the state due to SDL_EventState
[asyncify] Emscripten_HandleKeyPress can change the state due to SDL_EventState
[asyncify] SDL_PeepEvents can change the state due to SDL_PeepEventsInternal
[asyncify] SDL_SendAppEvent can change the state due to SDL_PushEvent
[asyncify] SDL_GameControllerIgnoreDevicesChanged can change the state due to SDL_LoadVIDPIDListFromHint
[asyncify] SDL_GameControllerIgnoreDevicesExceptChanged can change the state due to SDL_LoadVIDPIDListFromHint
[asyncify] SDL_IsGameController can change the state due to SDL_PrivateGetControllerMapping
[asyncify] Emscripten_CreateDevice can change the state due to SDL_SetHint
[asyncify] SdlEventSource::closeJoystick\28\29 can change the state due to SDL_JoystickClose
[asyncify] SDL_GameControllerClose can change the state due to SDL_JoystickClose
[asyncify] byn$mgfn-shared$debug_print can change the state due to SDL_LogMessageV
[asyncify] add_audio_device can change the state due to SDL_malloc
[asyncify] SDL_NewDataQueue can change the state due to SDL_malloc
[asyncify] DISKAUDIO_OpenDevice can change the state due to SDL_malloc
[asyncify] UpdateEventsForDeviceRemoval.1 can change the state due to SDL_malloc
[asyncify] SDL_SIMDAlloc can change the state due to SDL_malloc
[asyncify] SDL_ConvertPixels_SwapUVPlanes can change the state due to SDL_malloc
[asyncify] SDL_strdup can change the state due to SDL_malloc
[asyncify] SDL_AddTouch can change the state due to SDL_malloc
[asyncify] SDL_ConvertPixels_PackUVPlanes_to_NV can change the state due to SDL_malloc
[asyncify] SDL_ConvertPixels_SplitNV_to_UVPlanes can change the state due to SDL_malloc
[asyncify] Map1to1 can change the state due to SDL_calloc
[asyncify] QueueCmdSetClipRect can change the state due to SDL_calloc
[asyncify] SDL_CreateMutex can change the state due to SDL_calloc
[asyncify] Emscripten_CreateCursor can change the state due to SDL_calloc
[asyncify] Emscripten_CreateSystemCursor can change the state due to SDL_calloc
[asyncify] Emscripten_VideoInit can change the state due to SDL_calloc
[asyncify] SDL_AddEventWatch can change the state due to SDL_realloc
[asyncify] SDL_AllocateRenderVertices can change the state due to SDL_realloc
[asyncify] SDL_CleanupAudioStreamResampler can change the state due to SDL_free
[asyncify] SDL_FreeDataQueue can change the state due to SDL_free
[asyncify] DISKAUDIO_CloseDevice can change the state due to SDL_free
[asyncify] EMSCRIPTEN_JoystickQuit can change the state due to SDL_free
[asyncify] SDL_DelHintCallback can change the state due to SDL_free
[asyncify] SDL_ListRemove can change the state due to SDL_free
[asyncify] SDL_SIMDFree can change the state due to SDL_free
[asyncify] SDL_InvalidateMap can change the state due to SDL_free
[asyncify] SW_DestroyRenderer can change the state due to SDL_free
[asyncify] stdio_close can change the state due to SDL_free
[asyncify] SDL_FreeSurface can change the state due to SDL_free
[asyncify] SDL_DestroyMutex can change the state due to SDL_free
[asyncify] SDL_TouchQuit can change the state due to SDL_free
[asyncify] Emscripten_FreeCursor can change the state due to SDL_free
[asyncify] Emscripten_DeleteDevice can change the state due to SDL_free
[asyncify] SDL_MouseAutoCaptureChanged can change the state due to SDL_UpdateMouseCapture
[asyncify] SDL_SendMouseMotion can change the state due to SDL_UpdateMouseFocus
[asyncify] SdlGraphicsManager::lockMouse\28bool\29 can change the state due to SDL_SetRelativeMouseMode
[asyncify] SdlGraphicsManager::showSystemMouseCursor\28bool\29 can change the state due to SDL_ShowCursor
[asyncify] OpenGLSdlGraphics3dManager::showMouse\28bool\29 can change the state due to SDL_ShowCursor
[asyncify] SdlGraphicsManager::setSystemMousePosition\28int\2c\20int\29 can change the state due to SDL_WarpMouseInWindow
[asyncify] SDL_UnlockSurface can change the state due to SDL_RLESurface
[asyncify] SDL_LockSurface can change the state due to SDL_UnRLESurface
[asyncify] GLES2_UnlockTexture can change the state due to GLES2_UpdateTexture
[asyncify] DISKAUDIO_CaptureFromDevice can change the state due to SDL_RWread
[asyncify] SDL_ConvertSurfaceFormat can change the state due to SDL_ConvertSurface
[asyncify] SDL_SW_CopyYUVToRGB can change the state due to SDL_ConvertPixels
[asyncify] Emscripten_GLES_MakeCurrent can change the state due to SDL_EGL_MakeCurrent
[asyncify] OSystem_SDL::engineInit\28\29 can change the state due to SDL_DisableScreenSaver
[asyncify] Emscripten_HandleFullscreenChange can change the state due to SDL_GetWindowDisplayIndex
[asyncify] SdlWindow::getDisplayIndex\28\29\20const can change the state due to SDL_GetWindowDisplayIndex
[asyncify] OSystem_SDL::setWindowCaption\28Common::U32String\20const&\29 can change the state due to SDL_SetWindowTitle
[asyncify] SDL_OnWindowShown can change the state due to SDL_UpdateFullscreenMode
[asyncify] SdlWindow::iconifyWindow\28\29 can change the state due to SDL_MinimizeWindow
[asyncify] SdlGraphicsManager::notifyActiveAreaChanged\28\29 can change the state due to SDL_SetWindowMouseRect
[asyncify] OSystem_SDL::engineDone\28\29 can change the state due to SDL_EnableScreenSaver
[asyncify] OSystem_SDL::getOpenGLProcAddress\28char\20const*\29\20const can change the state due to SDL_GL_GetProcAddress
[asyncify] SdlGraphicsManager::getWindowSizeFromSdl\28int*\2c\20int*\29\20const can change the state due to SDL_GL_GetDrawableSize
[asyncify] GLES2_GetOutputSize can change the state due to SDL_GL_GetDrawableSize
[asyncify] SdlWindow::getSdlDpiScalingFactor\28\29\20const can change the state due to SDL_GL_GetDrawableSize
[asyncify] GLES2_SetVSync can change the state due to SDL_GL_SetSwapInterval
[asyncify] OpenGLSdlGraphicsManager::getFeatureState\28OSystem::Feature\29\20const can change the state due to SDL_GL_GetSwapInterval
[asyncify] OpenGLSdlGraphics3dManager::getFeatureState\28OSystem::Feature\29\20const can change the state due to SDL_GL_GetSwapInterval
[asyncify] OpenGLSdlGraphicsManager::refreshScreen\28\29 can change the state due to SDL_GL_SwapWindow
[asyncify] GLES2_RenderPresent can change the state due to SDL_GL_SwapWindow
[asyncify] Emscripten_HandleCanvasResize can change the state due to SDL_SendWindowEvent
[asyncify] Emscripten_HandleResize can change the state due to SDL_SendWindowEvent
[asyncify] Emscripten_HandleVisibilityChange can change the state due to SDL_SendWindowEvent
[asyncify] StdioStream::~StdioStream\28\29 can change the state due to fclose
[asyncify] ft_ansi_stream_close can change the state due to fclose
[asyncify] StdioStream::flush\28\29 can change the state due to fflush
[asyncify] png_default_flush can change the state due to fflush
[asyncify] do_putc.1 can change the state due to __overflow
[asyncify] puts can change the state due to __overflow
[asyncify] SDL_sscanf can change the state due to __toread
[asyncify] StdioStream::read\28void*\2c\20unsigned\20int\29 can change the state due to fread
[asyncify] ft_ansi_stream_io can change the state due to fread
[asyncify] stdio_read can change the state due to fread
[asyncify] __fseeko can change the state due to __fseeko_unlocked
[asyncify] __ftello can change the state due to __ftello_unlocked
[asyncify] fwrite can change the state due to __fwritex
[asyncify] out can change the state due to __fwritex
[asyncify] sift can change the state due to wrapper_cmp
[asyncify] trinkle can change the state due to wrapper_cmp
[asyncify] __floatscan can change the state due to __shgetc
[asyncify] scanexp can change the state due to __shgetc
[asyncify] vfprintf can change the state due to __vfprintf_internal
[asyncify] vfiprintf can change the state due to __vfprintf_internal
[asyncify] GUI::MetadataParser::closedKeyCallback\28Common::XMLParser::ParserNode*\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] GUI::MetadataParser::buildLayout\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::List<Common::XMLParser::XMLKeyLayout*>::push_back\28Common::XMLParser::XMLKeyLayout*\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::List<Common::XMLParser::XMLKeyLayout::XMLKeyProperty>::push_back\28Common::XMLParser::XMLKeyLayout::XMLKeyProperty\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] GUI::ThemeEngine::addDirtyRect\28Common::Rect\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] GUI::ThemeEval::addLayout\28GUI::ThemeLayout::LayoutType\2c\20int\2c\20GUI::ThemeLayout::ItemAlign\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] GUI::ThemeLayoutTabWidget::makeClone\28GUI::ThemeLayout*\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] GUI::ThemeLayoutSpacing::makeClone\28GUI::ThemeLayout*\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] GUI::ThemeLayoutWidget::makeClone\28GUI::ThemeLayout*\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] GUI::ThemeParser::defaultDrawStep\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] GUI::ThemeParser::buildLayout\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] GUI::scaleGfx\28Graphics::ManagedSurface\20const*\2c\20int\2c\20int\2c\20bool\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<int\2c\20Common::Array<int>\2c\20Common::Hash<int>\2c\20Common::EqualTo<int>>::getOrCreateVal\28int\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<int\2c\20Graphics::ManagedSurface\20const*\2c\20Common::Hash<int>\2c\20Common::EqualTo<int>>::HashMap\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::U32String\2c\20int\2c\20Common::Hash<Common::U32String>\2c\20Common::EqualTo<Common::U32String>>::HashMap\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<int\2c\20Common::Array<int>\2c\20Common::Hash<int>\2c\20Common::EqualTo<int>>::HashMap\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::U32String\2c\20int\2c\20Common::Hash<Common::U32String>\2c\20Common::EqualTo<Common::U32String>>::lookupAndCreateIfMissing\28Common::U32String\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<int\2c\20Graphics::ManagedSurface\20const*\2c\20Common::Hash<int>\2c\20Common::EqualTo<int>>::expandStorage\28unsigned\20int\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] GUI::ListWidget::ListWidget\28GUI::Dialog*\2c\20Common::String\20const&\2c\20Common::U32String\20const&\2c\20unsigned\20int\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::List<Common::Event>::insert\28Common::ListInternal::NodeBase*\2c\20Common::Event\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::Keymap::Keymap\28Common::Keymap::KeymapType\2c\20Common::String\20const&\2c\20Common::U32String\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::Keymap::registerMapping\28Common::Action*\2c\20Common::HardwareInput\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::Keymap*\2c\20Common::RemapWidget::KeymapTitleRow\2c\20Common::Hash<Common::Keymap*>\2c\20Common::EqualTo<Common::Keymap*>>::getOrCreateVal\28Common::Keymap*\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::List<MusicDevice>::push_back\28MusicDevice\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] SeqMusicPlugin::createInstance\28MidiDriver**\2c\20unsigned\20int\29\20const can change the state due to operator\20new\28unsigned\20long\29
[asyncify] TimidityMusicPlugin::createInstance\28MidiDriver**\2c\20unsigned\20int\29\20const can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::List<Graphics::PixelFormat>::insert\28Common::ListInternal::NodeBase*\2c\20Graphics::PixelFormat\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] OpenGL::FakeTexture::FakeTexture\28unsigned\20int\2c\20unsigned\20int\2c\20unsigned\20int\2c\20Graphics::PixelFormat\20const&\2c\20Graphics::PixelFormat\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] OpenGL::ScaledTexture::allocate\28unsigned\20int\2c\20unsigned\20int\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] OpenGL::TextureTarget::TextureTarget\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::Singleton<OpenGL::Context>::instance\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::Singleton<OpenGL::ShaderManager>::instance\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] POSIXFilesystemNode::getChildren\28Common::Array<AbstractFSNode*>&\2c\20Common::FSNode::ListMode\2c\20bool\29\20const can change the state due to operator\20new\28unsigned\20long\29
[asyncify] PosixIoStream::makeFromPath\28Common::String\20const&\2c\20bool\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::List<unsigned\20short>::insert\28Common::ListInternal::NodeBase*\2c\20unsigned\20short\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::String\2c\20Common::U32String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::setVal\28Common::String\20const&\2c\20Common::U32String\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::Singleton<Graphics::YUVToRGBManager>::instance\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Image::Indeo::GetBits::GetBits\28unsigned\20char\20const*\2c\20unsigned\20int\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Graphics::scaleBlit\28unsigned\20char*\2c\20unsigned\20char\20const*\2c\20unsigned\20int\2c\20unsigned\20int\2c\20unsigned\20int\2c\20unsigned\20int\2c\20unsigned\20int\2c\20unsigned\20int\2c\20Graphics::PixelFormat\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<unsigned\20int\2c\20Graphics::TTFFont::Glyph\2c\20Common::Hash<unsigned\20int>\2c\20Common::EqualTo<unsigned\20int>>::getOrCreateVal\28unsigned\20int\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Graphics::createPaletteLookup\28unsigned\20int\20const*\2c\20unsigned\20int\20const*\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] SourceScaler::setSource\28unsigned\20char\20const*\2c\20unsigned\20int\2c\20int\2c\20int\2c\20int\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Graphics::Surface::flipVertical\28Common::Rect\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Graphics::Surface::scale\28short\2c\20short\2c\20bool\29\20const can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Graphics::YUVToRGBManager::getLookup\28Graphics::PixelFormat\2c\20Graphics::YUVToRGBManager::LuminanceScale\2c\20bool\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] DotMatrixPlugin::createInstance\28Graphics::PixelFormat\20const&\29\20const can change the state due to operator\20new\28unsigned\20long\29
[asyncify] HQPlugin::createInstance\28Graphics::PixelFormat\20const&\29\20const can change the state due to operator\20new\28unsigned\20long\29
[asyncify] EdgePlugin::createInstance\28Graphics::PixelFormat\20const&\29\20const can change the state due to operator\20new\28unsigned\20long\29
[asyncify] NullMusicPlugin::createInstance\28MidiDriver**\2c\20unsigned\20int\29\20const can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Audio::makeALawStream\28Common::SeekableReadStream*\2c\20DisposeAfterUse::Flag\2c\20int\2c\20int\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Audio::makeMuLawStream\28Common::SeekableReadStream*\2c\20DisposeAfterUse::Flag\2c\20int\2c\20int\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::String\2c\20Common::SharedArchiveContents\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::getOrCreateVal\28Common::String\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::BaseString<char>::incRefCount\28\29\20const can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::BaseString<char>::initWithValueTypeStr\28char\20const*\2c\20unsigned\20int\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::BaseString<char>::ensureCapacity\28unsigned\20int\2c\20bool\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::BaseString<char32_t>::initWithValueTypeStr\28char32_t\20const*\2c\20unsigned\20int\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::BaseString<char32_t>::ensureCapacity\28unsigned\20int\2c\20bool\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::String\2c\20Common::ConfigManager::Domain\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::HashMap\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::String\2c\20Common::ConfigManager::Domain\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::getOrCreateVal\28Common::String\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::String\2c\20Common::DebugManager::DebugChannel\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::expandStorage\28unsigned\20int\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::List<Common::EventDispatcher::ObserverEntry>::insert\28Common::ListInternal::NodeBase*\2c\20Common::EventDispatcher::ObserverEntry\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::List<Common::String>::push_back\28Common::String\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::ZipArchive::listMembers\28Common::List<Common::SharedPtr<Common::ArchiveMember>>&\29\20const can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::WinResources::VersionInfo::VersionInfo\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::WinResourceID\2c\20Common::String\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>::HashMap\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::WinResourceID\2c\20Common::HashMap<Common::WinResourceID\2c\20Common::PEResources::Resource\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>::HashMap\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::WinResourceID\2c\20Common::HashMap<Common::WinResourceID\2c\20Common::HashMap<Common::WinResourceID\2c\20Common::PEResources::Resource\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>::getOrCreateVal\28Common::WinResourceID\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::WinResourceID\2c\20Common::HashMap<Common::WinResourceID\2c\20Common::PEResources::Resource\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>::getOrCreateVal\28Common::WinResourceID\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::WinResourceID\2c\20Common::PEResources::Resource\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>::getOrCreateVal\28Common::WinResourceID\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::WinResourceID\2c\20Common::PEResources::Resource\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>::HashMap\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] MT32Emu::RingBuffer<short>::RingBuffer\28unsigned\20int\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] MT32Emu::RingBuffer<float>::RingBuffer\28unsigned\20int\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] MT32Emu::AbstractLowPassFilter<int>::createLowPassFilter\28MT32Emu::AnalogOutputMode\2c\20bool\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] MT32Emu::AbstractLowPassFilter<float>::createLowPassFilter\28MT32Emu::AnalogOutputMode\2c\20bool\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] MT32Emu::DynamicSysexDataStorage::allocate\28unsigned\20int\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] SRCTools::SincResampler::createSincResampler\28double\2c\20double\2c\20double\2c\20double\2c\20double\2c\20unsigned\20int\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] SRCTools::IIRResampler::Constants::Constants\28unsigned\20int\2c\20float\2c\20SRCTools::IIRSection\20const*\2c\20SRCTools::IIRResampler::Quality\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::String\2c\20FileProperties\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::HashMap\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::String\2c\20FileProperties\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing\28Common::String\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::String\2c\20FileProperties\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::assign\28Common::HashMap<Common::String\2c\20FileProperties\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] byn$mgfn-shared$Common::SharedPtr<Common::ArchiveMember>::SharedPtr<Common::GenericArchiveMember>\28Common::GenericArchiveMember*\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::String\2c\20int\2c\20Common::Hash<Common::String>\2c\20Common::EqualTo<Common::String>>::HashMap\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::Singleton<Common::ConfigManager>::instance\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::String\2c\20int\2c\20Common::Hash<Common::String>\2c\20Common::EqualTo<Common::String>>::expandStorage\28unsigned\20int\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::HashMap\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::expandStorage\28unsigned\20int\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::assign\28Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::clear\28bool\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::String\2c\20bool\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::HashMap\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::String\2c\20bool\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::expandStorage\28unsigned\20int\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::HashMap\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing\28Common::String\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Glk::Blorb::listMembers\28Common::List<Common::SharedPtr<Common::ArchiveMember>>&\29\20const can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::List<Common::SharedPtr<Common::ArchiveMember>>::push_back\28Common::SharedPtr<Common::ArchiveMember>\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::String\2c\20Gob::DataIO::File\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::expandStorage\28unsigned\20int\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::List<Scumm::DetectorResult>::push_back\28Scumm::DetectorResult\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::String\2c\20SizeMD5\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::getOrCreateVal\28Common::String\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] OSystem_SDL::getHardwareInputSet\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] OSystem_SDL::createMutex\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::Singleton<Graphics::CursorManager>::instance\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::Singleton<Common::DebugManager>::instance\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] PluginManager::instance\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::Singleton<MD5CacheManager>::instance\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] MD5CacheManager::clear\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] StaticPluginProvider::getPlugins\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] FileMapArchive::listMembers\28Common::List<Common::SharedPtr<Common::ArchiveMember>>&\29\20const can change the state due to operator\20new\28unsigned\20long\29
[asyncify] FileMapArchive::getMember\28Common::Path\20const&\29\20const can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::String\2c\20Common::Array<Common::AchievementDescription>\2c\20Common::Hash<Common::String>\2c\20Common::EqualTo<Common::String>>::HashMap\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::String\2c\20Common::Array<Common::AchievementDescription>\2c\20Common::Hash<Common::String>\2c\20Common::EqualTo<Common::String>>::getOrCreateVal\28Common::String\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::List<Common::INIFile::Section>::insert\28Common::ListInternal::NodeBase*\2c\20Common::INIFile::Section\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::List<Common::INIFile::KeyValue>::insert\28Common::ListInternal::NodeBase*\2c\20Common::INIFile::KeyValue\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::Singleton<Common::AchievementsManager>::instance\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::Singleton<Graphics::FontManager>::instance\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] byn$mgfn-shared$NormalPlugin::createInstance\28Graphics::PixelFormat\20const&\29\20const can change the state due to operator\20new\28unsigned\20long\29
[asyncify] byn$mgfn-shared$Common::Singleton<EngineManager>::instance\28\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] GUI::Debugger::cmdDebugFlagsList\28int\2c\20char\20const**\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::String\2c\20Common::SharedPtr<Common::Functor2<int\2c\20char\20const**\2c\20bool>>\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::getOrCreateVal\28Common::String\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] GUI::GuiManager::getKeymap\28\29\20const can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::List<GUI::GuiManager::GuiObjectTrashItem>::push_back\28GUI::GuiManager::GuiObjectTrashItem\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] Common::HashMap<Common::String\2c\20GUI::MetadataGame\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::getOrCreateVal\28Common::String\20const&\29 can change the state due to operator\20new\28unsigned\20long\29
[asyncify] __cxxabiv1::__vmi_class_type_info::has_unambiguous_public_base\28__cxxabiv1::__dynamic_cast_info*\2c\20void*\2c\20int\29\20const can change the state due to __cxxabiv1::__base_class_type_info::has_unambiguous_public_base\28__cxxabiv1::__dynamic_cast_info*\2c\20void*\2c\20int\29\20const
[asyncify] __cxxabiv1::__vmi_class_type_info::search_below_dst\28__cxxabiv1::__dynamic_cast_info*\2c\20void\20const*\2c\20int\2c\20bool\29\20const can change the state due to __cxxabiv1::__base_class_type_info::search_above_dst\28__cxxabiv1::__dynamic_cast_info*\2c\20void\20const*\2c\20void\20const*\2c\20int\2c\20bool\29\20const
[asyncify] __cxxabiv1::__vmi_class_type_info::search_above_dst\28__cxxabiv1::__dynamic_cast_info*\2c\20void\20const*\2c\20void\20const*\2c\20int\2c\20bool\29\20const can change the state due to __cxxabiv1::__base_class_type_info::search_above_dst\28__cxxabiv1::__dynamic_cast_info*\2c\20void\20const*\2c\20void\20const*\2c\20int\2c\20bool\29\20const
[asyncify] Audio::LimitingAudioStream::~LimitingAudioStream\28\29 can change the state due to byn$mgfn-shared$Audio::LimitingAudioStream::~LimitingAudioStream\28\29
[asyncify] Audio::ForcedMonoAudioStream::~ForcedMonoAudioStream\28\29 can change the state due to byn$mgfn-shared$Audio::LimitingAudioStream::~LimitingAudioStream\28\29
[asyncify] Common::Array<OpenGL::LibRetroTextureTarget>::freeStorage\28OpenGL::LibRetroTextureTarget*\2c\20unsigned\20int\29 can change the state due to byn$mgfn-shared$Common::Array<Common::FSNode>::freeStorage\28Common::FSNode*\2c\20unsigned\20int\29
[asyncify] Common::Array<Common::FSNode>::freeStorage\28Common::FSNode*\2c\20unsigned\20int\29 can change the state due to byn$mgfn-shared$Common::Array<Common::FSNode>::freeStorage\28Common::FSNode*\2c\20unsigned\20int\29
[asyncify] Common::File::clearErr\28\29 can change the state due to byn$mgfn-shared$Common::File::clearErr\28\29
[asyncify] Common::DumpFile::clearErr\28\29 can change the state due to byn$mgfn-shared$Common::File::clearErr\28\29
[asyncify] Common::File::err\28\29\20const can change the state due to byn$mgfn-shared$Common::File::err\28\29\20const
[asyncify] Common::DumpFile::err\28\29\20const can change the state due to byn$mgfn-shared$Common::File::err\28\29\20const
[asyncify] MT32Emu::AnalogImpl<int>::~AnalogImpl\28\29 can change the state due to byn$mgfn-shared$MT32Emu::AnalogImpl<int>::~AnalogImpl\28\29
[asyncify] MT32Emu::AnalogImpl<float>::~AnalogImpl\28\29 can change the state due to byn$mgfn-shared$MT32Emu::AnalogImpl<int>::~AnalogImpl\28\29
[asyncify] NormalScaler::decreaseFactor\28\29 can change the state due to byn$mgfn-shared$NormalScaler::decreaseFactor\28\29
[asyncify] AdvMameScaler::decreaseFactor\28\29 can change the state due to byn$mgfn-shared$NormalScaler::decreaseFactor\28\29
[asyncify] NormalScaler::increaseFactor\28\29 can change the state due to byn$mgfn-shared$NormalScaler::increaseFactor\28\29
[asyncify] AdvMameScaler::increaseFactor\28\29 can change the state due to byn$mgfn-shared$NormalScaler::increaseFactor\28\29
[asyncify] HQScaler::increaseFactor\28\29 can change the state due to byn$mgfn-shared$NormalScaler::increaseFactor\28\29
[asyncify] SdlEventSource::handleJoyButtonDown\28SDL_Event&\2c\20Common::Event&\29 can change the state due to byn$mgfn-shared$SdlEventSource::handleJoyButtonDown\28SDL_Event&\2c\20Common::Event&\29
[asyncify] SdlEventSource::handleJoyButtonUp\28SDL_Event&\2c\20Common::Event&\29 can change the state due to byn$mgfn-shared$SdlEventSource::handleJoyButtonDown\28SDL_Event&\2c\20Common::Event&\29
[asyncify] SdlEventSource::handleMouseButtonDown\28SDL_Event&\2c\20Common::Event&\29 can change the state due to byn$mgfn-shared$SdlEventSource::handleMouseButtonDown\28SDL_Event&\2c\20Common::Event&\29
[asyncify] SdlEventSource::handleMouseButtonUp\28SDL_Event&\2c\20Common::Event&\29 can change the state due to byn$mgfn-shared$SdlEventSource::handleMouseButtonDown\28SDL_Event&\2c\20Common::Event&\29
[asyncify] MixerManager::~MixerManager\28\29 can change the state due to byn$mgfn-shared$StaticPlugin::~StaticPlugin\28\29
[asyncify] Common::QuickTimeParser::SampleDesc::~SampleDesc\28\29 can change the state due to byn$mgfn-shared$StaticPlugin::~StaticPlugin\28\29
[asyncify] SRCTools::ResamplerModel::InternalResamplerCascadeStage::~InternalResamplerCascadeStage\28\29 can change the state due to byn$mgfn-shared$StaticPlugin::~StaticPlugin\28\29
[asyncify] StaticPlugin::~StaticPlugin\28\29 can change the state due to byn$mgfn-shared$StaticPlugin::~StaticPlugin\28\29
[asyncify] DISKAUDIO_WaitDevice can change the state due to SDL_Delay
[asyncify] DUMMYAUDIO_CaptureFromDevice can change the state due to SDL_Delay
[asyncify] SDL_AtomicLock can change the state due to SDL_Delay
[asyncify] OSystem_SDL::delayMillis\28unsigned\20int\29 can change the state due to SDL_Delay
[asyncify] Common::KeyboardHardwareInputSet::findHardwareInput\28Common::String\20const&\29\20const can change the state due to Common::Singleton<Common::MainTranslationManager>::instance\28\29
[asyncify] Common::KeyboardHardwareInputSet::findHardwareInput\28Common::Event\20const&\29\20const can change the state due to Common::Singleton<Common::MainTranslationManager>::instance\28\29
[asyncify] Common::MouseHardwareInputSet::findHardwareInput\28Common::String\20const&\29\20const can change the state due to Common::Singleton<Common::MainTranslationManager>::instance\28\29
[asyncify] Common::MouseHardwareInputSet::findHardwareInput\28Common::Event\20const&\29\20const can change the state due to Common::Singleton<Common::MainTranslationManager>::instance\28\29
[asyncify] Common::JoystickHardwareInputSet::findHardwareInput\28Common::String\20const&\29\20const can change the state due to Common::Singleton<Common::MainTranslationManager>::instance\28\29
[asyncify] Common::JoystickHardwareInputSet::findHardwareInput\28Common::Event\20const&\29\20const can change the state due to Common::Singleton<Common::MainTranslationManager>::instance\28\29
[asyncify] Common::AchievementsManager::getCurrentLang\28\29\20const can change the state due to Common::Singleton<Common::MainTranslationManager>::instance\28\29
[asyncify] generateUnknownGameReport\28Common::Array<DetectedGame>\20const&\2c\20bool\2c\20bool\2c\20unsigned\20int\29 can change the state due to Common::Singleton<Common::MainTranslationManager>::instance\28\29
[asyncify] SaveStateDescriptor::isAutosave\28\29\20const can change the state due to Common::Singleton<Common::MainTranslationManager>::instance\28\29
[asyncify] GUI::GuiManager::setLanguageRTL\28\29 can change the state due to Common::Singleton<Common::MainTranslationManager>::instance\28\29
[asyncify] SaveStateDescriptor::operator=\28SaveStateDescriptor\20const&\29 can change the state due to void\20Common::SharedPtr<AbstractFSNode>::reset<AbstractFSNode>\28Common::SharedPtr<AbstractFSNode>\20const&\29
[asyncify] void\20SWAP<Common::SharedPtr<Common::ArchiveMember>>\28Common::SharedPtr<Common::ArchiveMember>&\2c\20Common::SharedPtr<Common::ArchiveMember>&\29 can change the state due to void\20Common::SharedPtr<AbstractFSNode>::reset<AbstractFSNode>\28Common::SharedPtr<AbstractFSNode>\20const&\29
[asyncify] void\20SWAP<Common::FSNode>\28Common::FSNode&\2c\20Common::FSNode&\29 can change the state due to void\20Common::SharedPtr<AbstractFSNode>::reset<AbstractFSNode>\28Common::SharedPtr<AbstractFSNode>\20const&\29
[asyncify] Common::Array<Common::FSNode>::push_back\28Common::FSNode\20const&\29 can change the state due to void\20Common::SharedPtr<AbstractFSNode>::reset<AbstractFSNode>\28Common::SharedPtr<AbstractFSNode>\20const&\29
[asyncify] Common::FSNode*\20Common::copy<Common::FSNode\20const*\2c\20Common::FSNode*>\28Common::FSNode\20const*\2c\20Common::FSNode\20const*\2c\20Common::FSNode*\29 can change the state due to void\20Common::SharedPtr<AbstractFSNode>::reset<AbstractFSNode>\28Common::SharedPtr<AbstractFSNode>\20const&\29
[asyncify] Common::FSNode::~FSNode\28\29 can change the state due to Common::SharedPtr<AbstractFSNode>::~SharedPtr\28\29
[asyncify] Common::MemoryReadStream::~MemoryReadStream\28\29.1 can change the state due to Common::SharedPtr<AbstractFSNode>::~SharedPtr\28\29
[asyncify] SaveStateDescriptor::~SaveStateDescriptor\28\29 can change the state due to Common::SharedPtr<AbstractFSNode>::~SharedPtr\28\29
[asyncify] Common::List<Common::SharedPtr<Common::ArchiveMember>>::clear\28\29 can change the state due to Common::SharedPtr<AbstractFSNode>::~SharedPtr\28\29
[asyncify] Common::MemcachingCaseInsensitiveArchive::~MemcachingCaseInsensitiveArchive\28\29 can change the state due to Common::SharedArchiveContents::~SharedArchiveContents\28\29
[asyncify] non-virtual\20thunk\20to\20OSystem_SDL::~OSystem_SDL\28\29 can change the state due to OSystem_SDL::~OSystem_SDL\28\29.1
[asyncify] virtual\20thunk\20to\20OSystem_SDL::~OSystem_SDL\28\29 can change the state due to OSystem_SDL::~OSystem_SDL\28\29.1
[asyncify] OSystem_SDL::~OSystem_SDL\28\29.2 can change the state due to OSystem_SDL::~OSystem_SDL\28\29.1
[asyncify] OSystem_POSIX::~OSystem_POSIX\28\29.1 can change the state due to OSystem_POSIX::~OSystem_POSIX\28\29
[asyncify] non-virtual\20thunk\20to\20OSystem_POSIX::~OSystem_POSIX\28\29 can change the state due to OSystem_POSIX::~OSystem_POSIX\28\29
[asyncify] virtual\20thunk\20to\20OSystem_POSIX::~OSystem_POSIX\28\29 can change the state due to OSystem_POSIX::~OSystem_POSIX\28\29
[asyncify] OSystem_Emscripten::~OSystem_Emscripten\28\29.1 can change the state due to OSystem_Emscripten::~OSystem_Emscripten\28\29
[asyncify] non-virtual\20thunk\20to\20OSystem_Emscripten::~OSystem_Emscripten\28\29 can change the state due to OSystem_Emscripten::~OSystem_Emscripten\28\29
[asyncify] virtual\20thunk\20to\20OSystem_Emscripten::~OSystem_Emscripten\28\29 can change the state due to OSystem_Emscripten::~OSystem_Emscripten\28\29
[asyncify] virtual\20thunk\20to\20OSystem_POSIX::init\28\29 can change the state due to OSystem_POSIX::init\28\29
[asyncify] virtual\20thunk\20to\20OSystem_POSIX::initBackend\28\29 can change the state due to OSystem_POSIX::initBackend\28\29
[asyncify] non-virtual\20thunk\20to\20Common::SearchManager::~SearchManager\28\29.1 can change the state due to Common::SearchManager::~SearchManager\28\29.1
[asyncify] non-virtual\20thunk\20to\20GUI::GuiManager::~GuiManager\28\29 can change the state due to GUI::GuiManager::~GuiManager\28\29
[asyncify] GUI::GuiManager::~GuiManager\28\29.1 can change the state due to GUI::GuiManager::~GuiManager\28\29
[asyncify] AdvancedMetaEngine&\20Plugin::get<AdvancedMetaEngine>\28\29\20const can change the state due to byn$mgfn-shared$AdvancedMetaEngine&\20Plugin::get<AdvancedMetaEngine>\28\29\20const
[asyncify] MetaEngineDetection&\20Plugin::get<MetaEngineDetection>\28\29\20const can change the state due to byn$mgfn-shared$AdvancedMetaEngine&\20Plugin::get<AdvancedMetaEngine>\28\29\20const
[asyncify] MetaEngine&\20Plugin::get<MetaEngine>\28\29\20const can change the state due to byn$mgfn-shared$AdvancedMetaEngine&\20Plugin::get<AdvancedMetaEngine>\28\29\20const
[asyncify] MusicPluginObject&\20Plugin::get<MusicPluginObject>\28\29\20const can change the state due to byn$mgfn-shared$AdvancedMetaEngine&\20Plugin::get<AdvancedMetaEngine>\28\29\20const
[asyncify] AsylumMetaEngineDetection::fallbackDetect\28Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\2c\20Common::FSList\20const&\2c\20ADDetectedGameExtraInfo**\29\20const can change the state due to AdvancedMetaEngineDetection::detectGameFilebased\28Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\2c\20ADFileBasedFallback\20const*\29\20const
[asyncify] CryOmni3D::CryOmni3DMetaEngineDetection::fallbackDetect\28Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\2c\20Common::FSList\20const&\2c\20ADDetectedGameExtraInfo**\29\20const can change the state due to AdvancedMetaEngineDetection::detectGameFilebased\28Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\2c\20ADFileBasedFallback\20const*\29\20const
[asyncify] MohawkMetaEngineDetection::fallbackDetect\28Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\2c\20Common::FSList\20const&\2c\20ADDetectedGameExtraInfo**\29\20const can change the state due to AdvancedMetaEngineDetection::detectGameFilebased\28Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\2c\20ADFileBasedFallback\20const*\29\20const
[asyncify] ToonMetaEngineDetection::fallbackDetect\28Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\2c\20Common::FSList\20const&\2c\20ADDetectedGameExtraInfo**\29\20const can change the state due to AdvancedMetaEngineDetection::detectGameFilebased\28Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\2c\20ADFileBasedFallback\20const*\29\20const
[asyncify] ToucheMetaEngineDetection::fallbackDetect\28Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\2c\20Common::FSList\20const&\2c\20ADDetectedGameExtraInfo**\29\20const can change the state due to AdvancedMetaEngineDetection::detectGameFilebased\28Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\2c\20ADFileBasedFallback\20const*\29\20const
[asyncify] GUI::DropdownButtonWidget::reflowLayout\28\29 can change the state due to GUI::GuiObject::reflowLayout\28\29
[asyncify] GUI::OptionsDialog::setVolumeSettingsState\28bool\29 can change the state due to GUI::Widget::setEnabled\28bool\29
[asyncify] GUI::OptionsDialog::setSubtitleSettingsState\28bool\29 can change the state due to GUI::Widget::setEnabled\28bool\29
[asyncify] GUI::ButtonWidget::ButtonWidget\28GUI::GuiObject*\2c\20int\2c\20int\2c\20int\2c\20int\2c\20Common::U32String\20const&\2c\20Common::U32String\20const&\2c\20unsigned\20int\2c\20unsigned\20char\2c\20Common::U32String\20const&\29 can change the state due to GUI::StaticTextWidget::StaticTextWidget\28GUI::GuiObject*\2c\20int\2c\20int\2c\20int\2c\20int\2c\20Common::U32String\20const&\2c\20Graphics::TextAlign\2c\20Common::U32String\20const&\2c\20GUI::ThemeEngine::FontStyle\2c\20Common::Language\2c\20bool\29
[asyncify] GUI::ButtonWidget::ButtonWidget\28GUI::GuiObject*\2c\20Common::String\20const&\2c\20Common::U32String\20const&\2c\20Common::U32String\20const&\2c\20unsigned\20int\2c\20unsigned\20char\2c\20Common::U32String\20const&\29 can change the state due to GUI::StaticTextWidget::StaticTextWidget\28GUI::GuiObject*\2c\20Common::String\20const&\2c\20Common::U32String\20const&\2c\20Common::U32String\20const&\2c\20GUI::ThemeEngine::FontStyle\2c\20Common::Language\2c\20bool\29
[asyncify] GUI::GridItemTray::reflowLayout\28\29 can change the state due to GUI::PicButtonWidget::setGfxFromTheme\28char\20const*\2c\20int\2c\20bool\29
[asyncify] GUI::DropdownButtonWidget::DropdownButtonWidget\28GUI::GuiObject*\2c\20Common::String\20const&\2c\20Common::U32String\20const&\2c\20Common::U32String\20const&\2c\20unsigned\20int\2c\20unsigned\20char\2c\20Common::U32String\20const&\29 can change the state due to GUI::DropdownButtonWidget::reset\28\29
[asyncify] GUI::Debugger::debugPrintf\28char\20const*\2c\20...\29 can change the state due to GUI::ConsoleDialog::print\28char\20const*\29
[asyncify] MT32Emu::ScummVMReportHandler::onErrorControlROM\28\29 can change the state due to byn$mgfn-shared$MT32Emu::ScummVMReportHandler::onErrorControlROM\28\29
[asyncify] MT32Emu::ScummVMReportHandler::onErrorPCMROM\28\29 can change the state due to byn$mgfn-shared$MT32Emu::ScummVMReportHandler::onErrorControlROM\28\29
[asyncify] GUI::SaveLoadChooserSimple::open\28\29 can change the state due to GUI::SaveLoadChooserDialog::open\28\29
[asyncify] GUI::SaveLoadChooserSimple::~SaveLoadChooserSimple\28\29 can change the state due to GUI::SaveLoadChooserDialog::~SaveLoadChooserDialog\28\29.1
[asyncify] GUI::Tooltip::~Tooltip\28\29.1 can change the state due to GUI::Tooltip::~Tooltip\28\29
[asyncify] GUI::PopUpDialog::~PopUpDialog\28\29.1 can change the state due to GUI::PopUpDialog::~PopUpDialog\28\29
[asyncify] GUI::ThemeBrowser::~ThemeBrowser\28\29.1 can change the state due to GUI::ThemeBrowser::~ThemeBrowser\28\29
[asyncify] GUI::AboutDialog::~AboutDialog\28\29.1 can change the state due to GUI::AboutDialog::~AboutDialog\28\29
[asyncify] non-virtual\20thunk\20to\20GUI::GridItemTray::~GridItemTray\28\29.1 can change the state due to GUI::Dialog::~Dialog\28\29
[asyncify] GUI::BrowserDialog::~BrowserDialog\28\29.1 can change the state due to GUI::BrowserDialog::~BrowserDialog\28\29
[asyncify] GUI::UnknownGameDialog::~UnknownGameDialog\28\29.1 can change the state due to GUI::UnknownGameDialog::~UnknownGameDialog\28\29
[asyncify] GUI::MassAddDialog::~MassAddDialog\28\29.1 can change the state due to GUI::MassAddDialog::~MassAddDialog\28\29
[asyncify] GUI::CountdownMessageDialog::~CountdownMessageDialog\28\29.1 can change the state due to GUI::CountdownMessageDialog::~CountdownMessageDialog\28\29
[asyncify] non-virtual\20thunk\20to\20GUI::GlobalOptionsDialog::~GlobalOptionsDialog\28\29 can change the state due to GUI::GlobalOptionsDialog::~GlobalOptionsDialog\28\29
[asyncify] GUI::GlobalOptionsDialog::~GlobalOptionsDialog\28\29.1 can change the state due to GUI::GlobalOptionsDialog::~GlobalOptionsDialog\28\29
[asyncify] Graphics::blacksquareinwhitecircle\28Graphics::ManagedSurface*\2c\20int\2c\20int\2c\20int\2c\20int\2c\20int\29 can change the state due to Graphics::circleColorNoblend\28Graphics::ManagedSurface*\2c\20double\2c\20double\2c\20double\2c\20int\2c\20bool\29
[asyncify] GUI::ThemeLayoutTabWidget::~ThemeLayoutTabWidget\28\29 can change the state due to GUI::ThemeLayoutWidget::~ThemeLayoutWidget\28\29
[asyncify] GUI::ThemeLayoutMain::~ThemeLayoutMain\28\29.1 can change the state due to GUI::ThemeLayoutMain::~ThemeLayoutMain\28\29
[asyncify] GUI::ContainerWidget::ContainerWidget\28GUI::GuiObject*\2c\20int\2c\20int\2c\20int\2c\20int\29 can change the state due to GUI::Widget::Widget\28GUI::GuiObject*\2c\20int\2c\20int\2c\20int\2c\20int\2c\20Common::U32String\20const&\29
[asyncify] GUI::ScrollBarWidget::ScrollBarWidget\28GUI::GuiObject*\2c\20int\2c\20int\2c\20int\2c\20int\29 can change the state due to GUI::Widget::Widget\28GUI::GuiObject*\2c\20int\2c\20int\2c\20int\2c\20int\2c\20Common::U32String\20const&\29
[asyncify] GUI::SliderWidget::SliderWidget\28GUI::GuiObject*\2c\20Common::String\20const&\2c\20Common::U32String\20const&\2c\20unsigned\20int\29 can change the state due to GUI::Widget::Widget\28GUI::GuiObject*\2c\20Common::String\20const&\2c\20Common::U32String\20const&\29
[asyncify] GUI::GraphicsWidget::GraphicsWidget\28GUI::GuiObject*\2c\20Common::String\20const&\2c\20Common::U32String\20const&\29 can change the state due to GUI::Widget::Widget\28GUI::GuiObject*\2c\20Common::String\20const&\2c\20Common::U32String\20const&\29
[asyncify] GUI::ContainerWidget::ContainerWidget\28GUI::GuiObject*\2c\20Common::String\20const&\29 can change the state due to GUI::Widget::Widget\28GUI::GuiObject*\2c\20Common::String\20const&\2c\20Common::U32String\20const&\29
[asyncify] GUI::PopUpWidget::PopUpWidget\28GUI::GuiObject*\2c\20Common::String\20const&\2c\20Common::U32String\20const&\2c\20unsigned\20int\29 can change the state due to GUI::Widget::Widget\28GUI::GuiObject*\2c\20Common::String\20const&\2c\20Common::U32String\20const&\29
[asyncify] GUI::GraphicsWidget::~GraphicsWidget\28\29.1 can change the state due to GUI::GraphicsWidget::~GraphicsWidget\28\29
[asyncify] GUI::ButtonWidget::~ButtonWidget\28\29 can change the state due to GUI::StaticTextWidget::~StaticTextWidget\28\29
[asyncify] GUI::StaticTextWidget::~StaticTextWidget\28\29.1 can change the state due to GUI::StaticTextWidget::~StaticTextWidget\28\29
[asyncify] non-virtual\20thunk\20to\20GUI::SliderWidget::~SliderWidget\28\29.1 can change the state due to GUI::SliderWidget::~SliderWidget\28\29.1
[asyncify] non-virtual\20thunk\20to\20GUI::EditableWidget::~EditableWidget\28\29 can change the state due to GUI::EditableWidget::~EditableWidget\28\29
[asyncify] GUI::ListWidget::~ListWidget\28\29 can change the state due to GUI::EditableWidget::~EditableWidget\28\29
[asyncify] GUI::EditTextWidget::~EditTextWidget\28\29 can change the state due to GUI::EditableWidget::~EditableWidget\28\29
[asyncify] GUI::PopUpWidget::~PopUpWidget\28\29.1 can change the state due to GUI::PopUpWidget::~PopUpWidget\28\29
[asyncify] non-virtual\20thunk\20to\20GUI::PopUpWidget::~PopUpWidget\28\29 can change the state due to GUI::PopUpWidget::~PopUpWidget\28\29
[asyncify] non-virtual\20thunk\20to\20GUI::ScrollContainerWidget::~ScrollContainerWidget\28\29 can change the state due to GUI::ScrollContainerWidget::~ScrollContainerWidget\28\29
[asyncify] GUI::ScrollContainerWidget::~ScrollContainerWidget\28\29.1 can change the state due to GUI::ScrollContainerWidget::~ScrollContainerWidget\28\29
[asyncify] GUI::StaticTextWidget::handleMouseEntered\28int\29 can change the state due to GUI::StaticTextWidget::readLabel\28\29
[asyncify] GUI::ButtonWidget::setLabel\28Common::String\20const&\29 can change the state due to GUI::ButtonWidget::setLabel\28Common::U32String\20const&\29
[asyncify] non-virtual\20thunk\20to\20GUI::PicButtonWidget::~PicButtonWidget\28\29.1 can change the state due to GUI::PicButtonWidget::~PicButtonWidget\28\29.1
[asyncify] Graphics::frame\28Graphics::ManagedSurface*\2c\20int\2c\20int\2c\20int\2c\20int\2c\20int\2c\20int\2c\20int\2c\20int\2c\20int\29 can change the state due to Graphics::boxColor\28Graphics::ManagedSurface*\2c\20int\2c\20int\2c\20int\2c\20int\2c\20int\29
[asyncify] Graphics::drawRow\28Graphics::ManagedSurface*\2c\20int\2c\20int*\2c\20int\2c\20int\2c\20int\2c\20int\2c\20int\29 can change the state due to Graphics::boxColor\28Graphics::ManagedSurface*\2c\20int\2c\20int\2c\20int\2c\20int\2c\20int\29
[asyncify] non-virtual\20thunk\20to\20GUI::GridWidget::~GridWidget\28\29 can change the state due to GUI::GridWidget::~GridWidget\28\29
[asyncify] GUI::GridWidget::~GridWidget\28\29.1 can change the state due to GUI::GridWidget::~GridWidget\28\29
[asyncify] GUI::GridItemWidget::~GridItemWidget\28\29.1 can change the state due to GUI::GridItemWidget::~GridItemWidget\28\29
[asyncify] non-virtual\20thunk\20to\20GUI::GridItemWidget::~GridItemWidget\28\29 can change the state due to GUI::GridItemWidget::~GridItemWidget\28\29
[asyncify] GUI::LauncherGrid::selectTarget\28Common::String\20const&\29 can change the state due to GUI::GridWidget::setSelected\28int\29
[asyncify] GUI::PopUpDialog::moveUp\28\29 can change the state due to GUI::PopUpDialog::setSelection\28int\29
[asyncify] GUI::PopUpDialog::moveDown\28\29 can change the state due to GUI::PopUpDialog::setSelection\28int\29
[asyncify] non-virtual\20thunk\20to\20OSystem_SDL::hasFeature\28OSystem::Feature\29 can change the state due to OSystem_SDL::hasFeature\28OSystem::Feature\29
[asyncify] virtual\20thunk\20to\20OSystem_SDL::hasFeature\28OSystem::Feature\29 can change the state due to OSystem_SDL::hasFeature\28OSystem::Feature\29
[asyncify] OSystem_POSIX::hasFeature\28OSystem::Feature\29 can change the state due to OSystem_SDL::hasFeature\28OSystem::Feature\29
[asyncify] non-virtual\20thunk\20to\20OSystem_Emscripten::setFeatureState\28OSystem::Feature\2c\20bool\29 can change the state due to OSystem_Emscripten::setFeatureState\28OSystem::Feature\2c\20bool\29
[asyncify] virtual\20thunk\20to\20OSystem_Emscripten::setFeatureState\28OSystem::Feature\2c\20bool\29 can change the state due to OSystem_Emscripten::setFeatureState\28OSystem::Feature\2c\20bool\29
[asyncify] non-virtual\20thunk\20to\20OSystem_Emscripten::getFeatureState\28OSystem::Feature\29 can change the state due to OSystem_Emscripten::getFeatureState\28OSystem::Feature\29
[asyncify] virtual\20thunk\20to\20OSystem_Emscripten::getFeatureState\28OSystem::Feature\29 can change the state due to OSystem_Emscripten::getFeatureState\28OSystem::Feature\29
[asyncify] OSystem_POSIX::createAudioCDManager\28\29 can change the state due to OSystem_SDL::createAudioCDManager\28\29
[asyncify] DefaultAudioCDManager::~DefaultAudioCDManager\28\29.1 can change the state due to DefaultAudioCDManager::~DefaultAudioCDManager\28\29
[asyncify] non-virtual\20thunk\20to\20DefaultEventManager::~DefaultEventManager\28\29.1 can change the state due to DefaultEventManager::~DefaultEventManager\28\29.1
[asyncify] Common::Keymapper::reloadAllMappings\28\29 can change the state due to Common::Keymapper::reloadKeymapMappings\28Common::Keymap*\29
[asyncify] Common::Keymapper::~Keymapper\28\29.1 can change the state due to Common::Keymapper::~Keymapper\28\29
[asyncify] virtual\20thunk\20to\20OSystem_SDL::logMessage\28LogMessageType::Type\2c\20char\20const*\29 can change the state due to OSystem_SDL::logMessage\28LogMessageType::Type\2c\20char\20const*\29
[asyncify] virtual\20thunk\20to\20OpenGLSdlGraphics3dManager::hideOverlay\28\29 can change the state due to OpenGLSdlGraphics3dManager::hideOverlay\28\29
[asyncify] virtual\20thunk\20to\20SurfaceSdlGraphicsManager::~SurfaceSdlGraphicsManager\28\29.1 can change the state due to SurfaceSdlGraphicsManager::~SurfaceSdlGraphicsManager\28\29.2
[asyncify] OpenGL::FakePipeline::~FakePipeline\28\29 can change the state due to OpenGL::Pipeline::~Pipeline\28\29.1
[asyncify] OpenGL::Texture::Texture\28unsigned\20int\2c\20unsigned\20int\2c\20unsigned\20int\2c\20Graphics::PixelFormat\20const&\29 can change the state due to OpenGL::GLTexture::GLTexture\28unsigned\20int\2c\20unsigned\20int\2c\20unsigned\20int\29
[asyncify] OpenGL::Texture::~Texture\28\29.1 can change the state due to OpenGL::Texture::~Texture\28\29
[asyncify] OpenGL::FakeTexture::~FakeTexture\28\29.1 can change the state due to OpenGL::Texture::~Texture\28\29
[asyncify] OpenGL::LibRetroPipeline::~LibRetroPipeline\28\29.1 can change the state due to OpenGL::LibRetroPipeline::~LibRetroPipeline\28\29
[asyncify] OpenGLSdlGraphicsManager::setFeatureState\28OSystem::Feature\2c\20bool\29 can change the state due to OpenGL::OpenGLGraphicsManager::setFeatureState\28OSystem::Feature\2c\20bool\29
[asyncify] non-virtual\20thunk\20to\20OpenGLSdlGraphicsManager::handleResizeImpl\28int\2c\20int\29 can change the state due to OpenGLSdlGraphicsManager::handleResizeImpl\28int\2c\20int\29
[asyncify] virtual\20thunk\20to\20OpenGLSdlGraphicsManager::handleResizeImpl\28int\2c\20int\29 can change the state due to OpenGLSdlGraphicsManager::handleResizeImpl\28int\2c\20int\29
[asyncify] virtual\20thunk\20to\20OpenGLSdlGraphicsManager::~OpenGLSdlGraphicsManager\28\29.1 can change the state due to OpenGLSdlGraphicsManager::~OpenGLSdlGraphicsManager\28\29.2
[asyncify] non-virtual\20thunk\20to\20OpenGLSdlGraphicsManager::~OpenGLSdlGraphicsManager\28\29.1 can change the state due to OpenGLSdlGraphicsManager::~OpenGLSdlGraphicsManager\28\29.2
[asyncify] OpenGLSdlGraphics3dManager::~OpenGLSdlGraphics3dManager\28\29.1 can change the state due to OpenGLSdlGraphics3dManager::~OpenGLSdlGraphics3dManager\28\29
[asyncify] virtual\20thunk\20to\20OpenGLSdlGraphics3dManager::~OpenGLSdlGraphics3dManager\28\29 can change the state due to OpenGLSdlGraphics3dManager::~OpenGLSdlGraphics3dManager\28\29
[asyncify] OpenGLSdlGraphics3dManager::~OpenGLSdlGraphics3dManager\28\29.2 can change the state due to OpenGLSdlGraphics3dManager::~OpenGLSdlGraphics3dManager\28\29
[asyncify] virtual\20thunk\20to\20OpenGLSdlGraphics3dManager::setFeatureState\28OSystem::Feature\2c\20bool\29 can change the state due to OpenGLSdlGraphics3dManager::setFeatureState\28OSystem::Feature\2c\20bool\29
[asyncify] virtual\20thunk\20to\20OpenGLSdlGraphics3dManager::endGFXTransaction\28\29 can change the state due to OpenGLSdlGraphics3dManager::endGFXTransaction\28\29
[asyncify] virtual\20thunk\20to\20OpenGLSdlGraphics3dManager::initSize\28unsigned\20int\2c\20unsigned\20int\2c\20Graphics::PixelFormat\20const*\29 can change the state due to OpenGLSdlGraphics3dManager::initSize\28unsigned\20int\2c\20unsigned\20int\2c\20Graphics::PixelFormat\20const*\29
[asyncify] Image::BitmapDecoder::~BitmapDecoder\28\29.1 can change the state due to Image::BitmapDecoder::~BitmapDecoder\28\29
[asyncify] Common::SeekableSubReadStream::~SeekableSubReadStream\28\29 can change the state due to Common::SubReadStream::~SubReadStream\28\29
[asyncify] Common::SubReadStream::~SubReadStream\28\29.1 can change the state due to Common::SubReadStream::~SubReadStream\28\29
[asyncify] Common::SafeSeekableSubReadStream::~SafeSeekableSubReadStream\28\29 can change the state due to Common::SubReadStream::~SubReadStream\28\29
[asyncify] Audio::LoopingAudioStream::~LoopingAudioStream\28\29.2 can change the state due to Audio::LoopingAudioStream::~LoopingAudioStream\28\29
[asyncify] Audio::SubSeekableAudioStream::~SubSeekableAudioStream\28\29 can change the state due to Audio::SubSeekableAudioStream::~SubSeekableAudioStream\28\29.1
[asyncify] Audio::Oki_ADPCMStream::~Oki_ADPCMStream\28\29 can change the state due to Audio::SubSeekableAudioStream::~SubSeekableAudioStream\28\29.1
[asyncify] Audio::XA_ADPCMStream::~XA_ADPCMStream\28\29 can change the state due to Audio::SubSeekableAudioStream::~SubSeekableAudioStream\28\29.1
[asyncify] Audio::DVI_ADPCMStream::~DVI_ADPCMStream\28\29 can change the state due to Audio::SubSeekableAudioStream::~SubSeekableAudioStream\28\29.1
[asyncify] Audio::Apple_ADPCMStream::~Apple_ADPCMStream\28\29 can change the state due to Audio::SubSeekableAudioStream::~SubSeekableAudioStream\28\29.1
[asyncify] Audio::MSIma_ADPCMStream::~MSIma_ADPCMStream\28\29 can change the state due to Audio::SubSeekableAudioStream::~SubSeekableAudioStream\28\29.1
[asyncify] Audio::MS_ADPCMStream::~MS_ADPCMStream\28\29 can change the state due to Audio::SubSeekableAudioStream::~SubSeekableAudioStream\28\29.1
[asyncify] Audio::DK3_ADPCMStream::~DK3_ADPCMStream\28\29 can change the state due to Audio::SubSeekableAudioStream::~SubSeekableAudioStream\28\29.1
[asyncify] Audio::G711ALawStream::~G711ALawStream\28\29 can change the state due to Audio::SubSeekableAudioStream::~SubSeekableAudioStream\28\29.1
[asyncify] Audio::G711MuLawStream::~G711MuLawStream\28\29 can change the state due to Audio::SubSeekableAudioStream::~SubSeekableAudioStream\28\29.1
[asyncify] Audio::RawStream<3\2c\20true\2c\20true>::~RawStream\28\29 can change the state due to Audio::RawStream<3\2c\20true\2c\20true>::~RawStream\28\29.1
[asyncify] Audio::RawStream<3\2c\20true\2c\20false>::~RawStream\28\29 can change the state due to Audio::RawStream<3\2c\20true\2c\20true>::~RawStream\28\29.1
[asyncify] Audio::RawStream<2\2c\20true\2c\20true>::~RawStream\28\29 can change the state due to Audio::RawStream<3\2c\20true\2c\20true>::~RawStream\28\29.1
[asyncify] Audio::RawStream<2\2c\20true\2c\20false>::~RawStream\28\29 can change the state due to Audio::RawStream<3\2c\20true\2c\20true>::~RawStream\28\29.1
[asyncify] Audio::RawStream<1\2c\20true\2c\20false>::~RawStream\28\29 can change the state due to Audio::RawStream<3\2c\20true\2c\20true>::~RawStream\28\29.1
[asyncify] Audio::RawStream<3\2c\20false\2c\20true>::~RawStream\28\29 can change the state due to Audio::RawStream<3\2c\20true\2c\20true>::~RawStream\28\29.1
[asyncify] Audio::RawStream<3\2c\20false\2c\20false>::~RawStream\28\29 can change the state due to Audio::RawStream<3\2c\20true\2c\20true>::~RawStream\28\29.1
[asyncify] Audio::RawStream<2\2c\20false\2c\20true>::~RawStream\28\29 can change the state due to Audio::RawStream<3\2c\20true\2c\20true>::~RawStream\28\29.1
[asyncify] Audio::RawStream<2\2c\20false\2c\20false>::~RawStream\28\29 can change the state due to Audio::RawStream<3\2c\20true\2c\20true>::~RawStream\28\29.1
[asyncify] Audio::RawStream<1\2c\20false\2c\20false>::~RawStream\28\29 can change the state due to Audio::RawStream<3\2c\20true\2c\20true>::~RawStream\28\29.1
[asyncify] Common::GzioReadStream::~GzioReadStream\28\29.2 can change the state due to Common::GzioReadStream::~GzioReadStream\28\29
[asyncify] GUI::GuiManager::getStringWidth\28Common::U32String\20const&\2c\20GUI::ThemeEngine::FontStyle\29\20const can change the state due to GUI::ThemeEngine::getStringWidth\28Common::U32String\20const&\2c\20GUI::ThemeEngine::FontStyle\29\20const
[asyncify] GUI::GuiManager::getStringWidth\28Common::String\20const&\2c\20GUI::ThemeEngine::FontStyle\29\20const can change the state due to GUI::ThemeEngine::getStringWidth\28Common::U32String\20const&\2c\20GUI::ThemeEngine::FontStyle\29\20const
[asyncify] Graphics::VectorRendererSpec<unsigned\20int>::blitKeyBitmap\28Graphics::ManagedSurface\20const*\2c\20Common::Point\20const&\2c\20bool\29 can change the state due to Graphics::ManagedSurface::blitFrom\28Graphics::ManagedSurface\20const&\2c\20Common::Rect\20const&\2c\20Common::Point\20const&\29
[asyncify] Graphics::VectorRendererSpec<unsigned\20short>::blitKeyBitmap\28Graphics::ManagedSurface\20const*\2c\20Common::Point\20const&\2c\20bool\29 can change the state due to Graphics::ManagedSurface::blitFrom\28Graphics::ManagedSurface\20const&\2c\20Common::Rect\20const&\2c\20Common::Point\20const&\29
[asyncify] Graphics::ManagedSurface::transBlitFrom\28Graphics::ManagedSurface\20const&\2c\20Common::Rect\20const&\2c\20Common::Point\20const&\2c\20unsigned\20int\2c\20bool\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to Graphics::ManagedSurface::transBlitFrom\28Graphics::ManagedSurface\20const&\2c\20Common::Rect\20const&\2c\20Common::Rect\20const&\2c\20unsigned\20int\2c\20bool\2c\20unsigned\20int\2c\20unsigned\20int\2c\20Graphics::Surface\20const*\2c\20bool\29
[asyncify] OpenGL::CLUT8LookUpPipeline::CLUT8LookUpPipeline\28\29 can change the state due to OpenGL::ShaderPipeline::ShaderPipeline\28OpenGL::Shader*\29
[asyncify] OpenGL::ShaderPipeline::~ShaderPipeline\28\29.1 can change the state due to OpenGL::ShaderPipeline::~ShaderPipeline\28\29
[asyncify] OpenGL::CLUT8LookUpPipeline::~CLUT8LookUpPipeline\28\29 can change the state due to OpenGL::ShaderPipeline::~ShaderPipeline\28\29
[asyncify] OpenGL::ShaderSurfaceRenderer::~ShaderSurfaceRenderer\28\29.1 can change the state due to OpenGL::ShaderSurfaceRenderer::~ShaderSurfaceRenderer\28\29
[asyncify] OpenGL::ShaderManager::~ShaderManager\28\29 can change the state due to OpenGL::Shader::~Shader\28\29
[asyncify] OpenGL::ShaderManager::notifyDestroy\28\29 can change the state due to OpenGL::Shader::~Shader\28\29
[asyncify] virtual\20thunk\20to\20SurfaceSdlGraphicsManager::clearOverlay\28\29 can change the state due to SurfaceSdlGraphicsManager::clearOverlay\28\29
[asyncify] MidiDriver_ADLIB::partKeyOff\28AdLibPart*\2c\20unsigned\20char\29 can change the state due to MidiDriver_ADLIB::mcOff\28AdLibVoice*\29
[asyncify] AdLibPart::sustain\28bool\29 can change the state due to MidiDriver_ADLIB::mcOff\28AdLibVoice*\29
[asyncify] AdLibPart::allNotesOff\28\29 can change the state due to MidiDriver_ADLIB::mcOff\28AdLibVoice*\29
[asyncify] AdLibPart::noteOn\28unsigned\20char\2c\20unsigned\20char\29 can change the state due to MidiDriver_ADLIB::partKeyOn\28AdLibPart*\2c\20AdLibInstrument\20const*\2c\20unsigned\20char\2c\20unsigned\20char\2c\20AdLibInstrument\20const*\2c\20unsigned\20char\29
[asyncify] AdLibPercussionChannel::noteOn\28unsigned\20char\2c\20unsigned\20char\29 can change the state due to MidiDriver_ADLIB::partKeyOn\28AdLibPart*\2c\20AdLibInstrument\20const*\2c\20unsigned\20char\2c\20unsigned\20char\2c\20AdLibInstrument\20const*\2c\20unsigned\20char\29
[asyncify] MidiDriver_ADLIB::adlibNoteOn\28int\2c\20unsigned\20char\2c\20int\29 can change the state due to MidiDriver_ADLIB::adlibNoteOnEx\28int\2c\20unsigned\20char\2c\20int\29
[asyncify] AdLibPart::volume\28unsigned\20char\29 can change the state due to MidiDriver_ADLIB::adlibSetParam\28int\2c\20unsigned\20char\2c\20int\2c\20bool\29
[asyncify] non-virtual\20thunk\20to\20OPL::EmulatedOPL::~EmulatedOPL\28\29 can change the state due to OPL::EmulatedOPL::~EmulatedOPL\28\29
[asyncify] non-virtual\20thunk\20to\20OPL::DOSBox::OPL::~OPL\28\29 can change the state due to OPL::DOSBox::OPL::~OPL\28\29
[asyncify] OPL::DOSBox::OPL::~OPL\28\29.1 can change the state due to OPL::DOSBox::OPL::~OPL\28\29
[asyncify] non-virtual\20thunk\20to\20OPL::MAME::OPL::~OPL\28\29 can change the state due to OPL::MAME::OPL::~OPL\28\29
[asyncify] OPL::MAME::OPL::~OPL\28\29.1 can change the state due to OPL::MAME::OPL::~OPL\28\29
[asyncify] non-virtual\20thunk\20to\20OPL::NUKED::OPL::~OPL\28\29 can change the state due to OPL::NUKED::OPL::~OPL\28\29
[asyncify] OPL::NUKED::OPL::~OPL\28\29.1 can change the state due to OPL::NUKED::OPL::~OPL\28\29
[asyncify] MidiDriver_TIMIDITY::sysEx\28unsigned\20char\20const*\2c\20unsigned\20short\29 can change the state due to MidiDriver::midiDriverCommonSysEx\28unsigned\20char\20const*\2c\20unsigned\20short\29
[asyncify] MidiDriver_ADLIB::~MidiDriver_ADLIB\28\29.1 can change the state due to MidiDriver_ADLIB::~MidiDriver_ADLIB\28\29
[asyncify] non-virtual\20thunk\20to\20MidiDriver_MT32::~MidiDriver_MT32\28\29 can change the state due to MidiDriver_MT32::~MidiDriver_MT32\28\29
[asyncify] MidiDriver_MT32::~MidiDriver_MT32\28\29.1 can change the state due to MidiDriver_MT32::~MidiDriver_MT32\28\29
[asyncify] Audio::MixerImpl::~MixerImpl\28\29.1 can change the state due to Audio::MixerImpl::~MixerImpl\28\29
[asyncify] SeqMusicPlugin::getDevices\28\29\20const can change the state due to byn$mgfn-shared$SeqMusicPlugin::getDevices\28\29\20const
[asyncify] AdLibEmuMusicPlugin::getDevices\28\29\20const can change the state due to byn$mgfn-shared$SeqMusicPlugin::getDevices\28\29\20const
[asyncify] NullMusicPlugin::getDevices\28\29\20const can change the state due to byn$mgfn-shared$SeqMusicPlugin::getDevices\28\29\20const
[asyncify] AutoMusicPlugin::getDevices\28\29\20const can change the state due to byn$mgfn-shared$SeqMusicPlugin::getDevices\28\29\20const
[asyncify] AmigaMusicPlugin::getDevices\28\29\20const can change the state due to byn$mgfn-shared$SeqMusicPlugin::getDevices\28\29\20const
[asyncify] CMSMusicPlugin::getDevices\28\29\20const can change the state due to byn$mgfn-shared$SeqMusicPlugin::getDevices\28\29\20const
[asyncify] TownsEmuMusicPlugin::getDevices\28\29\20const can change the state due to byn$mgfn-shared$SeqMusicPlugin::getDevices\28\29\20const
[asyncify] PC98EmuMusicPlugin::getDevices\28\29\20const can change the state due to byn$mgfn-shared$SeqMusicPlugin::getDevices\28\29\20const
[asyncify] SegaCDSoundPlugin::getDevices\28\29\20const can change the state due to byn$mgfn-shared$SeqMusicPlugin::getDevices\28\29\20const
[asyncify] AppleIIGSMusicPlugin::getDevices\28\29\20const can change the state due to byn$mgfn-shared$SeqMusicPlugin::getDevices\28\29\20const
[asyncify] MT32EmuMusicPlugin::getDevices\28\29\20const can change the state due to byn$mgfn-shared$SeqMusicPlugin::getDevices\28\29\20const
[asyncify] PCSpeakerMusicPlugin::getDevices\28\29\20const can change the state due to byn$mgfn-shared$SeqMusicPlugin::getDevices\28\29\20const
[asyncify] PCjrMusicPlugin::getDevices\28\29\20const can change the state due to byn$mgfn-shared$SeqMusicPlugin::getDevices\28\29\20const
[asyncify] C64MusicPlugin::getDevices\28\29\20const can change the state due to byn$mgfn-shared$SeqMusicPlugin::getDevices\28\29\20const
[asyncify] non-virtual\20thunk\20to\20Audio::QuickTimeAudioStream::~QuickTimeAudioStream\28\29.1 can change the state due to Audio::QuickTimeAudioStream::~QuickTimeAudioStream\28\29.1
[asyncify] OPL::DOSBox::DBOPL::Channel*\20OPL::DOSBox::DBOPL::Channel::BlockTemplate<\28OPL::DOSBox::DBOPL::SynthMode\291>\28OPL::DOSBox::DBOPL::Chip*\2c\20unsigned\20int\2c\20int*\29 can change the state due to OPL::DOSBox::DBOPL::Operator::GetSample\28int\29
[asyncify] OPL::DOSBox::DBOPL::Channel*\20OPL::DOSBox::DBOPL::Channel::BlockTemplate<\28OPL::DOSBox::DBOPL::SynthMode\295>\28OPL::DOSBox::DBOPL::Chip*\2c\20unsigned\20int\2c\20int*\29 can change the state due to OPL::DOSBox::DBOPL::Operator::GetSample\28int\29
[asyncify] OPL::DOSBox::DBOPL::Channel*\20OPL::DOSBox::DBOPL::Channel::BlockTemplate<\28OPL::DOSBox::DBOPL::SynthMode\296>\28OPL::DOSBox::DBOPL::Chip*\2c\20unsigned\20int\2c\20int*\29 can change the state due to OPL::DOSBox::DBOPL::Operator::GetSample\28int\29
[asyncify] OPL::DOSBox::DBOPL::Channel*\20OPL::DOSBox::DBOPL::Channel::BlockTemplate<\28OPL::DOSBox::DBOPL::SynthMode\297>\28OPL::DOSBox::DBOPL::Chip*\2c\20unsigned\20int\2c\20int*\29 can change the state due to OPL::DOSBox::DBOPL::Operator::GetSample\28int\29
[asyncify] OPL::DOSBox::DBOPL::Channel*\20OPL::DOSBox::DBOPL::Channel::BlockTemplate<\28OPL::DOSBox::DBOPL::SynthMode\298>\28OPL::DOSBox::DBOPL::Chip*\2c\20unsigned\20int\2c\20int*\29 can change the state due to OPL::DOSBox::DBOPL::Operator::GetSample\28int\29
[asyncify] OPL::DOSBox::DBOPL::Channel*\20OPL::DOSBox::DBOPL::Channel::BlockTemplate<\28OPL::DOSBox::DBOPL::SynthMode\292>\28OPL::DOSBox::DBOPL::Chip*\2c\20unsigned\20int\2c\20int*\29 can change the state due to OPL::DOSBox::DBOPL::Operator::GetSample\28int\29
[asyncify] OPL::DOSBox::DBOPL::Channel*\20OPL::DOSBox::DBOPL::Channel::BlockTemplate<\28OPL::DOSBox::DBOPL::SynthMode\293>\28OPL::DOSBox::DBOPL::Chip*\2c\20unsigned\20int\2c\20int*\29 can change the state due to OPL::DOSBox::DBOPL::Operator::GetSample\28int\29
[asyncify] OPL::DOSBox::DBOPL::Channel*\20OPL::DOSBox::DBOPL::Channel::BlockTemplate<\28OPL::DOSBox::DBOPL::SynthMode\290>\28OPL::DOSBox::DBOPL::Chip*\2c\20unsigned\20int\2c\20int*\29 can change the state due to OPL::DOSBox::DBOPL::Operator::GetSample\28int\29
[asyncify] OPL::MAME::OPL::reset\28\29 can change the state due to OPL::MAME::OPLResetChip\28OPL::MAME::fm_opl_f*\29
[asyncify] virtual\20thunk\20to\20OSystem_SDL::addSysArchivesToSearchSet\28Common::SearchSet&\2c\20int\29 can change the state due to OSystem_SDL::addSysArchivesToSearchSet\28Common::SearchSet&\2c\20int\29
[asyncify] virtual\20thunk\20to\20OSystem_POSIX::addSysArchivesToSearchSet\28Common::SearchSet&\2c\20int\29 can change the state due to OSystem_POSIX::addSysArchivesToSearchSet\28Common::SearchSet&\2c\20int\29
[asyncify] debug\28char\20const*\2c\20...\29 can change the state due to byn$mgfn-shared$debug\28char\20const*\2c\20...\29
[asyncify] debugN\28char\20const*\2c\20...\29 can change the state due to byn$mgfn-shared$debug\28char\20const*\2c\20...\29
[asyncify] debug\28int\2c\20char\20const*\2c\20...\29 can change the state due to byn$mgfn-shared$debug\28int\2c\20char\20const*\2c\20...\29
[asyncify] debugN\28int\2c\20char\20const*\2c\20...\29 can change the state due to byn$mgfn-shared$debug\28int\2c\20char\20const*\2c\20...\29
[asyncify] non-virtual\20thunk\20to\20Common::VirtualMouse::~VirtualMouse\28\29 can change the state due to Common::VirtualMouse::~VirtualMouse\28\29
[asyncify] Common::VirtualMouse::~VirtualMouse\28\29.1 can change the state due to Common::VirtualMouse::~VirtualMouse\28\29
[asyncify] non-virtual\20thunk\20to\20Common::OSDMessageQueue::~OSDMessageQueue\28\29 can change the state due to Common::OSDMessageQueue::~OSDMessageQueue\28\29
[asyncify] Common::OSDMessageQueue::~OSDMessageQueue\28\29.1 can change the state due to Common::OSDMessageQueue::~OSDMessageQueue\28\29
[asyncify] Common::File::~File\28\29.2 can change the state due to Common::File::~File\28\29.1
[asyncify] Gob::DataIO::Archive::~Archive\28\29 can change the state due to Common::File::~File\28\29.1
[asyncify] Scumm::ScummDiskImage::~ScummDiskImage\28\29.2 can change the state due to Scumm::ScummDiskImage::~ScummDiskImage\28\29
[asyncify] Scumm::ScummNESFile::~ScummNESFile\28\29.1 can change the state due to Scumm::ScummNESFile::~ScummNESFile\28\29
[asyncify] Scumm::ScummDiskImage::fileReadUint16LE\28\29 can change the state due to Scumm::ScummDiskImage::fileReadByte\28\29
[asyncify] Common::FSDirectory::lookupCache\28Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>&\2c\20Common::String\20const&\29\20const can change the state due to Common::FSDirectory::ensureCached\28\29\20const
[asyncify] Common::BaseString<char>::decRefCount\28int*\29 can change the state due to Common::lockMemoryPoolMutex\28\29
[asyncify] DefaultTimerManager::~DefaultTimerManager\28\29.1 can change the state due to DefaultTimerManager::~DefaultTimerManager\28\29
[asyncify] virtual\20thunk\20to\20SurfaceSdlGraphicsManager::lockScreen\28\29 can change the state due to SurfaceSdlGraphicsManager::lockScreen\28\29
[asyncify] virtual\20thunk\20to\20SurfaceSdlGraphicsManager::unlockScreen\28\29 can change the state due to SurfaceSdlGraphicsManager::unlockScreen\28\29
[asyncify] virtual\20thunk\20to\20SurfaceSdlGraphicsManager::setStretchMode\28int\29 can change the state due to SurfaceSdlGraphicsManager::setStretchMode\28int\29
[asyncify] virtual\20thunk\20to\20SurfaceSdlGraphicsManager::displayActivityIconOnOSD\28Graphics::Surface\20const*\29 can change the state due to SurfaceSdlGraphicsManager::displayActivityIconOnOSD\28Graphics::Surface\20const*\29
[asyncify] non-virtual\20thunk\20to\20MidiDriver_MT32::send\28unsigned\20int\29 can change the state due to MidiDriver_MT32::send\28unsigned\20int\29
[asyncify] non-virtual\20thunk\20to\20MidiDriver_MT32::setPitchBendRange\28unsigned\20char\2c\20unsigned\20int\29 can change the state due to MidiDriver_MT32::setPitchBendRange\28unsigned\20char\2c\20unsigned\20int\29
[asyncify] non-virtual\20thunk\20to\20MidiDriver_MT32::sysEx\28unsigned\20char\20const*\2c\20unsigned\20short\29 can change the state due to MidiDriver_MT32::sysEx\28unsigned\20char\20const*\2c\20unsigned\20short\29
[asyncify] virtual\20thunk\20to\20OSystem_SDL::quit\28\29 can change the state due to OSystem_SDL::quit\28\29
[asyncify] virtual\20thunk\20to\20OSystem_SDL::fatalError\28\29 can change the state due to OSystem_SDL::fatalError\28\29
[asyncify] GUI::ThemeParser::parserCallback_font\28Common::XMLParser::ParserNode*\29 can change the state due to GUI::ThemeParser::resolutionCheck\28Common::String\20const&\29
[asyncify] Common::Keymapper::addGlobalKeymap\28Common::Keymap*\29 can change the state due to Common::Keymapper::initKeymap\28Common::Keymap*\2c\20Common::ConfigManager::Domain*\29
[asyncify] MidiDriver_TIMIDITY::timidity_meta_seq\28int\2c\20int\2c\20int\29 can change the state due to MidiDriver_TIMIDITY::timidity_write_data\28void\20const*\2c\20unsigned\20long\29
[asyncify] virtual\20thunk\20to\20SdlGraphicsManager::initSizeHint\28Common::Array<Graphics::Mode>\20const&\29 can change the state due to SdlGraphicsManager::initSizeHint\28Common::Array<Graphics::Mode>\20const&\29
[asyncify] OpenGL::LibRetro::PresetParser::lookUpValueScale\28Common::String\20const&\2c\20float*\2c\20unsigned\20int*\2c\20OpenGL::LibRetro::ScaleType\29 can change the state due to OpenGL::LibRetro::PresetParser::lookUpValue\28Common::String\20const&\2c\20unsigned\20int*\29
[asyncify] Graphics::TTFFont::assureCached\28unsigned\20int\29\20const can change the state due to Graphics::TTFFont::cacheGlyph\28Graphics::TTFFont::Glyph&\2c\20unsigned\20int\29\20const
[asyncify] OpenGL::Shader::enableVertexAttribute\28char\20const*\2c\20int\2c\20unsigned\20int\2c\20unsigned\20char\2c\20int\2c\20void\20const*\29 can change the state due to OpenGL::Shader::getAttribute\28char\20const*\29
[asyncify] OpenGL::Shader::enableVertexAttribute\28char\20const*\2c\20unsigned\20int\2c\20int\2c\20unsigned\20int\2c\20unsigned\20char\2c\20int\2c\20unsigned\20int\29 can change the state due to OpenGL::Shader::getAttribute\28char\20const*\29
[asyncify] Common::String::operator+=\28char\29 can change the state due to Common::BaseString<char>::assignAppend\28char\29
[asyncify] Common::operator+\28Common::String\20const&\2c\20char\29 can change the state due to Common::BaseString<char>::assignAppend\28char\29
[asyncify] Common::normalizePath\28Common::String\20const&\2c\20char\29 can change the state due to Common::BaseString<char>::assignAppend\28char\29
[asyncify] Common::tag2string\28unsigned\20int\2c\20bool\29 can change the state due to Common::BaseString<char>::assignAppend\28char\29
[asyncify] Common::toPrintable\28Common::String\20const&\2c\20bool\29 can change the state due to Common::BaseString<char>::assignAppend\28char\29
[asyncify] Common::DebugManager::addAllDebugChannels\28DebugChannelDef\20const*\29 can change the state due to Common::DebugManager::addDebugChannels\28DebugChannelDef\20const*\29
[asyncify] Common::DebugManager::removeAllDebugChannels\28\29 can change the state due to Common::DebugManager::addDebugChannels\28DebugChannelDef\20const*\29
[asyncify] scumm_strdup\28char\20const*\29 can change the state due to Common::strcpy_s\28char*\2c\20unsigned\20long\2c\20char\20const*\29
[asyncify] Common::convertBiDiU32String\28Common::U32String\20const&\2c\20Common::BiDiParagraph\29 can change the state due to Common::UnicodeBiDiText::UnicodeBiDiText\28Common::U32String\20const&\2c\20Common::BiDiParagraph\29
[asyncify] Common::U32String::formatInternal\28Common::U32String\20const*\2c\20...\29 can change the state due to Common::U32String::vformat\28char32_t\20const*\2c\20char32_t\20const*\2c\20Common::U32String&\2c\20void*\29
[asyncify] Common::U32String::format\28char\20const*\2c\20...\29 can change the state due to Common::U32String::vformat\28char32_t\20const*\2c\20char32_t\20const*\2c\20Common::U32String&\2c\20void*\29
[asyncify] Agi::WagFileParser::addPropFromIni\28Common::INIFile*\2c\20Common::String\2c\20Common::String\2c\20Agi::WagProperty::WagPropertyCode\29 can change the state due to Common::INIFile::getKey\28Common::String\20const&\2c\20Common::String\20const&\2c\20Common::String&\29\20const
[asyncify] virtual\20thunk\20to\20OSystem_SDL::openUrl\28Common::String\20const&\29 can change the state due to OSystem_SDL::openUrl\28Common::String\20const&\29
[asyncify] byn$mgfn-shared$GUI::DropdownButtonWidget::appendEntry\28Common::U32String\20const&\2c\20unsigned\20int\29 can change the state due to Common::Array<GUI::DropdownButtonWidget::Entry>::push_back\28GUI::DropdownButtonWidget::Entry\20const&\29
[asyncify] Common::HashMap<Common::U32String\2c\20int\2c\20Common::Hash<Common::U32String>\2c\20Common::EqualTo<Common::U32String>>::getVal\28Common::U32String\20const&\29 can change the state due to void\20Common::unknownKeyError<Common::U32String>\28Common::U32String\29
[asyncify] Common::HashMap<Common::WinResourceID\2c\20Common::HashMap<Common::WinResourceID\2c\20Common::String\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>::getVal\28Common::WinResourceID\20const&\29\20const can change the state due to void\20Common::unknownKeyError<Common::U32String>\28Common::U32String\29
[asyncify] Common::HashMap<Common::WinResourceID\2c\20Common::HashMap<Common::WinResourceID\2c\20Common::HashMap<Common::WinResourceID\2c\20Common::PEResources::Resource\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>::getVal\28Common::WinResourceID\20const&\29\20const can change the state due to void\20Common::unknownKeyError<Common::U32String>\28Common::U32String\29
[asyncify] Common::HashMap<Common::WinResourceID\2c\20Common::HashMap<Common::WinResourceID\2c\20Common::PEResources::Resource\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>::getVal\28Common::WinResourceID\20const&\29\20const can change the state due to void\20Common::unknownKeyError<Common::U32String>\28Common::U32String\29
[asyncify] GUI::ListWidget::getSelectedString\28\29\20const can change the state due to GUI::ListWidget::stripGUIformatting\28Common::U32String\20const&\29
[asyncify] virtual\20thunk\20to\20SurfaceSdlGraphicsManager::grabOverlay\28Graphics::Surface&\29\20const can change the state due to SurfaceSdlGraphicsManager::grabOverlay\28Graphics::Surface&\29\20const
[asyncify] Image::BitmapRawDecoder::BitmapRawDecoder\28int\2c\20int\2c\20int\2c\20bool\2c\20bool\29 can change the state due to Image::BitmapRawDecoder::getPixelFormat\28\29\20const
[asyncify] Graphics::AmigaFont::getCharWidth\28unsigned\20int\29\20const can change the state due to Graphics::AmigaFont::mapChar\28unsigned\20int\29\20const
[asyncify] Graphics::AmigaFont::getKerningOffset\28unsigned\20int\2c\20unsigned\20int\29\20const can change the state due to Graphics::AmigaFont::mapChar\28unsigned\20int\29\20const
[asyncify] Graphics::AmigaFont::drawChar\28Graphics::Surface*\2c\20unsigned\20int\2c\20int\2c\20int\2c\20unsigned\20int\29\20const can change the state due to Graphics::AmigaFont::mapChar\28unsigned\20int\29\20const
[asyncify] OpenGLSdlGraphics3dManager::clearOverlay\28\29 can change the state due to Graphics::Surface::fillRect\28Common::Rect\2c\20unsigned\20int\29
[asyncify] GUI::GlobalOptionsDialog::apply\28\29::$_0::operator\28\29\28GUI::StaticTextWidget*\2c\20Common::String\20const&\2c\20Common::U32String\20const&\29\20const can change the state due to Common::ConfigManager::removeKey\28Common::String\20const&\2c\20Common::String\20const&\29
[asyncify] AgiMetaEngineDetection::parseAndCustomizeGuiOptions\28Common::String\20const&\2c\20Common::String\20const&\29\20const can change the state due to Common::ConfigManager::get\28Common::String\20const&\2c\20Common::String\20const&\29\20const
[asyncify] ScummMetaEngineDetection::parseAndCustomizeGuiOptions\28Common::String\20const&\2c\20Common::String\20const&\29\20const can change the state due to Common::ConfigManager::get\28Common::String\20const&\2c\20Common::String\20const&\29\20const
[asyncify] GUI::LauncherFilterMatcher\28void*\2c\20int\2c\20Common::U32String\20const&\2c\20Common::U32String\20const&\29 can change the state due to Common::ConfigManager::get\28Common::String\20const&\2c\20Common::String\20const&\29\20const
[asyncify] Common::VirtualMouse::handleAxisMotion\28short\2c\20short\29 can change the state due to Common::ConfigManager::getInt\28Common::String\20const&\2c\20Common::String\20const&\29\20const
[asyncify] SdlMixerManager::getAudioSpec\28unsigned\20int\29 can change the state due to Common::ConfigManager::getInt\28Common::String\20const&\2c\20Common::String\20const&\29\20const
[asyncify] OpenGLSdlGraphicsManager::OpenGLSdlGraphicsManager\28SdlEventSource*\2c\20SdlWindow*\29 can change the state due to Common::ConfigManager::getInt\28Common::String\20const&\2c\20Common::String\20const&\29\20const
[asyncify] Common::ConfigManager::setInt\28Common::String\20const&\2c\20int\2c\20Common::String\20const&\29 can change the state due to Common::ConfigManager::set\28Common::String\20const&\2c\20Common::String\20const&\2c\20Common::String\20const&\29
[asyncify] Common::ConfigManager::setBool\28Common::String\20const&\2c\20bool\2c\20Common::String\20const&\29 can change the state due to Common::ConfigManager::set\28Common::String\20const&\2c\20Common::String\20const&\2c\20Common::String\20const&\29
[asyncify] Base::createTemporaryTarget\28Common::String\20const&\2c\20Common::String\20const&\29 can change the state due to Common::ConfigManager::set\28Common::String\20const&\2c\20Common::String\20const&\2c\20Common::String\20const&\29
[asyncify] \28anonymous\20namespace\29::addStringToConf\28Common::String\20const&\2c\20Common::String\20const&\2c\20Common::String\20const&\29 can change the state due to Common::ConfigManager::set\28Common::String\20const&\2c\20Common::String\20const&\2c\20Common::String\20const&\29
[asyncify] Common::HashMap<Common::String\2c\20Common::ConfigManager::Domain\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::getVal\28Common::String\20const&\29\20const can change the state due to void\20Common::unknownKeyError<Common::String>\28Common::String\29
[asyncify] Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::getVal\28Common::String\20const&\29\20const can change the state due to void\20Common::unknownKeyError<Common::String>\28Common::String\29
[asyncify] Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::getVal\28Common::String\20const&\29 can change the state due to void\20Common::unknownKeyError<Common::String>\28Common::String\29
[asyncify] Common::HashMap<Common::String\2c\20Common::Array<Common::AchievementDescription>\2c\20Common::Hash<Common::String>\2c\20Common::EqualTo<Common::String>>::getVal\28Common::String\20const&\29\20const can change the state due to void\20Common::unknownKeyError<Common::String>\28Common::String\29
[asyncify] Common::HashMap<Common::String\2c\20Graphics::ManagedSurface*\2c\20Common::Hash<Common::String>\2c\20Common::EqualTo<Common::String>>::getVal\28Common::String\20const&\29\20const can change the state due to void\20Common::unknownKeyError<Common::String>\28Common::String\29
[asyncify] Common::Array<Common::Language>::push_back\28Common::Language\20const&\29 can change the state due to Common::Array<bool>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<Common::Language>::Array\28Common::Array<Common::Language>\20const&\29 can change the state due to Common::Array<bool>::allocCapacity\28unsigned\20int\29
[asyncify] GUI::LangExtraFont::operator=\28GUI::LangExtraFont\20const&\29 can change the state due to Common::Array<bool>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<unsigned\20char>::push_back\28unsigned\20char\20const&\29 can change the state due to Common::Array<bool>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<bool>::Array\28unsigned\20int\29 can change the state due to Common::Array<bool>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<unsigned\20char>::resize\28unsigned\20int\29 can change the state due to Common::Array<bool>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<OpenGL::VertexAttrib>::allocCapacity\28unsigned\20int\29 can change the state due to byn$mgfn-shared$Common::Array<Agi::WagProperty>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<OpenGL::LibRetroPipeline::Texture>::allocCapacity\28unsigned\20int\29 can change the state due to byn$mgfn-shared$Common::Array<Agi::WagProperty>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<Agi::WagProperty>::allocCapacity\28unsigned\20int\29 can change the state due to byn$mgfn-shared$Common::Array<Agi::WagProperty>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<DetectedGame>::allocCapacity\28unsigned\20int\29 can change the state due to byn$mgfn-shared$Common::Array<Agi::WagProperty>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<OSystem::GraphicsMode>::allocCapacity\28unsigned\20int\29 can change the state due to byn$mgfn-shared$Common::Array<Agi::WagProperty>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<GUI::LauncherEntry>::allocCapacity\28unsigned\20int\29 can change the state due to byn$mgfn-shared$Common::Array<Agi::WagProperty>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<GUI::GridItemInfo>::allocCapacity\28unsigned\20int\29 can change the state due to byn$mgfn-shared$Common::Array<Agi::WagProperty>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<Common::RemapWidget::ActionRow>::allocCapacity\28unsigned\20int\29 can change the state due to byn$mgfn-shared$Common::Array<PlainGameDescriptor>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<unsigned\20short>::allocCapacity\28unsigned\20int\29 can change the state due to byn$mgfn-shared$Common::Array<PlainGameDescriptor>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<PlainGameDescriptor>::allocCapacity\28unsigned\20int\29 can change the state due to byn$mgfn-shared$Common::Array<PlainGameDescriptor>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<Common::String>::allocCapacity\28unsigned\20int\29 can change the state due to byn$mgfn-shared$Common::Array<PlainGameDescriptor>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<Gob::DataIO::Archive*>::allocCapacity\28unsigned\20int\29 can change the state due to byn$mgfn-shared$Common::Array<PlainGameDescriptor>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<Common::U32String>::allocCapacity\28unsigned\20int\29 can change the state due to byn$mgfn-shared$Common::Array<PlainGameDescriptor>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<QualifiedGameDescriptor>::push_back\28QualifiedGameDescriptor\20const&\29 can change the state due to Common::Array<QualifiedGameDescriptor>::insert_aux\28QualifiedGameDescriptor*\2c\20QualifiedGameDescriptor\20const*\2c\20QualifiedGameDescriptor\20const*\29
[asyncify] Common::Array<SaveStateDescriptor>::push_back\28SaveStateDescriptor\20const&\29 can change the state due to Common::Array<SaveStateDescriptor>::insert_aux\28SaveStateDescriptor*\2c\20SaveStateDescriptor\20const*\2c\20SaveStateDescriptor\20const*\29
[asyncify] Common::GzioReadStream::read\28void*\2c\20unsigned\20int\29 can change the state due to Common::GzioReadStream::readAtOffset\28long\20long\2c\20unsigned\20char*\2c\20unsigned\20int\29
[asyncify] Common::NEResources::~NEResources\28\29.1 can change the state due to Common::NEResources::~NEResources\28\29
[asyncify] Common::PEResources::~PEResources\28\29.1 can change the state due to Common::PEResources::~PEResources\28\29
[asyncify] GUI::ThemeParser::~ThemeParser\28\29.1 can change the state due to GUI::ThemeParser::~ThemeParser\28\29
[asyncify] GUI::MetadataParser::~MetadataParser\28\29.1 can change the state due to GUI::MetadataParser::~MetadataParser\28\29
[asyncify] MT32Emu::Part::allNotesOff\28\29 can change the state due to MT32Emu::Poly::noteOff\28bool\29
[asyncify] MT32Emu::Part::stopNote\28unsigned\20int\29 can change the state due to MT32Emu::Poly::noteOff\28bool\29
[asyncify] MT32Emu::Part::setHoldPedal\28bool\29 can change the state due to MT32Emu::Poly::startDecay\28\29
[asyncify] MT32Emu::Part::allSoundOff\28\29 can change the state due to MT32Emu::Poly::startDecay\28\29
[asyncify] MT32Emu::BReverbModelImpl<short>::~BReverbModelImpl\28\29.1 can change the state due to MT32Emu::BReverbModelImpl<short>::~BReverbModelImpl\28\29
[asyncify] MT32Emu::BReverbModelImpl<float>::~BReverbModelImpl\28\29.1 can change the state due to MT32Emu::BReverbModelImpl<float>::~BReverbModelImpl\28\29
[asyncify] non-virtual\20thunk\20to\20MT32Emu::DefaultMidiStreamParser::printDebug\28char\20const*\29 can change the state due to MT32Emu::DefaultMidiStreamParser::printDebug\28char\20const*\29
[asyncify] af_property_set can change the state due to af_face_globals_new
[asyncify] af_property_get can change the state due to af_face_globals_new
[asyncify] Graphics::TTFLibrary::~TTFLibrary\28\29.1 can change the state due to Graphics::TTFLibrary::~TTFLibrary\28\29
[asyncify] Graphics::TTFLibrary::closeFont\28FT_FaceRec_*&\29 can change the state due to FT_Done_Face
[asyncify] Graphics::TTFFont::~TTFFont\28\29 can change the state due to Common::Singleton<Graphics::TTFLibrary>::instance\28\29
[asyncify] pfr_get_kerning can change the state due to pfr_face_get_kerning
[asyncify] sfnt_get_charset_id can change the state due to tt_face_find_bdf_prop
[asyncify] raccess_guess_apple_double can change the state due to raccess_guess_apple_generic
[asyncify] raccess_guess_apple_single can change the state due to raccess_guess_apple_generic
[asyncify] pcf_get_metric can change the state due to FT_Stream_ReadFields
[asyncify] raccess_guess_vfat can change the state due to raccess_make_file_name
[asyncify] raccess_guess_linux_cap can change the state due to raccess_make_file_name
[asyncify] ps_parser_load_field_table can change the state due to ps_parser_load_field
[asyncify] af_dummy_hints_apply can change the state due to af_glyph_hints_reload
[asyncify] af_latin_hints_apply can change the state due to af_glyph_hints_reload
[asyncify] af_cjk_hints_apply can change the state due to af_glyph_hints_reload
[asyncify] af_latin_hints_detect_features can change the state due to af_latin_hints_compute_segments
[asyncify] af_cjk_hints_detect_features can change the state due to af_latin_hints_compute_segments
[asyncify] cf2_builder_lineTo can change the state due to FT_GlyphLoader_CheckPoints
[asyncify] cf2_builder_cubeTo can change the state due to FT_GlyphLoader_CheckPoints
[asyncify] cff_builder_start_point can change the state due to FT_GlyphLoader_CheckPoints
[asyncify] t1_builder_check_points can change the state due to FT_GlyphLoader_CheckPoints
[asyncify] t1_builder_add_point1 can change the state due to FT_GlyphLoader_CheckPoints
[asyncify] t1_builder_add_contour can change the state due to FT_GlyphLoader_CheckPoints
[asyncify] t1_builder_start_point can change the state due to FT_GlyphLoader_CheckPoints
[asyncify] TT_Load_Simple_Glyph can change the state due to FT_GlyphLoader_CheckPoints
[asyncify] TT_Load_Composite_Glyph can change the state due to FT_GlyphLoader_CheckSubGlyphs
[asyncify] cf2_doStems can change the state due to cf2_arrstack_push
[asyncify] cf2_hintmap_build can change the state due to cf2_arrstack_push
[asyncify] _bdf_parse_properties can change the state due to _bdf_list_split
[asyncify] ps_hints_close can change the state due to ps_dimension_end
[asyncify] t1_hints_stem can change the state due to ps_dimension_add_t1stem
[asyncify] t2_hints_stems can change the state due to ps_dimension_add_t1stem
[asyncify] ps_hints_t2counter can change the state due to ps_dimension_set_mask_bits
[asyncify] ps_hints_t2mask can change the state due to ps_dimension_set_mask_bits
[asyncify] BDF_Glyph_Load can change the state due to ft_glyphslot_set_bitmap
[asyncify] tt_face_free_sbit can change the state due to FT_Stream_ReleaseFrame
[asyncify] TT_Forget_Glyph_Frame can change the state due to FT_Stream_ExitFrame
[asyncify] ps_hinter_done can change the state due to ps_dimension_done
[asyncify] tt_size_done can change the state due to tt_size_done_bytecode
[asyncify] raccess_guess_darwin_ufs_export can change the state due to byn$mgfn-shared$raccess_guess_darwin_ufs_export
[asyncify] raccess_guess_linux_double can change the state due to byn$mgfn-shared$raccess_guess_darwin_ufs_export
[asyncify] raccess_guess_linux_netatalk can change the state due to byn$mgfn-shared$raccess_guess_darwin_ufs_export
[asyncify] png_get_IHDR can change the state due to png_check_IHDR
[asyncify] png_set_IHDR can change the state due to png_check_IHDR
[asyncify] png_colorspace_set_sRGB can change the state due to png_benign_error
[asyncify] png_chunk_benign_error can change the state due to png_chunk_error
[asyncify] png_handle_IEND can change the state due to png_chunk_error
[asyncify] png_set_expand can change the state due to png_app_error
[asyncify] png_icc_profile_error can change the state due to png_chunk_report
[asyncify] png_read_finish_row can change the state due to png_read_IDAT_data
[asyncify] png_write_chunk can change the state due to png_write_complete_chunk
[asyncify] png_write_tIME can change the state due to png_write_complete_chunk
[asyncify] png_write_finish_row can change the state due to png_compress_IDAT
[asyncify] SdlMixerManager::~SdlMixerManager\28\29.1 can change the state due to SdlMixerManager::~SdlMixerManager\28\29
[asyncify] SdlTimerManager::~SdlTimerManager\28\29.1 can change the state due to SdlTimerManager::~SdlTimerManager\28\29
[asyncify] SdlMixerManager::suspendAudio\28\29 can change the state due to SDL_CloseAudio
[asyncify] SDL_BufferQueueFillCallback can change the state due to SDL_WriteToDataQueue
[asyncify] SDL_AudioOpenDevice_Default can change the state due to SDL_Error
[asyncify] SDL_BlendPoint_RGB can change the state due to SDL_Error
[asyncify] SDL_BlendPoint_RGBA can change the state due to SDL_Error
[asyncify] SDL_BlendFillRect_RGB can change the state due to SDL_Error
[asyncify] SDL_BlendFillRect_RGBA can change the state due to SDL_Error
[asyncify] stdio_write can change the state due to SDL_Error
[asyncify] SDL_SetSurfaceBlendMode can change the state due to SDL_Error
[asyncify] EMSCRIPTEN_JoystickRumble can change the state due to SDL_Error
[asyncify] EMSCRIPTEN_JoystickSetLED can change the state due to SDL_Error
[asyncify] Emscripten_WarpMouse can change the state due to SDL_Error
[asyncify] SDLgfx_rotateSurface can change the state due to SDL_FillRect
[asyncify] SDL_GameControllerGetAxis can change the state due to SDL_JoystickGetAxis
[asyncify] SDL_InitFormat can change the state due to SDL_PixelFormatEnumToMasks
[asyncify] Emscripten_CreateWindowFramebuffer can change the state due to SDL_PixelFormatEnumToMasks
[asyncify] SDL_SetClipRect can change the state due to SDL_IntersectRect
[asyncify] SDL_SoftStretch can change the state due to SDL_UpperSoftStretch
[asyncify] SDL_SoftStretchLinear can change the state due to SDL_UpperSoftStretch
[asyncify] SurfaceSdlGraphicsManager::SDL_SetColorKey\28SDL_Surface*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to SDL_SetColorKey
[asyncify] SdlWindow::getDesktopResolution\28\29 can change the state due to SDL_GetDesktopDisplayMode
[asyncify] SdlWindow::~SdlWindow\28\29 can change the state due to SdlWindow::destroyWindow\28\29
[asyncify] DISKAUDIO_DetectDevices can change the state due to SDL_AddAudioDevice
[asyncify] EMSCRIPTEN_JoystickUpdate can change the state due to SDL_PrivateJoystickAxis
[asyncify] SDL_AutoUpdateJoysticksChanged can change the state due to SDL_JoystickEventState
[asyncify] SDL_ResetKeyboard can change the state due to SDL_SendKeyboardKeyInternal
[asyncify] SDL_ReleaseAutoReleaseKeys can change the state due to SDL_SendKeyboardKeyInternal
[asyncify] SDL_SendPendingSignalEvents can change the state due to SDL_SendAppEvent
[asyncify] Emscripten_HandleBeforeUnload can change the state due to SDL_SendAppEvent
[asyncify] SdlEventSource::~SdlEventSource\28\29 can change the state due to SdlEventSource::closeJoystick\28\29
[asyncify] debug_print can change the state due to byn$mgfn-shared$debug_print
[asyncify] SDL_Log can change the state due to byn$mgfn-shared$debug_print
[asyncify] SDL_LogCritical can change the state due to byn$mgfn-shared$debug_print
[asyncify] SDL_MouseTouchEventsChanged can change the state due to SDL_AddTouch
[asyncify] GLES2_QueueGeometry can change the state due to SDL_AllocateRenderVertices
[asyncify] GLES2_QueueDrawLines can change the state due to SDL_AllocateRenderVertices
[asyncify] GLES2_QueueDrawPoints can change the state due to SDL_AllocateRenderVertices
[asyncify] SW_QueueGeometry can change the state due to SDL_AllocateRenderVertices
[asyncify] SW_QueueCopyEx can change the state due to SDL_AllocateRenderVertices
[asyncify] SW_QueueCopy can change the state due to SDL_AllocateRenderVertices
[asyncify] SW_QueueFillRects can change the state due to SDL_AllocateRenderVertices
[asyncify] SW_QueueDrawPoints can change the state due to SDL_AllocateRenderVertices
[asyncify] SDL_SetSurfaceRLE can change the state due to SDL_InvalidateMap
[asyncify] SDL_SetSurfaceColorMod can change the state due to SDL_InvalidateMap
[asyncify] SDL_SetSurfaceAlphaMod can change the state due to SDL_InvalidateMap
[asyncify] SurfaceSdlGraphicsManager::removeOSDMessage\28\29 can change the state due to SDL_FreeSurface
[asyncify] SW_DestroyTexture can change the state due to SDL_FreeSurface
[asyncify] Emscripten_DestroyWindowFramebuffer can change the state due to SDL_FreeSurface
[asyncify] SdlMutexInternal::~SdlMutexInternal\28\29 can change the state due to SDL_DestroyMutex
[asyncify] Emscripten_HandleMouseMove can change the state due to SDL_SendMouseMotion
[asyncify] virtual\20thunk\20to\20SdlGraphicsManager::lockMouse\28bool\29 can change the state due to SdlGraphicsManager::lockMouse\28bool\29
[asyncify] virtual\20thunk\20to\20SdlGraphicsManager::setSystemMousePosition\28int\2c\20int\29 can change the state due to SdlGraphicsManager::setSystemMousePosition\28int\2c\20int\29
[asyncify] SDL_RLEBlit can change the state due to SDL_UnlockSurface
[asyncify] SDL_RLEAlphaBlit can change the state due to SDL_UnlockSurface
[asyncify] SW_UpdateTexture can change the state due to SDL_UnlockSurface
[asyncify] virtual\20thunk\20to\20OSystem_SDL::engineInit\28\29 can change the state due to OSystem_SDL::engineInit\28\29
[asyncify] virtual\20thunk\20to\20OSystem_SDL::setWindowCaption\28Common::U32String\20const&\29 can change the state due to OSystem_SDL::setWindowCaption\28Common::U32String\20const&\29
[asyncify] virtual\20thunk\20to\20SdlGraphicsManager::notifyActiveAreaChanged\28\29 can change the state due to SdlGraphicsManager::notifyActiveAreaChanged\28\29
[asyncify] virtual\20thunk\20to\20OSystem_SDL::engineDone\28\29 can change the state due to OSystem_SDL::engineDone\28\29
[asyncify] virtual\20thunk\20to\20OpenGLSdlGraphics3dManager::getFeatureState\28OSystem::Feature\29\20const can change the state due to OpenGLSdlGraphics3dManager::getFeatureState\28OSystem::Feature\29\20const
[asyncify] StdioStream::~StdioStream\28\29.1 can change the state due to StdioStream::~StdioStream\28\29
[asyncify] PosixIoStream::~PosixIoStream\28\29 can change the state due to StdioStream::~StdioStream\28\29
[asyncify] non-virtual\20thunk\20to\20StdioStream::flush\28\29 can change the state due to StdioStream::flush\28\29
[asyncify] MT32Emu::ReportHandler::printDebug\28char\20const*\2c\20void*\29 can change the state due to do_putc.1
[asyncify] nsvg__parseColor\28char\20const*\29 can change the state due to SDL_sscanf
[asyncify] StdioStream::size\28\29\20const can change the state due to __fseeko
[asyncify] StdioStream::seek\28long\20long\2c\20int\29 can change the state due to __fseeko
[asyncify] fseek can change the state due to __fseeko
[asyncify] StdioStream::pos\28\29\20const can change the state due to __ftello
[asyncify] StdioStream::write\28void\20const*\2c\20unsigned\20int\29 can change the state due to fwrite
[asyncify] fputs can change the state due to fwrite
[asyncify] pad can change the state due to out
[asyncify] fmt_fp can change the state due to out
[asyncify] qsort can change the state due to sift
[asyncify] strtod can change the state due to __floatscan
[asyncify] vsnprintf can change the state due to vfprintf
[asyncify] fiprintf can change the state due to vfiprintf
[asyncify] iprintf can change the state due to vfiprintf
[asyncify] siprintf can change the state due to vfiprintf
[asyncify] GUI::ThemeParser::cleanup\28\29 can change the state due to GUI::ThemeParser::defaultDrawStep\28\29
[asyncify] Common::HashMap<Common::U32String\2c\20int\2c\20Common::Hash<Common::U32String>\2c\20Common::EqualTo<Common::U32String>>::getOrCreateVal\28Common::U32String\20const&\29 can change the state due to Common::HashMap<Common::U32String\2c\20int\2c\20Common::Hash<Common::U32String>\2c\20Common::EqualTo<Common::U32String>>::lookupAndCreateIfMissing\28Common::U32String\20const&\29
[asyncify] Common::HashMap<Common::U32String\2c\20int\2c\20Common::Hash<Common::U32String>\2c\20Common::EqualTo<Common::U32String>>::setVal\28Common::U32String\20const&\2c\20int\20const&\29 can change the state due to Common::HashMap<Common::U32String\2c\20int\2c\20Common::Hash<Common::U32String>\2c\20Common::EqualTo<Common::U32String>>::lookupAndCreateIfMissing\28Common::U32String\20const&\29
[asyncify] Common::HashMap<int\2c\20Graphics::ManagedSurface\20const*\2c\20Common::Hash<int>\2c\20Common::EqualTo<int>>::getOrCreateVal\28int\20const&\29 can change the state due to Common::HashMap<int\2c\20Graphics::ManagedSurface\20const*\2c\20Common::Hash<int>\2c\20Common::EqualTo<int>>::expandStorage\28unsigned\20int\29
[asyncify] Common::List<Common::Event>::push_back\28Common::Event\20const&\29 can change the state due to Common::List<Common::Event>::insert\28Common::ListInternal::NodeBase*\2c\20Common::Event\20const&\29
[asyncify] Common::List<Common::Event>::operator=\28Common::List<Common::Event>\20const&\29 can change the state due to Common::List<Common::Event>::insert\28Common::ListInternal::NodeBase*\2c\20Common::Event\20const&\29
[asyncify] SurfaceSdlGraphicsManager::getSupportedFormats\28\29\20const can change the state due to Common::List<Graphics::PixelFormat>::insert\28Common::ListInternal::NodeBase*\2c\20Graphics::PixelFormat\20const&\29
[asyncify] Common::List<Graphics::PixelFormat>::push_back\28Graphics::PixelFormat\20const&\29 can change the state due to Common::List<Graphics::PixelFormat>::insert\28Common::ListInternal::NodeBase*\2c\20Graphics::PixelFormat\20const&\29
[asyncify] OpenGL::ScaledTexture::ScaledTexture\28unsigned\20int\2c\20unsigned\20int\2c\20unsigned\20int\2c\20Graphics::PixelFormat\20const&\2c\20Graphics::PixelFormat\20const&\29 can change the state due to OpenGL::FakeTexture::FakeTexture\28unsigned\20int\2c\20unsigned\20int\2c\20unsigned\20int\2c\20Graphics::PixelFormat\20const&\2c\20Graphics::PixelFormat\20const&\29
[asyncify] OpenGL::LibRetroPipeline::isSupportedByContext\28\29 can change the state due to Common::Singleton<OpenGL::Context>::instance\28\29
[asyncify] OpenGL::OpenGLGraphicsManager::getGLPixelFormat\28Graphics::PixelFormat\20const&\2c\20unsigned\20int&\2c\20unsigned\20int&\2c\20unsigned\20int&\29\20const can change the state due to Common::Singleton<OpenGL::Context>::instance\28\29
[asyncify] Common::List<unsigned\20short>::push_front\28unsigned\20short\20const&\29 can change the state due to Common::List<unsigned\20short>::insert\28Common::ListInternal::NodeBase*\2c\20unsigned\20short\20const&\29
[asyncify] Image::\28anonymous\20namespace\29::addColorToQueue\28unsigned\20short\2c\20unsigned\20short\2c\20unsigned\20char*\2c\20Common::List<unsigned\20short>&\29 can change the state due to Common::List<unsigned\20short>::insert\28Common::ListInternal::NodeBase*\2c\20unsigned\20short\20const&\29
[asyncify] Image::XanDecoder::convertYUVtoRGBSurface\28\29 can change the state due to Common::Singleton<Graphics::YUVToRGBManager>::instance\28\29
[asyncify] Graphics::YUVToRGBManager::convert410\28Graphics::Surface*\2c\20Graphics::YUVToRGBManager::LuminanceScale\2c\20unsigned\20char\20const*\2c\20unsigned\20char\20const*\2c\20unsigned\20char\20const*\2c\20int\2c\20int\2c\20int\2c\20int\29 can change the state due to Graphics::YUVToRGBManager::getLookup\28Graphics::PixelFormat\2c\20Graphics::YUVToRGBManager::LuminanceScale\2c\20bool\29
[asyncify] Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29 can change the state due to Common::BaseString<char>::incRefCount\28\29\20const
[asyncify] Common::BaseString<char32_t>::BaseString\28Common::BaseString<char32_t>\20const&\29 can change the state due to Common::BaseString<char>::incRefCount\28\29\20const
[asyncify] Common::String::operator=\28Common::String\20const&\29 can change the state due to Common::BaseString<char>::incRefCount\28\29\20const
[asyncify] Common::U32String::operator=\28Common::U32String\20const&\29 can change the state due to Common::BaseString<char>::incRefCount\28\29\20const
[asyncify] Common::BaseString<char>::BaseString\28char\20const*\29 can change the state due to Common::BaseString<char>::initWithValueTypeStr\28char\20const*\2c\20unsigned\20int\29
[asyncify] Common::BaseString<char>::BaseString\28char\20const*\2c\20unsigned\20int\29 can change the state due to Common::BaseString<char>::initWithValueTypeStr\28char\20const*\2c\20unsigned\20int\29
[asyncify] Common::BaseString<char>::BaseString\28char\20const*\2c\20char\20const*\29 can change the state due to Common::BaseString<char>::initWithValueTypeStr\28char\20const*\2c\20unsigned\20int\29
[asyncify] Common::BaseString<char>::makeUnique\28\29 can change the state due to Common::BaseString<char>::ensureCapacity\28unsigned\20int\2c\20bool\29
[asyncify] Common::BaseString<char>::insertChar\28char\2c\20unsigned\20int\29 can change the state due to Common::BaseString<char>::ensureCapacity\28unsigned\20int\2c\20bool\29
[asyncify] Common::BaseString<char>::assignAppend\28char\20const*\29 can change the state due to Common::BaseString<char>::ensureCapacity\28unsigned\20int\2c\20bool\29
[asyncify] Common::BaseString<char>::assignAppend\28Common::BaseString<char>\20const&\29 can change the state due to Common::BaseString<char>::ensureCapacity\28unsigned\20int\2c\20bool\29
[asyncify] Common::String::operator=\28char\20const*\29 can change the state due to Common::BaseString<char>::ensureCapacity\28unsigned\20int\2c\20bool\29
[asyncify] Common::String::vformat\28char\20const*\2c\20void*\29 can change the state due to Common::BaseString<char>::ensureCapacity\28unsigned\20int\2c\20bool\29
[asyncify] Common::U32String::encode\28Common::CodePage\29\20const can change the state due to Common::BaseString<char>::ensureCapacity\28unsigned\20int\2c\20bool\29
[asyncify] Common::BaseString<char32_t>::BaseString\28char32_t\20const*\29 can change the state due to Common::BaseString<char32_t>::initWithValueTypeStr\28char32_t\20const*\2c\20unsigned\20int\29
[asyncify] Common::BaseString<char32_t>::BaseString\28char32_t\20const*\2c\20unsigned\20int\29 can change the state due to Common::BaseString<char32_t>::initWithValueTypeStr\28char32_t\20const*\2c\20unsigned\20int\29
[asyncify] Common::BaseString<char32_t>::BaseString\28char32_t\20const*\2c\20char32_t\20const*\29 can change the state due to Common::BaseString<char32_t>::initWithValueTypeStr\28char32_t\20const*\2c\20unsigned\20int\29
[asyncify] Common::BaseString<char32_t>::makeUnique\28\29 can change the state due to Common::BaseString<char32_t>::ensureCapacity\28unsigned\20int\2c\20bool\29
[asyncify] Common::BaseString<char32_t>::insertChar\28char32_t\2c\20unsigned\20int\29 can change the state due to Common::BaseString<char32_t>::ensureCapacity\28unsigned\20int\2c\20bool\29
[asyncify] Common::U32String::decodeInternal\28char\20const*\2c\20unsigned\20int\2c\20Common::CodePage\29 can change the state due to Common::BaseString<char32_t>::ensureCapacity\28unsigned\20int\2c\20bool\29
[asyncify] Common::U32String::operator+=\28Common::U32String\20const&\29 can change the state due to Common::BaseString<char32_t>::ensureCapacity\28unsigned\20int\2c\20bool\29
[asyncify] Common::U32String::operator+=\28char32_t\29 can change the state due to Common::BaseString<char32_t>::ensureCapacity\28unsigned\20int\2c\20bool\29
[asyncify] Common::ConfigManager::getDomain\28Common::String\20const&\29 can change the state due to Common::HashMap<Common::String\2c\20Common::ConfigManager::Domain\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::getOrCreateVal\28Common::String\20const&\29
[asyncify] Common::ConfigManager::setActiveDomain\28Common::String\20const&\29 can change the state due to Common::HashMap<Common::String\2c\20Common::ConfigManager::Domain\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::getOrCreateVal\28Common::String\20const&\29
[asyncify] Common::ConfigManager::addGameDomain\28Common::String\20const&\29 can change the state due to Common::HashMap<Common::String\2c\20Common::ConfigManager::Domain\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::getOrCreateVal\28Common::String\20const&\29
[asyncify] Common::EventDispatcher::registerObserver\28Common::EventObserver*\2c\20unsigned\20int\2c\20bool\2c\20bool\29 can change the state due to Common::List<Common::EventDispatcher::ObserverEntry>::insert\28Common::ListInternal::NodeBase*\2c\20Common::EventDispatcher::ObserverEntry\20const&\29
[asyncify] MT32Emu::CombFilter<short>::CombFilter\28unsigned\20int\2c\20unsigned\20char\29 can change the state due to MT32Emu::RingBuffer<short>::RingBuffer\28unsigned\20int\29
[asyncify] MT32Emu::CombFilter<float>::CombFilter\28unsigned\20int\2c\20unsigned\20char\29 can change the state due to MT32Emu::RingBuffer<float>::RingBuffer\28unsigned\20int\29
[asyncify] SRCTools::IIR2xDecimator::IIR2xDecimator\28SRCTools::IIRResampler::Quality\29 can change the state due to SRCTools::IIRResampler::Constants::Constants\28unsigned\20int\2c\20float\2c\20SRCTools::IIRSection\20const*\2c\20SRCTools::IIRResampler::Quality\29
[asyncify] ADDetectedGame::ADDetectedGame\28\29 can change the state due to Common::HashMap<Common::String\2c\20FileProperties\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::HashMap\28\29
[asyncify] ADDetectedGame::ADDetectedGame\28ADGameDescription\20const*\29 can change the state due to Common::HashMap<Common::String\2c\20FileProperties\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::HashMap\28\29
[asyncify] DetectedGame::DetectedGame\28\29 can change the state due to Common::HashMap<Common::String\2c\20FileProperties\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::HashMap\28\29
[asyncify] DetectedGame::DetectedGame\28Common::String\20const&\2c\20Common::String\20const&\2c\20Common::String\20const&\2c\20Common::Language\2c\20Common::Platform\2c\20Common::String\20const&\2c\20bool\29 can change the state due to Common::HashMap<Common::String\2c\20FileProperties\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::HashMap\28\29
[asyncify] Common::HashMap<Common::String\2c\20FileProperties\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::getOrCreateVal\28Common::String\20const&\29 can change the state due to Common::HashMap<Common::String\2c\20FileProperties\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing\28Common::String\20const&\29
[asyncify] Common::HashMap<Common::String\2c\20FileProperties\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::HashMap\28Common::HashMap<Common::String\2c\20FileProperties\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\29 can change the state due to Common::HashMap<Common::String\2c\20FileProperties\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::assign\28Common::HashMap<Common::String\2c\20FileProperties\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\29
[asyncify] Common::HashMap<Common::String\2c\20FileProperties\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::operator=\28Common::HashMap<Common::String\2c\20FileProperties\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\29 can change the state due to Common::HashMap<Common::String\2c\20FileProperties\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::assign\28Common::HashMap<Common::String\2c\20FileProperties\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\29
[asyncify] Common::SharedPtr<AbstractFSNode>::SharedPtr<AbstractFSNode>\28AbstractFSNode*\29 can change the state due to byn$mgfn-shared$Common::SharedPtr<Common::ArchiveMember>::SharedPtr<Common::GenericArchiveMember>\28Common::GenericArchiveMember*\29
[asyncify] Common::SharedPtr<Common::ArchiveMember>::SharedPtr<Common::GenericArchiveMember>\28Common::GenericArchiveMember*\29 can change the state due to byn$mgfn-shared$Common::SharedPtr<Common::ArchiveMember>::SharedPtr<Common::GenericArchiveMember>\28Common::GenericArchiveMember*\29
[asyncify] Common::SharedPtr<Common::ArchiveMember>::SharedPtr<Common::FSNode>\28Common::FSNode*\29 can change the state due to byn$mgfn-shared$Common::SharedPtr<Common::ArchiveMember>::SharedPtr<Common::GenericArchiveMember>\28Common::GenericArchiveMember*\29
[asyncify] Common::XMLParser::XMLKeyLayout::XMLKeyLayout\28\29 can change the state due to Common::HashMap<Common::String\2c\20int\2c\20Common::Hash<Common::String>\2c\20Common::EqualTo<Common::String>>::HashMap\28\29
[asyncify] SdlGraphicsManager::SdlGraphicsManager\28SdlEventSource*\2c\20SdlWindow*\29 can change the state due to Common::Singleton<Common::ConfigManager>::instance\28\29
[asyncify] SdlGraphicsManager::defaultGraphicsModeConfig\28\29\20const can change the state due to Common::Singleton<Common::ConfigManager>::instance\28\29
[asyncify] byn$mgfn-shared$OSystem_SDL::getDefaultIconsPath\28\29 can change the state due to Common::Singleton<Common::ConfigManager>::instance\28\29
[asyncify] EngineManager::generateUniqueDomain\28Common::String\29 can change the state due to Common::Singleton<Common::ConfigManager>::instance\28\29
[asyncify] EngineManager::createTargetForGame\28DetectedGame\20const&\29 can change the state due to Common::Singleton<Common::ConfigManager>::instance\28\29
[asyncify] Common::HashMap<Common::String\2c\20float\2c\20Common::CaseSensitiveString_Hash\2c\20Common::CaseSensitiveString_EqualTo>::getOrCreateVal\28Common::String\20const&\29 can change the state due to Common::HashMap<Common::String\2c\20int\2c\20Common::Hash<Common::String>\2c\20Common::EqualTo<Common::String>>::expandStorage\28unsigned\20int\29
[asyncify] Common::HashMap<Common::String\2c\20int\2c\20Common::Hash<Common::String>\2c\20Common::EqualTo<Common::String>>::lookupAndCreateIfMissing\28Common::String\20const&\29 can change the state due to Common::HashMap<Common::String\2c\20int\2c\20Common::Hash<Common::String>\2c\20Common::EqualTo<Common::String>>::expandStorage\28unsigned\20int\29
[asyncify] DefaultSaveFileManager::DefaultSaveFileManager\28\29 can change the state due to Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::HashMap\28\29
[asyncify] Common::FSDirectory::FSDirectory\28Common::FSNode\20const&\2c\20int\2c\20bool\2c\20bool\2c\20bool\29 can change the state due to Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::HashMap\28\29
[asyncify] Common::HashMap<Common::String\2c\20Common::PEResources::Section\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::getOrCreateVal\28Common::String\20const&\29 can change the state due to Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::expandStorage\28unsigned\20int\29
[asyncify] Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::getOrCreateVal\28Common::String\20const&\29 can change the state due to Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::expandStorage\28unsigned\20int\29
[asyncify] Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::HashMap\28Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\29 can change the state due to Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::assign\28Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\29
[asyncify] Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::operator=\28Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\29 can change the state due to Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::assign\28Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\29
[asyncify] Common::ConfigManager::Domain::clear\28\29 can change the state due to Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::clear\28bool\29
[asyncify] AdvancedMetaEngineDetection::AdvancedMetaEngineDetection\28void\20const*\2c\20unsigned\20int\2c\20PlainGameDescriptor\20const*\29 can change the state due to Common::HashMap<Common::String\2c\20bool\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::HashMap\28\29
[asyncify] Common::HashMap<Common::String\2c\20GUI::ThemeParser::PaletteColor\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::getOrCreateVal\28Common::String\20const&\29 can change the state due to Common::HashMap<Common::String\2c\20bool\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::expandStorage\28unsigned\20int\29
[asyncify] Common::HashMap<Common::String\2c\20bool\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing\28Common::String\20const&\29 can change the state due to Common::HashMap<Common::String\2c\20bool\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::expandStorage\28unsigned\20int\29
[asyncify] Common::HashMap<Common::String\2c\20int\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::getOrCreateVal\28Common::String\20const&\29 can change the state due to Common::HashMap<Common::String\2c\20bool\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::expandStorage\28unsigned\20int\29
[asyncify] Common::ConfigManager::Domain::Domain\28\29 can change the state due to Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::HashMap\28\29
[asyncify] Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::getOrCreateVal\28Common::String\20const&\29 can change the state due to Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing\28Common::String\20const&\29
[asyncify] Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::setVal\28Common::String\20const&\2c\20Common::String\20const&\29 can change the state due to Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing\28Common::String\20const&\29
[asyncify] Common::HashMap<Common::String\2c\20Scumm::DetectorDesc\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::getOrCreateVal\28Common::String\20const&\29 can change the state due to Common::HashMap<Common::String\2c\20Gob::DataIO::File\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::expandStorage\28unsigned\20int\29
[asyncify] virtual\20thunk\20to\20OSystem_SDL::getHardwareInputSet\28\29 can change the state due to OSystem_SDL::getHardwareInputSet\28\29
[asyncify] GUI::Debugger::cmdDebugFlagEnable\28int\2c\20char\20const**\29 can change the state due to Common::Singleton<Common::DebugManager>::instance\28\29
[asyncify] GUI::Debugger::cmdDebugFlagDisable\28int\2c\20char\20const**\29 can change the state due to Common::Singleton<Common::DebugManager>::instance\28\29
[asyncify] EngineManager::getPlugins\28PluginType\29\20const can change the state due to PluginManager::instance\28\29
[asyncify] MusicManager::getPlugins\28\29\20const can change the state due to PluginManager::instance\28\29
[asyncify] ScalerManager::getPlugins\28\29\20const can change the state due to PluginManager::instance\28\29
[asyncify] Common::List<Common::INIFile::Section>::push_back\28Common::INIFile::Section\20const&\29 can change the state due to Common::List<Common::INIFile::Section>::insert\28Common::ListInternal::NodeBase*\2c\20Common::INIFile::Section\20const&\29
[asyncify] Common::List<GUI::ThemeEngine::ThemeDescriptor>::push_back\28GUI::ThemeEngine::ThemeDescriptor\20const&\29 can change the state due to Common::List<Common::INIFile::KeyValue>::insert\28Common::ListInternal::NodeBase*\2c\20Common::INIFile::KeyValue\20const&\29
[asyncify] void\20Common::List<Common::INIFile::KeyValue>::insert<Common::ListInternal::ConstIterator<Common::INIFile::KeyValue>>\28Common::ListInternal::Iterator<Common::INIFile::KeyValue>\2c\20Common::ListInternal::ConstIterator<Common::INIFile::KeyValue>\2c\20Common::ListInternal::ConstIterator<Common::INIFile::KeyValue>\29 can change the state due to Common::List<Common::INIFile::KeyValue>::insert\28Common::ListInternal::NodeBase*\2c\20Common::INIFile::KeyValue\20const&\29
[asyncify] OpenGL::OpenGLGraphicsManager::getFontOSD\28\29\20const can change the state due to Common::Singleton<Graphics::FontManager>::instance\28\29
[asyncify] NormalPlugin::createInstance\28Graphics::PixelFormat\20const&\29\20const can change the state due to byn$mgfn-shared$NormalPlugin::createInstance\28Graphics::PixelFormat\20const&\29\20const
[asyncify] SAIPlugin::createInstance\28Graphics::PixelFormat\20const&\29\20const can change the state due to byn$mgfn-shared$NormalPlugin::createInstance\28Graphics::PixelFormat\20const&\29\20const
[asyncify] SuperSAIPlugin::createInstance\28Graphics::PixelFormat\20const&\29\20const can change the state due to byn$mgfn-shared$NormalPlugin::createInstance\28Graphics::PixelFormat\20const&\29\20const
[asyncify] SuperEaglePlugin::createInstance\28Graphics::PixelFormat\20const&\29\20const can change the state due to byn$mgfn-shared$NormalPlugin::createInstance\28Graphics::PixelFormat\20const&\29\20const
[asyncify] PMPlugin::createInstance\28Graphics::PixelFormat\20const&\29\20const can change the state due to byn$mgfn-shared$NormalPlugin::createInstance\28Graphics::PixelFormat\20const&\29\20const
[asyncify] AdvMamePlugin::createInstance\28Graphics::PixelFormat\20const&\29\20const can change the state due to byn$mgfn-shared$NormalPlugin::createInstance\28Graphics::PixelFormat\20const&\29\20const
[asyncify] TVPlugin::createInstance\28Graphics::PixelFormat\20const&\29\20const can change the state due to byn$mgfn-shared$NormalPlugin::createInstance\28Graphics::PixelFormat\20const&\29\20const
[asyncify] Common::Singleton<EngineManager>::instance\28\29 can change the state due to byn$mgfn-shared$Common::Singleton<EngineManager>::instance\28\29
[asyncify] Common::Singleton<ScalerManager>::instance\28\29 can change the state due to byn$mgfn-shared$Common::Singleton<EngineManager>::instance\28\29
[asyncify] Common::Singleton<MusicManager>::instance\28\29 can change the state due to byn$mgfn-shared$Common::Singleton<EngineManager>::instance\28\29
[asyncify] Common::EventDispatcher::registerSource\28Common::EventSource*\2c\20bool\29 can change the state due to Common::List<GUI::GuiManager::GuiObjectTrashItem>::push_back\28GUI::GuiManager::GuiObjectTrashItem\20const&\29
[asyncify] GUI::GuiManager::addToTrash\28GUI::GuiObject*\2c\20GUI::Dialog*\29 can change the state due to Common::List<GUI::GuiManager::GuiObjectTrashItem>::push_back\28GUI::GuiManager::GuiObjectTrashItem\20const&\29
[asyncify] Audio::LimitingAudioStream::~LimitingAudioStream\28\29.1 can change the state due to Audio::LimitingAudioStream::~LimitingAudioStream\28\29
[asyncify] Audio::ForcedMonoAudioStream::~ForcedMonoAudioStream\28\29.1 can change the state due to Audio::ForcedMonoAudioStream::~ForcedMonoAudioStream\28\29
[asyncify] Common::Array<Common::FSNode>::~Array\28\29 can change the state due to Common::Array<Common::FSNode>::freeStorage\28Common::FSNode*\2c\20unsigned\20int\29
[asyncify] MT32Emu::AnalogImpl<int>::~AnalogImpl\28\29.1 can change the state due to MT32Emu::AnalogImpl<int>::~AnalogImpl\28\29
[asyncify] MT32Emu::AnalogImpl<float>::~AnalogImpl\28\29.1 can change the state due to MT32Emu::AnalogImpl<float>::~AnalogImpl\28\29
[asyncify] Common::QuickTimeParser::SampleDesc::~SampleDesc\28\29.1 can change the state due to Common::QuickTimeParser::SampleDesc::~SampleDesc\28\29
[asyncify] SRCTools::ResamplerModel::InternalResamplerCascadeStage::~InternalResamplerCascadeStage\28\29.1 can change the state due to SRCTools::ResamplerModel::InternalResamplerCascadeStage::~InternalResamplerCascadeStage\28\29
[asyncify] StaticPlugin::~StaticPlugin\28\29.1 can change the state due to StaticPlugin::~StaticPlugin\28\29
[asyncify] Common::AchievementsManager::getAchievementCount\28\29\20const can change the state due to Common::AchievementsManager::getCurrentLang\28\29\20const
[asyncify] DetectionResults::generateUnknownGameReport\28bool\2c\20unsigned\20int\29\20const can change the state due to generateUnknownGameReport\28Common::Array<DetectedGame>\20const&\2c\20bool\2c\20bool\2c\20unsigned\20int\29
[asyncify] generateUnknownGameReport\28DetectedGame\20const&\2c\20bool\2c\20bool\2c\20unsigned\20int\29 can change the state due to generateUnknownGameReport\28Common::Array<DetectedGame>\20const&\2c\20bool\2c\20bool\2c\20unsigned\20int\29
[asyncify] GUI::ExistingSave::operator=\28GUI::ExistingSave\20const&\29 can change the state due to SaveStateDescriptor::operator=\28SaveStateDescriptor\20const&\29
[asyncify] SaveStateDescriptor*\20Common::copy<SaveStateDescriptor\20const*\2c\20SaveStateDescriptor*>\28SaveStateDescriptor\20const*\2c\20SaveStateDescriptor\20const*\2c\20SaveStateDescriptor*\29 can change the state due to SaveStateDescriptor::operator=\28SaveStateDescriptor\20const&\29
[asyncify] void\20SWAP<SaveStateDescriptor>\28SaveStateDescriptor&\2c\20SaveStateDescriptor&\29 can change the state due to SaveStateDescriptor::operator=\28SaveStateDescriptor\20const&\29
[asyncify] OpenGL::LibRetro::ShaderPreset::~ShaderPreset\28\29 can change the state due to Common::FSNode::~FSNode\28\29
[asyncify] Common::FSDirectory::~FSDirectory\28\29 can change the state due to Common::FSNode::~FSNode\28\29
[asyncify] Common::FSNode::~FSNode\28\29.1 can change the state due to Common::FSNode::~FSNode\28\29
[asyncify] Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::~HashMap\28\29 can change the state due to Common::FSNode::~FSNode\28\29
[asyncify] Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::Node::~Node\28\29 can change the state due to Common::FSNode::~FSNode\28\29
[asyncify] Glk::Blorb::~Blorb\28\29 can change the state due to Common::FSNode::~FSNode\28\29
[asyncify] Common::MemoryReadStream::~MemoryReadStream\28\29.2 can change the state due to Common::MemoryReadStream::~MemoryReadStream\28\29.1
[asyncify] Common::MemoryReadStream::~MemoryReadStream\28\29 can change the state due to Common::MemoryReadStream::~MemoryReadStream\28\29.1
[asyncify] GUI::ExistingSave::~ExistingSave\28\29 can change the state due to SaveStateDescriptor::~SaveStateDescriptor\28\29
[asyncify] Common::Array<SaveStateDescriptor>::freeStorage\28SaveStateDescriptor*\2c\20unsigned\20int\29 can change the state due to SaveStateDescriptor::~SaveStateDescriptor\28\29
[asyncify] non-virtual\20thunk\20to\20OSystem_SDL::~OSystem_SDL\28\29.1 can change the state due to OSystem_SDL::~OSystem_SDL\28\29.2
[asyncify] virtual\20thunk\20to\20OSystem_SDL::~OSystem_SDL\28\29.1 can change the state due to OSystem_SDL::~OSystem_SDL\28\29.2
[asyncify] non-virtual\20thunk\20to\20OSystem_POSIX::~OSystem_POSIX\28\29.1 can change the state due to OSystem_POSIX::~OSystem_POSIX\28\29.1
[asyncify] virtual\20thunk\20to\20OSystem_POSIX::~OSystem_POSIX\28\29.1 can change the state due to OSystem_POSIX::~OSystem_POSIX\28\29.1
[asyncify] non-virtual\20thunk\20to\20OSystem_Emscripten::~OSystem_Emscripten\28\29.1 can change the state due to OSystem_Emscripten::~OSystem_Emscripten\28\29.1
[asyncify] virtual\20thunk\20to\20OSystem_Emscripten::~OSystem_Emscripten\28\29.1 can change the state due to OSystem_Emscripten::~OSystem_Emscripten\28\29.1
[asyncify] non-virtual\20thunk\20to\20GUI::GuiManager::~GuiManager\28\29.1 can change the state due to GUI::GuiManager::~GuiManager\28\29.1
[asyncify] GUI::PicButtonWidget::PicButtonWidget\28GUI::GuiObject*\2c\20int\2c\20int\2c\20int\2c\20int\2c\20Common::U32String\20const&\2c\20unsigned\20int\2c\20unsigned\20char\29 can change the state due to GUI::ButtonWidget::ButtonWidget\28GUI::GuiObject*\2c\20int\2c\20int\2c\20int\2c\20int\2c\20Common::U32String\20const&\2c\20Common::U32String\20const&\2c\20unsigned\20int\2c\20unsigned\20char\2c\20Common::U32String\20const&\29
[asyncify] GUI::PicButtonWidget::PicButtonWidget\28GUI::GuiObject*\2c\20Common::String\20const&\2c\20Common::U32String\20const&\2c\20unsigned\20int\2c\20unsigned\20char\29 can change the state due to GUI::ButtonWidget::ButtonWidget\28GUI::GuiObject*\2c\20Common::String\20const&\2c\20Common::U32String\20const&\2c\20Common::U32String\20const&\2c\20unsigned\20int\2c\20unsigned\20char\2c\20Common::U32String\20const&\29
[asyncify] GUI::Debugger::cmdHelp\28int\2c\20char\20const**\29 can change the state due to GUI::Debugger::debugPrintf\28char\20const*\2c\20...\29
[asyncify] GUI::Debugger::cmdDebugLevel\28int\2c\20char\20const**\29 can change the state due to GUI::Debugger::debugPrintf\28char\20const*\2c\20...\29
[asyncify] non-virtual\20thunk\20to\20GUI::GlobalOptionsDialog::~GlobalOptionsDialog\28\29.1 can change the state due to GUI::GlobalOptionsDialog::~GlobalOptionsDialog\28\29.1
[asyncify] GUI::ButtonWidget::~ButtonWidget\28\29.1 can change the state due to GUI::ButtonWidget::~ButtonWidget\28\29
[asyncify] non-virtual\20thunk\20to\20GUI::ButtonWidget::~ButtonWidget\28\29 can change the state due to GUI::ButtonWidget::~ButtonWidget\28\29
[asyncify] GUI::DropdownButtonWidget::~DropdownButtonWidget\28\29 can change the state due to GUI::ButtonWidget::~ButtonWidget\28\29
[asyncify] GUI::GroupedListWidget::~GroupedListWidget\28\29 can change the state due to GUI::ListWidget::~ListWidget\28\29
[asyncify] GUI::ListWidget::~ListWidget\28\29.1 can change the state due to GUI::ListWidget::~ListWidget\28\29
[asyncify] non-virtual\20thunk\20to\20GUI::ListWidget::~ListWidget\28\29 can change the state due to GUI::ListWidget::~ListWidget\28\29
[asyncify] GUI::DomainEditTextWidget::~DomainEditTextWidget\28\29 can change the state due to GUI::EditTextWidget::~EditTextWidget\28\29
[asyncify] non-virtual\20thunk\20to\20GUI::DomainEditTextWidget::~DomainEditTextWidget\28\29 can change the state due to GUI::EditTextWidget::~EditTextWidget\28\29
[asyncify] non-virtual\20thunk\20to\20GUI::PopUpWidget::~PopUpWidget\28\29.1 can change the state due to GUI::PopUpWidget::~PopUpWidget\28\29.1
[asyncify] non-virtual\20thunk\20to\20GUI::ScrollContainerWidget::~ScrollContainerWidget\28\29.1 can change the state due to GUI::ScrollContainerWidget::~ScrollContainerWidget\28\29.1
[asyncify] non-virtual\20thunk\20to\20GUI::GridWidget::~GridWidget\28\29.1 can change the state due to GUI::GridWidget::~GridWidget\28\29.1
[asyncify] non-virtual\20thunk\20to\20GUI::GridItemWidget::~GridItemWidget\28\29.1 can change the state due to GUI::GridItemWidget::~GridItemWidget\28\29.1
[asyncify] GUI::PopUpDialog::handleMouseWheel\28int\2c\20int\2c\20int\29 can change the state due to GUI::PopUpDialog::moveUp\28\29
[asyncify] non-virtual\20thunk\20to\20OSystem_POSIX::hasFeature\28OSystem::Feature\29 can change the state due to OSystem_POSIX::hasFeature\28OSystem::Feature\29
[asyncify] virtual\20thunk\20to\20OSystem_POSIX::hasFeature\28OSystem::Feature\29 can change the state due to OSystem_POSIX::hasFeature\28OSystem::Feature\29
[asyncify] OSystem_Emscripten::hasFeature\28OSystem::Feature\29 can change the state due to OSystem_POSIX::hasFeature\28OSystem::Feature\29
[asyncify] OpenGL::FakeTexture::~FakeTexture\28\29 can change the state due to OpenGL::FakeTexture::~FakeTexture\28\29.1
[asyncify] OpenGL::TextureRGB555::~TextureRGB555\28\29 can change the state due to OpenGL::FakeTexture::~FakeTexture\28\29.1
[asyncify] virtual\20thunk\20to\20OpenGLSdlGraphics3dManager::~OpenGLSdlGraphics3dManager\28\29.1 can change the state due to OpenGLSdlGraphics3dManager::~OpenGLSdlGraphics3dManager\28\29.2
[asyncify] Common::SeekableSubReadStream::~SeekableSubReadStream\28\29.1 can change the state due to Common::SeekableSubReadStream::~SeekableSubReadStream\28\29
[asyncify] virtual\20thunk\20to\20Common::SeekableSubReadStream::~SeekableSubReadStream\28\29 can change the state due to Common::SeekableSubReadStream::~SeekableSubReadStream\28\29
[asyncify] Common::SubReadStream::~SubReadStream\28\29.2 can change the state due to Common::SubReadStream::~SubReadStream\28\29.1
[asyncify] Common::SafeSeekableSubReadStream::~SafeSeekableSubReadStream\28\29.1 can change the state due to Common::SafeSeekableSubReadStream::~SafeSeekableSubReadStream\28\29
[asyncify] virtual\20thunk\20to\20Common::SafeSeekableSubReadStream::~SafeSeekableSubReadStream\28\29 can change the state due to Common::SafeSeekableSubReadStream::~SafeSeekableSubReadStream\28\29
[asyncify] Audio::SubSeekableAudioStream::~SubSeekableAudioStream\28\29.2 can change the state due to Audio::SubSeekableAudioStream::~SubSeekableAudioStream\28\29
[asyncify] Audio::Oki_ADPCMStream::~Oki_ADPCMStream\28\29.1 can change the state due to Audio::Oki_ADPCMStream::~Oki_ADPCMStream\28\29
[asyncify] Audio::XA_ADPCMStream::~XA_ADPCMStream\28\29.1 can change the state due to Audio::XA_ADPCMStream::~XA_ADPCMStream\28\29
[asyncify] Audio::DVI_ADPCMStream::~DVI_ADPCMStream\28\29.1 can change the state due to Audio::DVI_ADPCMStream::~DVI_ADPCMStream\28\29
[asyncify] Audio::Apple_ADPCMStream::~Apple_ADPCMStream\28\29.1 can change the state due to Audio::Apple_ADPCMStream::~Apple_ADPCMStream\28\29
[asyncify] Audio::MSIma_ADPCMStream::~MSIma_ADPCMStream\28\29.1 can change the state due to Audio::MSIma_ADPCMStream::~MSIma_ADPCMStream\28\29
[asyncify] Audio::MS_ADPCMStream::~MS_ADPCMStream\28\29.1 can change the state due to Audio::MS_ADPCMStream::~MS_ADPCMStream\28\29
[asyncify] Audio::DK3_ADPCMStream::~DK3_ADPCMStream\28\29.1 can change the state due to Audio::DK3_ADPCMStream::~DK3_ADPCMStream\28\29
[asyncify] Audio::G711ALawStream::~G711ALawStream\28\29.1 can change the state due to Audio::G711ALawStream::~G711ALawStream\28\29
[asyncify] Audio::G711MuLawStream::~G711MuLawStream\28\29.1 can change the state due to Audio::G711MuLawStream::~G711MuLawStream\28\29
[asyncify] Audio::RawStream<3\2c\20true\2c\20true>::~RawStream\28\29.2 can change the state due to Audio::RawStream<3\2c\20true\2c\20true>::~RawStream\28\29
[asyncify] Audio::RawStream<3\2c\20true\2c\20false>::~RawStream\28\29.2 can change the state due to Audio::RawStream<3\2c\20true\2c\20false>::~RawStream\28\29
[asyncify] Audio::RawStream<2\2c\20true\2c\20true>::~RawStream\28\29.2 can change the state due to Audio::RawStream<2\2c\20true\2c\20true>::~RawStream\28\29
[asyncify] Audio::RawStream<2\2c\20true\2c\20false>::~RawStream\28\29.2 can change the state due to Audio::RawStream<2\2c\20true\2c\20false>::~RawStream\28\29
[asyncify] Audio::RawStream<1\2c\20true\2c\20false>::~RawStream\28\29.2 can change the state due to Audio::RawStream<1\2c\20true\2c\20false>::~RawStream\28\29
[asyncify] Audio::RawStream<3\2c\20false\2c\20true>::~RawStream\28\29.2 can change the state due to Audio::RawStream<3\2c\20false\2c\20true>::~RawStream\28\29
[asyncify] Audio::RawStream<3\2c\20false\2c\20false>::~RawStream\28\29.2 can change the state due to Audio::RawStream<3\2c\20false\2c\20false>::~RawStream\28\29
[asyncify] Audio::RawStream<2\2c\20false\2c\20true>::~RawStream\28\29.2 can change the state due to Audio::RawStream<2\2c\20false\2c\20true>::~RawStream\28\29
[asyncify] Audio::RawStream<2\2c\20false\2c\20false>::~RawStream\28\29.2 can change the state due to Audio::RawStream<2\2c\20false\2c\20false>::~RawStream\28\29
[asyncify] Audio::RawStream<1\2c\20false\2c\20false>::~RawStream\28\29.2 can change the state due to Audio::RawStream<1\2c\20false\2c\20false>::~RawStream\28\29
[asyncify] OpenGL::ShaderManager::~ShaderManager\28\29.1 can change the state due to OpenGL::ShaderManager::~ShaderManager\28\29
[asyncify] AdLibPart::noteOff\28unsigned\20char\29 can change the state due to MidiDriver_ADLIB::partKeyOff\28AdLibPart*\2c\20unsigned\20char\29
[asyncify] AdLibPercussionChannel::noteOff\28unsigned\20char\29 can change the state due to MidiDriver_ADLIB::partKeyOff\28AdLibPart*\2c\20unsigned\20char\29
[asyncify] AdLibPart::pitchBend\28short\29 can change the state due to MidiDriver_ADLIB::adlibNoteOn\28int\2c\20unsigned\20char\2c\20int\29
[asyncify] AdLibPart::pitchBendFactor\28unsigned\20char\29 can change the state due to MidiDriver_ADLIB::adlibNoteOn\28int\2c\20unsigned\20char\2c\20int\29
[asyncify] AdLibPart::detune\28unsigned\20char\29 can change the state due to MidiDriver_ADLIB::adlibNoteOn\28int\2c\20unsigned\20char\2c\20int\29
[asyncify] AdLibPart::transpose\28signed\20char\29 can change the state due to MidiDriver_ADLIB::adlibNoteOn\28int\2c\20unsigned\20char\2c\20int\29
[asyncify] MidiDriver_ADLIB::setPitchBendRange\28unsigned\20char\2c\20unsigned\20int\29 can change the state due to MidiDriver_ADLIB::adlibNoteOn\28int\2c\20unsigned\20char\2c\20int\29
[asyncify] non-virtual\20thunk\20to\20OPL::DOSBox::OPL::~OPL\28\29.1 can change the state due to OPL::DOSBox::OPL::~OPL\28\29.1
[asyncify] non-virtual\20thunk\20to\20OPL::MAME::OPL::~OPL\28\29.1 can change the state due to OPL::MAME::OPL::~OPL\28\29.1
[asyncify] non-virtual\20thunk\20to\20OPL::NUKED::OPL::~OPL\28\29.1 can change the state due to OPL::NUKED::OPL::~OPL\28\29.1
[asyncify] non-virtual\20thunk\20to\20MidiDriver_MT32::~MidiDriver_MT32\28\29.1 can change the state due to MidiDriver_MT32::~MidiDriver_MT32\28\29.1
[asyncify] MidiDriver_BASE::midiDumpVarLength\28unsigned\20int\20const&\29 can change the state due to debugN\28char\20const*\2c\20...\29
[asyncify] Image::pngWarning\28png_struct_def*\2c\20char\20const*\29 can change the state due to debug\28int\2c\20char\20const*\2c\20...\29
[asyncify] MT32Emu::ScummVMReportHandler::printDebug\28char\20const*\2c\20void*\29 can change the state due to debug\28int\2c\20char\20const*\2c\20...\29
[asyncify] Common::File::open\28Common::SeekableReadStream*\2c\20Common::String\20const&\29 can change the state due to debug\28int\2c\20char\20const*\2c\20...\29
[asyncify] Common::Rational::debugPrint\28int\2c\20char\20const*\29\20const can change the state due to debug\28int\2c\20char\20const*\2c\20...\29
[asyncify] Adl::readSector_NIB\28unsigned\20char*\2c\20unsigned\20int\2c\20unsigned\20char\20const*\2c\20unsigned\20int\2c\20unsigned\20int&\2c\20unsigned\20char\2c\20unsigned\20char\20const*\2c\20unsigned\20int\2c\20unsigned\20int\29 can change the state due to debug\28int\2c\20char\20const*\2c\20...\29
[asyncify] Common::AchievementsManager::unsetActiveDomain\28\29 can change the state due to debug\28int\2c\20char\20const*\2c\20...\29
[asyncify] Adl::printGoodSectors\28Common::Array<bool>&\2c\20unsigned\20int\29 can change the state due to debugN\28int\2c\20char\20const*\2c\20...\29
[asyncify] non-virtual\20thunk\20to\20Common::VirtualMouse::~VirtualMouse\28\29.1 can change the state due to Common::VirtualMouse::~VirtualMouse\28\29.1
[asyncify] non-virtual\20thunk\20to\20Common::OSDMessageQueue::~OSDMessageQueue\28\29.1 can change the state due to Common::OSDMessageQueue::~OSDMessageQueue\28\29.1
[asyncify] Common::BaseString<char>::clear\28\29 can change the state due to Common::BaseString<char>::decRefCount\28int*\29
[asyncify] Common::BaseString<char>::~BaseString\28\29 can change the state due to Common::BaseString<char>::decRefCount\28int*\29
[asyncify] Common::BaseString<char>::assign\28Common::BaseString<char>&&\29 can change the state due to Common::BaseString<char>::decRefCount\28int*\29
[asyncify] Common::BaseString<char32_t>::clear\28\29 can change the state due to Common::BaseString<char>::decRefCount\28int*\29
[asyncify] Common::U32String::operator=\28Common::U32String&&\29 can change the state due to Common::BaseString<char>::decRefCount\28int*\29
[asyncify] Graphics::TTFFont::getCharWidth\28unsigned\20int\29\20const can change the state due to Graphics::TTFFont::assureCached\28unsigned\20int\29\20const
[asyncify] Graphics::TTFFont::getBoundingBox\28unsigned\20int\29\20const can change the state due to Graphics::TTFFont::assureCached\28unsigned\20int\29\20const
[asyncify] Graphics::TTFFont::drawChar\28Graphics::Surface*\2c\20unsigned\20int\2c\20int\2c\20int\2c\20unsigned\20int\2c\20unsigned\20int\20const*\29\20const can change the state due to Graphics::TTFFont::assureCached\28unsigned\20int\29\20const
[asyncify] GUI::UnknownGameDialog::encodeUrlString\28Common::String\20const&\29 can change the state due to Common::String::operator+=\28char\29
[asyncify] Posix::assureDirectoryExists\28Common::String\20const&\2c\20char\20const*\29 can change the state due to Common::String::operator+=\28char\29
[asyncify] Common::Path::appendInPlace\28char\20const*\2c\20char\29 can change the state due to Common::String::operator+=\28char\29
[asyncify] Common::Path::toString\28char\29\20const can change the state due to Common::String::operator+=\28char\29
[asyncify] OSystem_POSIX::getDefaultConfigFileName\28\29 can change the state due to Common::String::operator+=\28char\29
[asyncify] OpenGL::LibRetro::PresetParser::lookUpValue\28Common::String\20const&\2c\20float*\29 can change the state due to Common::operator+\28Common::String\20const&\2c\20char\29
[asyncify] OpenGL::LibRetro::PresetParser::lookUpValue\28Common::String\20const&\2c\20OpenGL::LibRetro::FilteringMode*\2c\20OpenGL::LibRetro::FilteringMode\29 can change the state due to Common::operator+\28Common::String\20const&\2c\20char\29
[asyncify] OpenGL::LibRetro::PresetParser::lookUpValue\28Common::String\20const&\2c\20OpenGL::LibRetro::ScaleType*\2c\20OpenGL::LibRetro::ScaleType\29 can change the state due to Common::operator+\28Common::String\20const&\2c\20char\29
[asyncify] OpenGL::LibRetro::PresetParser::lookUpValue\28Common::String\20const&\2c\20OpenGL::WrapMode*\2c\20OpenGL::WrapMode\29 can change the state due to Common::operator+\28Common::String\20const&\2c\20char\29
[asyncify] bool\20OpenGL::LibRetro::PresetParser::lookUpValue<bool\2c\20bool>\28Common::String\20const&\2c\20bool*\2c\20bool\20const&\29 can change the state due to Common::operator+\28Common::String\20const&\2c\20char\29
[asyncify] OpenGL::LibRetro::PresetParser::computeDefaultScale\28Common::String\20const&\2c\20float*\2c\20unsigned\20int*\2c\20OpenGL::LibRetro::ScaleType\29 can change the state due to Common::operator+\28Common::String\20const&\2c\20char\29
[asyncify] Common::MemcachingCaseInsensitiveArchive::translatePath\28Common::Path\20const&\29\20const can change the state due to Common::normalizePath\28Common::String\20const&\2c\20char\29
[asyncify] GUI::EditableWidget::caretVisualPos\28int\29 can change the state due to Common::convertBiDiU32String\28Common::U32String\20const&\2c\20Common::BiDiParagraph\29
[asyncify] GUI::EditableWidget::caretLogicalPos\28\29\20const can change the state due to Common::convertBiDiU32String\28Common::U32String\20const&\2c\20Common::BiDiParagraph\29
[asyncify] GUI::DropdownButtonWidget::appendEntry\28Common::U32String\20const&\2c\20unsigned\20int\29 can change the state due to byn$mgfn-shared$GUI::DropdownButtonWidget::appendEntry\28Common::U32String\20const&\2c\20unsigned\20int\29
[asyncify] GUI::PopUpWidget::appendEntry\28Common::U32String\20const&\2c\20unsigned\20int\29 can change the state due to byn$mgfn-shared$GUI::DropdownButtonWidget::appendEntry\28Common::U32String\20const&\2c\20unsigned\20int\29
[asyncify] Common::PEResources::getIDList\28Common::WinResourceID\20const&\29\20const can change the state due to Common::HashMap<Common::WinResourceID\2c\20Common::HashMap<Common::WinResourceID\2c\20Common::HashMap<Common::WinResourceID\2c\20Common::PEResources::Resource\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>::getVal\28Common::WinResourceID\20const&\29\20const
[asyncify] Common::PEResources::getLangList\28Common::WinResourceID\20const&\2c\20Common::WinResourceID\20const&\29\20const can change the state due to Common::HashMap<Common::WinResourceID\2c\20Common::HashMap<Common::WinResourceID\2c\20Common::HashMap<Common::WinResourceID\2c\20Common::PEResources::Resource\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>::getVal\28Common::WinResourceID\20const&\29\20const
[asyncify] GUI::SaveLoadChooserSimple::getResultString\28\29\20const can change the state due to GUI::ListWidget::getSelectedString\28\29\20const
[asyncify] virtual\20thunk\20to\20OpenGLSdlGraphics3dManager::clearOverlay\28\29 can change the state due to OpenGLSdlGraphics3dManager::clearOverlay\28\29
[asyncify] Common::VirtualMouse::notifyEvent\28Common::Event\20const&\29 can change the state due to Common::VirtualMouse::handleAxisMotion\28short\2c\20short\29
[asyncify] Common::ConfigManager::getDomain\28Common::String\20const&\29\20const can change the state due to Common::HashMap<Common::String\2c\20Common::ConfigManager::Domain\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::getVal\28Common::String\20const&\29\20const
[asyncify] Common::ConfigManager::get\28Common::String\20const&\29\20const can change the state due to Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::getVal\28Common::String\20const&\29
[asyncify] Graphics::FontManager::getFontByName\28Common::String\20const&\29\20const can change the state due to Common::HashMap<Common::String\2c\20Graphics::ManagedSurface*\2c\20Common::Hash<Common::String>\2c\20Common::EqualTo<Common::String>>::getVal\28Common::String\20const&\29\20const
[asyncify] Graphics::FontManager::getFontByUsage\28Graphics::FontManager::FontUsage\29\20const can change the state due to Common::HashMap<Common::String\2c\20Graphics::ManagedSurface*\2c\20Common::Hash<Common::String>\2c\20Common::EqualTo<Common::String>>::getVal\28Common::String\20const&\29\20const
[asyncify] GUI::ThemeEngine::getImageSurface\28Common::String\20const&\29\20const can change the state due to Common::HashMap<Common::String\2c\20Graphics::ManagedSurface*\2c\20Common::Hash<Common::String>\2c\20Common::EqualTo<Common::String>>::getVal\28Common::String\20const&\29\20const
[asyncify] GUI::LangExtraFont::LangExtraFont\28GUI::LangExtraFont\20const&\29 can change the state due to Common::Array<Common::Language>::Array\28Common::Array<Common::Language>\20const&\29
[asyncify] GUI::LangExtraFont*\20Common::copy<GUI::LangExtraFont\20const*\2c\20GUI::LangExtraFont*>\28GUI::LangExtraFont\20const*\2c\20GUI::LangExtraFont\20const*\2c\20GUI::LangExtraFont*\29 can change the state due to GUI::LangExtraFont::operator=\28GUI::LangExtraFont\20const&\29
[asyncify] Common::Array<OpenGL::VertexAttrib>::push_back\28OpenGL::VertexAttrib\20const&\29 can change the state due to Common::Array<OpenGL::VertexAttrib>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<OpenGL::LibRetroPipeline::Texture>::push_back\28OpenGL::LibRetroPipeline::Texture\20const&\29 can change the state due to Common::Array<OpenGL::LibRetroPipeline::Texture>::allocCapacity\28unsigned\20int\29
[asyncify] OpenGL::LibRetroPipeline::Pass::Pass\28OpenGL::LibRetroPipeline::Pass\20const&\29 can change the state due to Common::Array<OpenGL::LibRetroPipeline::Texture>::allocCapacity\28unsigned\20int\29
[asyncify] OpenGL::LibRetroPipeline::Pass::operator=\28OpenGL::LibRetroPipeline::Pass\20const&\29 can change the state due to Common::Array<OpenGL::LibRetroPipeline::Texture>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<Common::WinResourceID>::push_back\28Common::WinResourceID\20const&\29 can change the state due to Common::Array<OpenGL::LibRetroPipeline::Texture>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<Common::QuickTimeParser::EditListEntry>::resize\28unsigned\20int\29 can change the state due to Common::Array<Agi::WagProperty>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<Agi::WagProperty>::push_back\28Agi::WagProperty\20const&\29 can change the state due to Common::Array<Agi::WagProperty>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<DetectedGame>::push_back\28DetectedGame\20const&\29 can change the state due to Common::Array<DetectedGame>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<DetectedGame>::Array\28Common::Array<DetectedGame>\20const&\29 can change the state due to Common::Array<DetectedGame>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<OSystem::GraphicsMode>::push_back\28OSystem::GraphicsMode\20const&\29 can change the state due to Common::Array<OSystem::GraphicsMode>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<GUI::GridItemInfo>::push_back\28GUI::GridItemInfo\20const&\29 can change the state due to Common::Array<GUI::GridItemInfo>::allocCapacity\28unsigned\20int\29
[asyncify] OpenGL::TiledSurface::TiledSurface\28unsigned\20int\2c\20unsigned\20int\2c\20Graphics::PixelFormat\20const&\29 can change the state due to Common::Array<Common::RemapWidget::ActionRow>::allocCapacity\28unsigned\20int\29
[asyncify] Graphics::VectorRendererSpec<unsigned\20short>::precalcGradient\28int\29 can change the state due to Common::Array<unsigned\20short>::allocCapacity\28unsigned\20int\29
[asyncify] Common::MemoryPool::freeUnusedPages\28\29 can change the state due to Common::Array<PlainGameDescriptor>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<PlainGameDescriptor>::push_back\28PlainGameDescriptor\20const&\29 can change the state due to Common::Array<PlainGameDescriptor>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Keymap::getActionDefaultMappings\28Common::Action*\29 can change the state due to Common::Array<Common::String>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<Common::String>::Array\28unsigned\20int\2c\20Common::String\20const&\29 can change the state due to Common::Array<Common::String>::allocCapacity\28unsigned\20int\29
[asyncify] DefaultSaveFileManager::updateSavefilesList\28Common::Array<Common::String>&\29 can change the state due to Common::Array<Common::String>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<Common::String>::push_back\28Common::String\20const&\29 can change the state due to Common::Array<Common::String>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<Common::String>::reserve\28unsigned\20int\29 can change the state due to Common::Array<Common::String>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<Gob::DataIO::Archive*>::reserve\28unsigned\20int\29 can change the state due to Common::Array<Gob::DataIO::Archive*>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<Gob::DataIO::Archive*>::insert_aux\28Gob::DataIO::Archive**\2c\20Gob::DataIO::Archive*\20const*\2c\20Gob::DataIO::Archive*\20const*\29 can change the state due to Common::Array<Gob::DataIO::Archive*>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<unsigned\20int>::push_back\28unsigned\20int\20const&\29 can change the state due to Common::Array<Gob::DataIO::Archive*>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<unsigned\20int>::Array\28Common::Array<unsigned\20int>\20const&\29 can change the state due to Common::Array<Gob::DataIO::Archive*>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<Plugin*>::operator=\28Common::Array<Plugin*>\20const&\29 can change the state due to Common::Array<Gob::DataIO::Archive*>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<Common::U32String>::operator=\28Common::Array<Common::U32String>\20const&\29 can change the state due to Common::Array<Common::U32String>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<Common::U32String>::push_back\28Common::U32String\20const&\29 can change the state due to Common::Array<Common::U32String>::allocCapacity\28unsigned\20int\29
[asyncify] Common::Array<Common::U32String>::Array\28unsigned\20int\2c\20Common::U32String\20const&\29 can change the state due to Common::Array<Common::U32String>::allocCapacity\28unsigned\20int\29
[asyncify] MT32Emu::RhythmPart::noteOff\28unsigned\20int\29 can change the state due to MT32Emu::Part::stopNote\28unsigned\20int\29
[asyncify] MT32Emu::Part::noteOff\28unsigned\20int\29 can change the state due to MT32Emu::Part::stopNote\28unsigned\20int\29
[asyncify] MT32Emu::Part::resetAllControllers\28\29 can change the state due to MT32Emu::Part::setHoldPedal\28bool\29
[asyncify] MT32Emu::Synth::refreshSystemChanAssign\28unsigned\20char\2c\20unsigned\20char\29 can change the state due to MT32Emu::Part::allSoundOff\28\29
[asyncify] Graphics::TTFFont::~TTFFont\28\29.1 can change the state due to Graphics::TTFFont::~TTFFont\28\29
[asyncify] af_indic_hints_apply can change the state due to af_cjk_hints_apply
[asyncify] SurfaceSdlGraphicsManager::SDL_SetAlpha\28SDL_Surface*\2c\20unsigned\20int\2c\20unsigned\20char\29 can change the state due to SDL_SetSurfaceBlendMode
[asyncify] SdlWindow::~SdlWindow\28\29.1 can change the state due to SdlWindow::~SdlWindow\28\29
[asyncify] SdlEventSource::~SdlEventSource\28\29.1 can change the state due to SdlEventSource::~SdlEventSource\28\29
[asyncify] SdlMutexInternal::~SdlMutexInternal\28\29.1 can change the state due to SdlMutexInternal::~SdlMutexInternal\28\29
[asyncify] non-virtual\20thunk\20to\20StdioStream::~StdioStream\28\29 can change the state due to StdioStream::~StdioStream\28\29.1
[asyncify] StdioStream::~StdioStream\28\29.2 can change the state due to StdioStream::~StdioStream\28\29.1
[asyncify] PosixIoStream::~PosixIoStream\28\29.1 can change the state due to PosixIoStream::~PosixIoStream\28\29
[asyncify] non-virtual\20thunk\20to\20PosixIoStream::~PosixIoStream\28\29 can change the state due to PosixIoStream::~PosixIoStream\28\29
[asyncify] nsvg__parseAttr\28NSVGparser*\2c\20char\20const*\2c\20char\20const*\29 can change the state due to nsvg__parseColor\28char\20const*\29
[asyncify] non-virtual\20thunk\20to\20StdioStream::size\28\29\20const can change the state due to StdioStream::size\28\29\20const
[asyncify] PosixIoStream::size\28\29\20const can change the state due to StdioStream::size\28\29\20const
[asyncify] non-virtual\20thunk\20to\20StdioStream::seek\28long\20long\2c\20int\29 can change the state due to StdioStream::seek\28long\20long\2c\20int\29
[asyncify] non-virtual\20thunk\20to\20StdioStream::pos\28\29\20const can change the state due to StdioStream::pos\28\29\20const
[asyncify] non-virtual\20thunk\20to\20StdioStream::write\28void\20const*\2c\20unsigned\20int\29 can change the state due to StdioStream::write\28void\20const*\2c\20unsigned\20int\29
[asyncify] SDL_qsort can change the state due to qsort
[asyncify] atof can change the state due to strtod
[asyncify] SDL_snprintf can change the state due to vsnprintf
[asyncify] SDL_vsnprintf can change the state due to vsnprintf
[asyncify] __dl_seterr can change the state due to vsnprintf
[asyncify] snprintf can change the state due to vsnprintf
[asyncify] Base::usage\28char\20const*\2c\20...\29 can change the state due to vsnprintf
[asyncify] SDL_LogOutput can change the state due to fiprintf
[asyncify] MT32Emu::ReportHandler::showLCDMessage\28char\20const*\29 can change the state due to iprintf
[asyncify] Base::printDebugFlags\28DebugChannelDef\20const*\29 can change the state due to iprintf
[asyncify] MT32Emu::Part::Part\28MT32Emu::Synth*\2c\20unsigned\20int\29 can change the state due to siprintf
[asyncify] format_message can change the state due to siprintf
[asyncify] DefaultEventManager::pushEvent\28Common::Event\20const&\29 can change the state due to Common::List<Common::Event>::push_back\28Common::Event\20const&\29
[asyncify] DefaultEventManager::notifyEvent\28Common::Event\20const&\29 can change the state due to Common::List<Common::Event>::push_back\28Common::Event\20const&\29
[asyncify] non-virtual\20thunk\20to\20DefaultEventManager::notifyEvent\28Common::Event\20const&\29 can change the state due to Common::List<Common::Event>::push_back\28Common::Event\20const&\29
[asyncify] virtual\20thunk\20to\20SurfaceSdlGraphicsManager::getSupportedFormats\28\29\20const can change the state due to SurfaceSdlGraphicsManager::getSupportedFormats\28\29\20const
[asyncify] OpenGL::OpenGLGraphicsManager::getSupportedFormats\28\29\20const can change the state due to Common::List<Graphics::PixelFormat>::push_back\28Graphics::PixelFormat\20const&\29
[asyncify] OpenGL::OpenGLGraphicsManager::hasFeature\28OSystem::Feature\29\20const can change the state due to OpenGL::LibRetroPipeline::isSupportedByContext\28\29
[asyncify] GUI::GuiObject::GuiObject\28Common::String\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] GUI::ExistingSave::ExistingSave\28GUI::ExistingSave\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] GUI::ThemeLayoutWidget::ThemeLayoutWidget\28GUI::ThemeLayout*\2c\20Common::String\20const&\2c\20short\2c\20short\2c\20Graphics::TextAlign\2c\20bool\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] GUI::ThemeLayoutWidget::ThemeLayoutWidget\28GUI::ThemeLayoutWidget\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] GUI::TabWidget::Tab::Tab\28GUI::TabWidget::Tab\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] Common::Event::Event\28Common::Event\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] Common::HardwareInput::HardwareInput\28Common::HardwareInput\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] Common::Error::Error\28Common::Error\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] Common::SaveFileManager::getErrorDesc\28\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] OpenGL::VertexAttrib::VertexAttrib\28OpenGL::VertexAttrib\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] OpenGL::LibRetro::ShaderTexture::ShaderTexture\28OpenGL::LibRetro::ShaderTexture\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] OpenGL::LibRetro::ShaderPass::ShaderPass\28OpenGL::LibRetro::ShaderPass\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] OpenGL::LibRetroPipeline::Texture::Texture\28OpenGL::LibRetroPipeline::Texture\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] POSIXFilesystemNode::POSIXFilesystemNode\28POSIXFilesystemNode\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] POSIXFilesystemNode::getName\28\29\20const can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] POSIXFilesystemNode::getPath\28\29\20const can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] MusicDevice::getCompleteId\28\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] Common::GenericArchiveMember::GenericArchiveMember\28Common::String\20const&\2c\20Common::Archive\20const*\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] Common::GenericArchiveMember::getName\28\29\20const can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] Common::DebugManager::DebugChannel::DebugChannel\28Common::DebugManager::DebugChannel\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] Common::operator+\28Common::String\20const&\2c\20Common::String\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] Common::operator+\28Common::String\20const&\2c\20char\20const*\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] Common::StringTokenizer::StringTokenizer\28Common::String\20const&\2c\20Common::String\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] Common::U32StringTokenizer::U32StringTokenizer\28Common::U32String\20const&\2c\20Common::String\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] Common::TranslationManager::findMatchingLanguage\28Common::String\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] Common::TranslationManager::getCurrentLanguage\28\29\20const can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] Common::WinResourceID::toString\28\29\20const can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] Common::WinResourceID::WinResourceID\28Common::WinResourceID\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] Common::String::String\28Common::String\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] Common::HashMap<Common::String\2c\20FileProperties\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::allocNode\28Common::String\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] Common::HashMap<Common::String\2c\20int\2c\20Common::Hash<Common::String>\2c\20Common::EqualTo<Common::String>>::allocNode\28Common::String\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] DetectedGame::DetectedGame\28DetectedGame\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::allocNode\28Common::String\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] Common::HashMap<Common::String\2c\20bool\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::allocNode\28Common::String\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] Glk::ChunkEntry::ChunkEntry\28Glk::ChunkEntry\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] Common::String*\20Common::uninitialized_copy<Common::String*\2c\20Common::String>\28Common::String*\2c\20Common::String*\2c\20Common::String*\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] QualifiedGameDescriptor::QualifiedGameDescriptor\28QualifiedGameDescriptor\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] void\20SWAP<Common::String>\28Common::String&\2c\20Common::String&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] Common::AchievementDescription::AchievementDescription\28Common::AchievementDescription\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] SaveStateDescriptor::SaveStateDescriptor\28SaveStateDescriptor\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] GUI::Debugger::Var::Var\28GUI::Debugger::Var\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] GUI::GridItemInfo::GridItemInfo\28GUI::GridItemInfo\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] GUI::LauncherEntry::LauncherEntry\28GUI::LauncherEntry\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28Common::BaseString<char>\20const&\29
[asyncify] GUI::SaveLoadChooser::SaveLoadChooser\28Common::U32String\20const&\2c\20Common::U32String\20const&\2c\20bool\29 can change the state due to Common::BaseString<char32_t>::BaseString\28Common::BaseString<char32_t>\20const&\29
[asyncify] GUI::SaveLoadChooserGrid::getResultString\28\29\20const can change the state due to Common::BaseString<char32_t>::BaseString\28Common::BaseString<char32_t>\20const&\29
[asyncify] GUI::DropdownButtonWidget::Entry::Entry\28GUI::DropdownButtonWidget::Entry\20const&\29 can change the state due to Common::BaseString<char32_t>::BaseString\28Common::BaseString<char32_t>\20const&\29
[asyncify] void\20SWAP<Common::U32String>\28Common::U32String&\2c\20Common::U32String&\29 can change the state due to Common::BaseString<char32_t>::BaseString\28Common::BaseString<char32_t>\20const&\29
[asyncify] GUI::ListWidget::ListData::ListData\28GUI::ListWidget::ListData\20const&\29 can change the state due to Common::BaseString<char32_t>::BaseString\28Common::BaseString<char32_t>\20const&\29
[asyncify] Common::Action::Action\28char\20const*\2c\20Common::U32String\20const&\29 can change the state due to Common::BaseString<char32_t>::BaseString\28Common::BaseString<char32_t>\20const&\29
[asyncify] Common::TranslationManager::getTranslation\28char\20const*\2c\20char\20const*\29\20const can change the state due to Common::BaseString<char32_t>::BaseString\28Common::BaseString<char32_t>\20const&\29
[asyncify] Common::operator+\28Common::U32String\20const&\2c\20Common::U32String\20const&\29 can change the state due to Common::BaseString<char32_t>::BaseString\28Common::BaseString<char32_t>\20const&\29
[asyncify] OSystem::getTextFromClipboard\28\29 can change the state due to Common::BaseString<char32_t>::BaseString\28Common::BaseString<char32_t>\20const&\29
[asyncify] Common::U32String*\20Common::uninitialized_copy<Common::U32String*\2c\20Common::U32String>\28Common::U32String*\2c\20Common::U32String*\2c\20Common::U32String*\29 can change the state due to Common::BaseString<char32_t>::BaseString\28Common::BaseString<char32_t>\20const&\29
[asyncify] GUI::LangExtraFont::storeFileNames\28GUI::TextData\2c\20Common::String\20const&\2c\20Common::String\20const&\2c\20int\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] GUI::TabWidget::Tab::operator=\28GUI::TabWidget::Tab\20const&\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] Common::Event::operator=\28Common::Event\20const&\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] Common::HardwareInput::createKeyboard\28Common::String\20const&\2c\20Common::KeyState\2c\20Common::U32String\20const&\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] Common::HardwareInput::createSimple\28Common::HardwareInputType\2c\20Common::String\20const&\2c\20unsigned\20int\2c\20Common::U32String\20const&\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] Common::HardwareInput::operator=\28Common::HardwareInput\20const&\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] Common::SaveFileManager::setError\28Common::Error\2c\20Common::String\20const&\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] OpenGL::LibRetro::PresetParser::lookUpValue\28Common::String\20const&\2c\20Common::String*\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] OpenGL::LibRetro::ShaderTexture::operator=\28OpenGL::LibRetro::ShaderTexture\20const&\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] OpenGL::LibRetro::ShaderPass::operator=\28OpenGL::LibRetro::ShaderPass\20const&\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] OpenGL::LibRetroPipeline::Texture::operator=\28OpenGL::LibRetroPipeline::Texture\20const&\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] OpenGL::OpenGLGraphicsManager::setShader\28Common::String\20const&\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] OpenGL::OpenGLGraphicsManager::VideoState::operator=\28OpenGL::OpenGLGraphicsManager::VideoState\20const&\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] OpenGL::VertexAttrib::operator=\28OpenGL::VertexAttrib\20const&\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] MusicDevice::getCompleteName\28\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] Common::ConfigManager::Domain::operator=\28Common::ConfigManager::Domain\20const&\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] Common::DebugManager::DebugChannel::operator=\28Common::DebugManager::DebugChannel\20const&\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] Common::Path::Path\28Common::Path\20const&\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] Common::Path::Path\28Common::String\20const&\2c\20char\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] Common::Path::operator=\28Common::Path\20const&\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] Common::WinResourceID::operator=\28Common::String\20const&\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] Common::WinResourceID::operator=\28Common::WinResourceID\20const&\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] FileProperties::operator=\28FileProperties\20const&\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] DetectedGame::operator=\28DetectedGame\20const&\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] DetectedGame::addExtraEntry\28Common::String\20const&\2c\20Common::String\20const&\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] Glk::GlkDetectedGame::GlkDetectedGame\28char\20const*\2c\20char\20const*\2c\20Common::String\20const&\2c\20Common::String\20const&\2c\20unsigned\20long\2c\20GameSupportLevel\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] Glk::ChunkEntry::operator=\28Glk::ChunkEntry\20const&\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] Common::String*\20Common::copy<Common::String\20const*\2c\20Common::String*>\28Common::String\20const*\2c\20Common::String\20const*\2c\20Common::String*\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] SizeMD5::operator=\28SizeMD5\20const&\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] QualifiedGameDescriptor::operator=\28QualifiedGameDescriptor\20const&\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] Common::AchievementDescription::operator=\28Common::AchievementDescription\20const&\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] DetectedGame::setGUIOptions\28Common::String\20const&\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] GUI::ConsoleDialog::addToHistory\28Common::String\20const&\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] GUI::Debugger::Var::operator=\28GUI::Debugger::Var\20const&\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::tryGetVal\28Common::String\20const&\2c\20Common::String&\29\20const can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] GUI::LauncherEntry::operator=\28GUI::LauncherEntry\20const&\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] GUI::GridItemInfo::operator=\28GUI::GridItemInfo\20const&\29 can change the state due to Common::String::operator=\28Common::String\20const&\29
[asyncify] GUI::DropdownButtonWidget::Entry::operator=\28GUI::DropdownButtonWidget::Entry\20const&\29 can change the state due to Common::U32String::operator=\28Common::U32String\20const&\29
[asyncify] GUI::GridWidget::setGroupHeaderFormat\28Common::U32String\20const&\2c\20Common::U32String\20const&\29 can change the state due to Common::U32String::operator=\28Common::U32String\20const&\29
[asyncify] GUI::GroupedListWidget::setGroupHeaderFormat\28Common::U32String\20const&\2c\20Common::U32String\20const&\29 can change the state due to Common::U32String::operator=\28Common::U32String\20const&\29
[asyncify] GUI::ListWidget::ListData::ListData\28Common::U32String\20const&\2c\20Common::U32String\20const&\29 can change the state due to Common::U32String::operator=\28Common::U32String\20const&\29
[asyncify] GUI::ListWidget::ListData::operator=\28GUI::ListWidget::ListData\20const&\29 can change the state due to Common::U32String::operator=\28Common::U32String\20const&\29
[asyncify] OpenGL::OpenGLGraphicsManager::displayMessageOnOSD\28Common::U32String\20const&\29 can change the state due to Common::U32String::operator=\28Common::U32String\20const&\29
[asyncify] OSystem::setTextInClipboard\28Common::U32String\20const&\29 can change the state due to Common::U32String::operator=\28Common::U32String\20const&\29
[asyncify] Common::U32String*\20Common::copy<Common::U32String\20const*\2c\20Common::U32String*>\28Common::U32String\20const*\2c\20Common::U32String\20const*\2c\20Common::U32String*\29 can change the state due to Common::U32String::operator=\28Common::U32String\20const&\29
[asyncify] Common::Keymapper::getMappedActions\28Common::Event\20const&\2c\20Common::Array<Common::Action*>&\2c\20Common::Keymap::KeymapType\29\20const can change the state due to Common::BaseString<char>::BaseString\28char\20const*\29
[asyncify] Graphics::Font::getFontName\28\29\20const can change the state due to Common::BaseString<char>::BaseString\28char\20const*\29
[asyncify] Graphics::TTFFont::getFontName\28\29\20const can change the state due to Common::BaseString<char>::BaseString\28char\20const*\29
[asyncify] OpenGL::VertexAttrib::VertexAttrib\28unsigned\20int\2c\20char\20const*\29 can change the state due to Common::BaseString<char>::BaseString\28char\20const*\29
[asyncify] Common::ConfigManager::registerDefault\28Common::String\20const&\2c\20char\20const*\29 can change the state due to Common::BaseString<char>::BaseString\28char\20const*\29
[asyncify] Common::errorToString\28Common::ErrorCode\29 can change the state due to Common::BaseString<char>::BaseString\28char\20const*\29
[asyncify] Common::getGameGUIOptionsDescriptionLanguage\28Common::Language\29 can change the state due to Common::BaseString<char>::BaseString\28char\20const*\29
[asyncify] Common::String::substr\28unsigned\20long\2c\20unsigned\20long\29\20const can change the state due to Common::BaseString<char>::BaseString\28char\20const*\29
[asyncify] Common::operator+\28char\20const*\2c\20Common::String\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28char\20const*\29
[asyncify] OSystem::getDefaultConfigFileName\28\29 can change the state due to Common::BaseString<char>::BaseString\28char\20const*\29
[asyncify] OSystem::getSystemLanguage\28\29\20const can change the state due to Common::BaseString<char>::BaseString\28char\20const*\29
[asyncify] unzLocateFile\28void*\2c\20char\20const*\2c\20int\29 can change the state due to Common::BaseString<char>::BaseString\28char\20const*\29
[asyncify] Glk::GlkDetectedGame::getGlkGUIOptions\28\29 can change the state due to Common::BaseString<char>::BaseString\28char\20const*\29
[asyncify] Glk::GlkDetectedGame::GlkDetectedGame\28char\20const*\2c\20char\20const*\2c\20Common::String\20const&\2c\20GameSupportLevel\29 can change the state due to Common::BaseString<char>::BaseString\28char\20const*\29
[asyncify] Glk::GlkDetectedGame::GlkDetectedGame\28char\20const*\2c\20char\20const*\2c\20char\20const*\2c\20Common::String\20const&\2c\20Common::Language\2c\20GameSupportLevel\29 can change the state due to Common::BaseString<char>::BaseString\28char\20const*\29
[asyncify] Glk::Comprehend::ComprehendMetaEngine::findGame\28char\20const*\29 can change the state due to Common::BaseString<char>::BaseString\28char\20const*\29
[asyncify] OSystem_SDL::getSystemLanguage\28\29\20const can change the state due to Common::BaseString<char>::BaseString\28char\20const*\29
[asyncify] Common::String::String\28char\20const*\29 can change the state due to Common::BaseString<char>::BaseString\28char\20const*\29
[asyncify] AdvancedMetaEngineDetection::isEntryGrayListed\28ADGameDescription\20const*\29\20const can change the state due to Common::BaseString<char>::BaseString\28char\20const*\29
[asyncify] QualifiedGameDescriptor::QualifiedGameDescriptor\28char\20const*\2c\20PlainGameDescriptor\20const&\29 can change the state due to Common::BaseString<char>::BaseString\28char\20const*\29
[asyncify] Common::StringTokenizer::nextToken\28\29 can change the state due to Common::BaseString<char>::BaseString\28char\20const*\2c\20unsigned\20int\29
[asyncify] GUI::Debugger::debuggerCompletionCallback\28GUI::ConsoleDialog*\2c\20char\20const*\2c\20Common::String&\2c\20void*\29 can change the state due to Common::BaseString<char>::BaseString\28char\20const*\2c\20char\20const*\29
[asyncify] Common::BaseString<char>::deleteChar\28unsigned\20int\29 can change the state due to Common::BaseString<char>::makeUnique\28\29
[asyncify] Common::BaseString<char>::erase\28unsigned\20int\2c\20unsigned\20int\29 can change the state due to Common::BaseString<char>::makeUnique\28\29
[asyncify] Common::BaseString<char>::toLowercase\28\29 can change the state due to Common::BaseString<char>::makeUnique\28\29
[asyncify] Common::BaseString<char>::trim\28\29 can change the state due to Common::BaseString<char>::makeUnique\28\29
[asyncify] Common::BaseString<char>::begin\28\29 can change the state due to Common::BaseString<char>::makeUnique\28\29
[asyncify] GUI::ConsoleDialog::getUserInput\28\29 can change the state due to Common::BaseString<char>::insertChar\28char\2c\20unsigned\20int\29
[asyncify] Common::String::operator+=\28char\20const*\29 can change the state due to Common::BaseString<char>::assignAppend\28char\20const*\29
[asyncify] Common::String::operator+=\28Common::String\20const&\29 can change the state due to Common::BaseString<char>::assignAppend\28Common::BaseString<char>\20const&\29
[asyncify] Common::XMLParser::loadStream\28Common::SeekableReadStream*\29 can change the state due to Common::String::operator=\28char\20const*\29
[asyncify] byn$mgfn-shared$OSystem_POSIX::getDefaultIconsPath\28\29 can change the state due to Common::String::operator=\28char\20const*\29
[asyncify] Common::String::format\28char\20const*\2c\20...\29 can change the state due to Common::String::vformat\28char\20const*\2c\20void*\29
[asyncify] Common::String::String\28Common::U32String\20const&\2c\20Common::CodePage\29 can change the state due to Common::U32String::encode\28Common::CodePage\29\20const
[asyncify] Common::convertFromU32String\28Common::U32String\20const&\2c\20Common::CodePage\29 can change the state due to Common::U32String::encode\28Common::CodePage\29\20const
[asyncify] Common::U32String::substr\28unsigned\20long\2c\20unsigned\20long\29\20const can change the state due to Common::BaseString<char32_t>::BaseString\28char32_t\20const*\29
[asyncify] Common::U32StringTokenizer::nextToken\28\29 can change the state due to Common::BaseString<char32_t>::BaseString\28char32_t\20const*\2c\20char32_t\20const*\29
[asyncify] Common::BaseString<char32_t>::deleteChar\28unsigned\20int\29 can change the state due to Common::BaseString<char32_t>::makeUnique\28\29
[asyncify] Common::BaseString<char32_t>::toLowercase\28\29 can change the state due to Common::BaseString<char32_t>::makeUnique\28\29
[asyncify] Common::BaseString<char32_t>::begin\28\29 can change the state due to Common::BaseString<char32_t>::makeUnique\28\29
[asyncify] Common::U32String::insertString\28char\20const*\2c\20unsigned\20int\2c\20Common::CodePage\29 can change the state due to Common::BaseString<char32_t>::insertChar\28char32_t\2c\20unsigned\20int\29
[asyncify] Common::String::decode\28Common::CodePage\29\20const can change the state due to Common::U32String::decodeInternal\28char\20const*\2c\20unsigned\20int\2c\20Common::CodePage\29
[asyncify] Common::U32String::U32String\28char\20const*\2c\20Common::CodePage\29 can change the state due to Common::U32String::decodeInternal\28char\20const*\2c\20unsigned\20int\2c\20Common::CodePage\29
[asyncify] Common::U32String::U32String\28Common::String\20const&\2c\20Common::CodePage\29 can change the state due to Common::U32String::decodeInternal\28char\20const*\2c\20unsigned\20int\2c\20Common::CodePage\29
[asyncify] Common::U32String::operator=\28Common::String\20const&\29 can change the state due to Common::U32String::decodeInternal\28char\20const*\2c\20unsigned\20int\2c\20Common::CodePage\29
[asyncify] Common::U32String::operator=\28char\20const*\29 can change the state due to Common::U32String::decodeInternal\28char\20const*\2c\20unsigned\20int\2c\20Common::CodePage\29
[asyncify] GUI::Widget::cleanupHotkey\28Common::U32String\20const&\29 can change the state due to Common::U32String::operator+=\28char32_t\29
[asyncify] GUI::ListWidget::escapeString\28Common::U32String\20const&\29 can change the state due to Common::U32String::operator+=\28char32_t\29
[asyncify] SdlGraphicsManager::activateManager\28\29 can change the state due to Common::EventDispatcher::registerObserver\28Common::EventObserver*\2c\20unsigned\20int\2c\20bool\2c\20bool\29
[asyncify] AdvancedMetaEngineDetection::fallbackDetect\28Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\2c\20Common::FSList\20const&\2c\20ADDetectedGameExtraInfo**\29\20const can change the state due to ADDetectedGame::ADDetectedGame\28\29
[asyncify] MadeMetaEngineDetection::fallbackDetect\28Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\2c\20Common::FSList\20const&\2c\20ADDetectedGameExtraInfo**\29\20const can change the state due to ADDetectedGame::ADDetectedGame\28\29
[asyncify] ADDetectedGame::ADDetectedGame\28ADDetectedGame\20const&\29 can change the state due to Common::HashMap<Common::String\2c\20FileProperties\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::HashMap\28Common::HashMap<Common::String\2c\20FileProperties\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\29
[asyncify] ADDetectedGame::operator=\28ADDetectedGame\20const&\29 can change the state due to Common::HashMap<Common::String\2c\20FileProperties\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::operator=\28Common::HashMap<Common::String\2c\20FileProperties\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>\20const&\29
[asyncify] Common::FSNode::FSNode\28AbstractFSNode*\29 can change the state due to Common::SharedPtr<AbstractFSNode>::SharedPtr<AbstractFSNode>\28AbstractFSNode*\29
[asyncify] GUI::MetadataParser::CustomXMLKeyLayout::CustomXMLKeyLayout\28\29 can change the state due to Common::XMLParser::XMLKeyLayout::XMLKeyLayout\28\29
[asyncify] GUI::ThemeParser::CustomXMLKeyLayout::CustomXMLKeyLayout\28\29 can change the state due to Common::XMLParser::XMLKeyLayout::XMLKeyLayout\28\29
[asyncify] OSystem_SDL::getDefaultIconsPath\28\29 can change the state due to byn$mgfn-shared$OSystem_SDL::getDefaultIconsPath\28\29
[asyncify] OSystem_SDL::getScreenshotsPath\28\29 can change the state due to byn$mgfn-shared$OSystem_SDL::getDefaultIconsPath\28\29
[asyncify] Common::HashMap<Common::String\2c\20int\2c\20Common::Hash<Common::String>\2c\20Common::EqualTo<Common::String>>::getOrCreateVal\28Common::String\20const&\29 can change the state due to Common::HashMap<Common::String\2c\20int\2c\20Common::Hash<Common::String>\2c\20Common::EqualTo<Common::String>>::lookupAndCreateIfMissing\28Common::String\20const&\29
[asyncify] Common::HashMap<Common::String\2c\20bool\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::setVal\28Common::String\20const&\2c\20bool\20const&\29 can change the state due to Common::HashMap<Common::String\2c\20bool\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing\28Common::String\20const&\29
[asyncify] Common::ConfigManager::set\28Common::String\20const&\2c\20Common::String\20const&\29 can change the state due to Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::setVal\28Common::String\20const&\2c\20Common::String\20const&\29
[asyncify] Common::ConfigManager::registerDefault\28Common::String\20const&\2c\20Common::String\20const&\29 can change the state due to Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::setVal\28Common::String\20const&\2c\20Common::String\20const&\29
[asyncify] Common::ConfigManager::registerDefault\28Common::String\20const&\2c\20int\29 can change the state due to Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::setVal\28Common::String\20const&\2c\20Common::String\20const&\29
[asyncify] GUI::ExistingSave*\20Common::copy<GUI::ExistingSave\20const*\2c\20GUI::ExistingSave*>\28GUI::ExistingSave\20const*\2c\20GUI::ExistingSave\20const*\2c\20GUI::ExistingSave*\29 can change the state due to GUI::ExistingSave::operator=\28GUI::ExistingSave\20const&\29
[asyncify] void\20Common::sort<SaveStateDescriptor*\2c\20SaveStateDescriptorSlotComparator>\28SaveStateDescriptor*\2c\20SaveStateDescriptor*\2c\20SaveStateDescriptorSlotComparator\29 can change the state due to void\20SWAP<SaveStateDescriptor>\28SaveStateDescriptor&\2c\20SaveStateDescriptor&\29
[asyncify] Common::DefaultDeleter<OpenGL::LibRetro::ShaderPreset>::operator\28\29\28OpenGL::LibRetro::ShaderPreset*\29 can change the state due to OpenGL::LibRetro::ShaderPreset::~ShaderPreset\28\29
[asyncify] Common::FSDirectory::~FSDirectory\28\29.1 can change the state due to Common::FSDirectory::~FSDirectory\28\29
[asyncify] DefaultSaveFileManager::~DefaultSaveFileManager\28\29 can change the state due to Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::~HashMap\28\29
[asyncify] Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::freeNode\28Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::Node*\29 can change the state due to Common::HashMap<Common::String\2c\20Common::FSNode\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::Node::~Node\28\29
[asyncify] Glk::Blorb::~Blorb\28\29.1 can change the state due to Glk::Blorb::~Blorb\28\29
[asyncify] Common::Array<GUI::ExistingSave>::freeStorage\28GUI::ExistingSave*\2c\20unsigned\20int\29 can change the state due to GUI::ExistingSave::~ExistingSave\28\29
[asyncify] Common::Array<SaveStateDescriptor>::~Array\28\29 can change the state due to Common::Array<SaveStateDescriptor>::freeStorage\28SaveStateDescriptor*\2c\20unsigned\20int\29
[asyncify] non-virtual\20thunk\20to\20GUI::ButtonWidget::~ButtonWidget\28\29.1 can change the state due to GUI::ButtonWidget::~ButtonWidget\28\29.1
[asyncify] GUI::DropdownButtonWidget::~DropdownButtonWidget\28\29.1 can change the state due to GUI::DropdownButtonWidget::~DropdownButtonWidget\28\29
[asyncify] non-virtual\20thunk\20to\20GUI::DropdownButtonWidget::~DropdownButtonWidget\28\29 can change the state due to GUI::DropdownButtonWidget::~DropdownButtonWidget\28\29
[asyncify] GUI::GroupedListWidget::~GroupedListWidget\28\29.1 can change the state due to GUI::GroupedListWidget::~GroupedListWidget\28\29
[asyncify] non-virtual\20thunk\20to\20GUI::GroupedListWidget::~GroupedListWidget\28\29 can change the state due to GUI::GroupedListWidget::~GroupedListWidget\28\29
[asyncify] non-virtual\20thunk\20to\20GUI::ListWidget::~ListWidget\28\29.1 can change the state due to GUI::ListWidget::~ListWidget\28\29.1
[asyncify] non-virtual\20thunk\20to\20GUI::DomainEditTextWidget::~DomainEditTextWidget\28\29.1 can change the state due to GUI::DomainEditTextWidget::~DomainEditTextWidget\28\29
[asyncify] non-virtual\20thunk\20to\20OSystem_Emscripten::hasFeature\28OSystem::Feature\29 can change the state due to OSystem_Emscripten::hasFeature\28OSystem::Feature\29
[asyncify] virtual\20thunk\20to\20OSystem_Emscripten::hasFeature\28OSystem::Feature\29 can change the state due to OSystem_Emscripten::hasFeature\28OSystem::Feature\29
[asyncify] virtual\20thunk\20to\20Common::SeekableSubReadStream::~SeekableSubReadStream\28\29.1 can change the state due to Common::SeekableSubReadStream::~SeekableSubReadStream\28\29.1
[asyncify] virtual\20thunk\20to\20Common::SafeSeekableSubReadStream::~SafeSeekableSubReadStream\28\29.1 can change the state due to Common::SafeSeekableSubReadStream::~SafeSeekableSubReadStream\28\29.1
[asyncify] GUI::ThemeParser::closedKeyCallback\28Common::XMLParser::ParserNode*\29 can change the state due to Common::BaseString<char>::clear\28\29
[asyncify] Common::SaveFileManager::clearError\28\29 can change the state due to Common::BaseString<char>::clear\28\29
[asyncify] Common::ConfigManager::removeGameDomain\28Common::String\20const&\29 can change the state due to Common::BaseString<char>::clear\28\29
[asyncify] Common::Path::set\28char\20const*\2c\20char\29 can change the state due to Common::BaseString<char>::clear\28\29
[asyncify] Common::ConfigManager::Domain::~Domain\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] GUI::LangExtraFont::~LangExtraFont\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] GUI::StaticTextWidget::setValue\28int\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] GUI::Widget::setTooltip\28Common::String\20const&\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] void\20Common::sort<Common::U32String*\2c\20GUI::GroupedListWidget::sortGroups\28\29::$_0>\28Common::U32String*\2c\20Common::U32String*\2c\20GUI::GroupedListWidget::sortGroups\28\29::$_0\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] GUI::PopUpWidget::appendEntry\28Common::String\20const&\2c\20unsigned\20int\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] DefaultAudioCDManager::fillPotentialTrackNames\28Common::Array<Common::String>&\2c\20int\29\20const can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::ArtificialEventSource::pollEvent\28Common::Event&\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::Keymap::~Keymap\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::KeymapperDefaultBindings::findDefaultBinding\28Common::String\2c\20Common::String\29\20const can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::DelayedEventSource::~DelayedEventSource\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::SaveFileManager::~SaveFileManager\28\29.1 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] convUTF8ToUTF32\28char\20const*\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] POSIXFilesystemNode::~POSIXFilesystemNode\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] MusicDevice::getHandle\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::GenericArchiveMember::~GenericArchiveMember\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::HashMap<Common::String\2c\20Common::ConfigManager::Domain\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::freeNode\28Common::HashMap<Common::String\2c\20Common::ConfigManager::Domain\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::Node*\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::ConfigManager::~ConfigManager\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::HashMap<Common::String\2c\20Common::DebugManager::DebugChannel\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::freeNode\28Common::HashMap<Common::String\2c\20Common::DebugManager::DebugChannel\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::Node*\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::Error::Error\28Common::ErrorCode\2c\20Common::String\20const&\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::parseGameGUIOptions\28Common::String\20const&\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::Array<Common::String>::resize\28unsigned\20int\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::TranslationManager::~TranslationManager\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] void\20SWAP<Common::TLanguage>\28Common::TLanguage&\2c\20Common::TLanguage&\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::UnicodeBiDiText::~UnicodeBiDiText\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::HashMap<Common::String\2c\20cached_file_in_zip\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::~HashMap\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::ZipArchive::hasFile\28Common::Path\20const&\29\20const can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::HashMap<Common::WinResourceID\2c\20Common::String\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>::~HashMap\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::NEResources::Resource::~Resource\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::WinResourceID_Hash::operator\28\29\28Common::WinResourceID\20const&\29\20const can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::HashMap<Common::WinResourceID\2c\20Common::HashMap<Common::WinResourceID\2c\20Common::PEResources::Resource\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>::~HashMap\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::HashMap<Common::WinResourceID\2c\20Common::HashMap<Common::WinResourceID\2c\20Common::HashMap<Common::WinResourceID\2c\20Common::PEResources::Resource\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>::freeNode\28Common::HashMap<Common::WinResourceID\2c\20Common::HashMap<Common::WinResourceID\2c\20Common::HashMap<Common::WinResourceID\2c\20Common::PEResources::Resource\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>::Node*\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::HashMap<Common::String\2c\20Common::PEResources::Section\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::freeNode\28Common::HashMap<Common::String\2c\20Common::PEResources::Section\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::Node*\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::ObjectPool<Common::XMLParser::ParserNode\2c\208ul>::deleteChunk\28Common::XMLParser::ParserNode*\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] AdvancedMetaEngineDetection::~AdvancedMetaEngineDetection\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::HashMap<Common::String\2c\20bool\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::freeNode\28Common::HashMap<Common::String\2c\20bool\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::Node*\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::HashMap<Common::String\2c\20FileProperties\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::~HashMap\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::HashMap<Common::String\2c\20FileProperties\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::freeNode\28Common::HashMap<Common::String\2c\20FileProperties\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::Node*\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] byn$mgfn-shared$Common::Action::setCustomBackendActionAxisEvent\28unsigned\20int\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] AgiMetaEngineDetection::~AgiMetaEngineDetection\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] DetectedGame::~DetectedGame\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::~HashMap\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] AGSMetaEngineDetection::~AGSMetaEngineDetection\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::Node::~Node\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::HashMap<Common::String\2c\20Common::U32String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::Node::~Node\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Glk::Blorb::hasFile\28Common::Path\20const&\29\20const can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] byn$mgfn-shared$Common::Array<GUI::Debugger::Var>::freeStorage\28GUI::Debugger::Var*\2c\20unsigned\20int\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::HashMap<Common::String\2c\20SizeMD5\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::Node::~Node\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] byn$mgfn-shared$Common::List<Common::String>::clear\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] QualifiedGameDescriptor::~QualifiedGameDescriptor\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::HashMap<Common::String\2c\20long\20long\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::freeNode\28Common::HashMap<Common::String\2c\20long\20long\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::Node*\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] FileMapArchive::hasFile\28Common::Path\20const&\29\20const can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::INIFile::~INIFile\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::AchievementsManager::~AchievementsManager\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::HashMap<Common::String\2c\20Common::Array<Common::AchievementDescription>\2c\20Common::Hash<Common::String>\2c\20Common::EqualTo<Common::String>>::freeNode\28Common::HashMap<Common::String\2c\20Common::Array<Common::AchievementDescription>\2c\20Common::Hash<Common::String>\2c\20Common::EqualTo<Common::String>>::Node*\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::INIFile::Section::~Section\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::Action::setKeyEvent\28Common::KeyState\20const&\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::Action::setEvent\28Common::EventType\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] byn$mgfn-shared$Common::Array<Common::String>::freeStorage\28Common::String*\2c\20unsigned\20int\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] byn$mgfn-shared$Common::List<Common::String>::erase\28Common::ListInternal::NodeBase*\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] GUI::LauncherEntry::~LauncherEntry\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] byn$mgfn-shared$Common::Array<Glk::ChunkEntry>::freeStorage\28Glk::ChunkEntry*\2c\20unsigned\20int\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] GUI::GridItemInfo::~GridItemInfo\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] GUI::MetadataGame::~MetadataGame\28\29 can change the state due to Common::BaseString<char>::~BaseString\28\29
[asyncify] Common::String::operator=\28Common::String&&\29 can change the state due to Common::BaseString<char>::assign\28Common::BaseString<char>&&\29
[asyncify] Graphics::\28anonymous\20namespace\29::WordWrapper<Common::U32String>::add\28Common::U32String&\2c\20int&\29 can change the state due to Common::BaseString<char32_t>::clear\28\29
[asyncify] Common::HardwareInput::operator=\28Common::HardwareInput&&\29 can change the state due to Common::U32String::operator=\28Common::U32String&&\29
[asyncify] Graphics::TTFFont::drawChar\28Graphics::Surface*\2c\20unsigned\20int\2c\20int\2c\20int\2c\20unsigned\20int\29\20const can change the state due to Graphics::TTFFont::drawChar\28Graphics::Surface*\2c\20unsigned\20int\2c\20int\2c\20int\2c\20unsigned\20int\2c\20unsigned\20int\20const*\29\20const
[asyncify] Common::Path::append\28char\20const*\2c\20char\29\20const can change the state due to Common::Path::appendInPlace\28char\20const*\2c\20char\29
[asyncify] Common::ZipArchive::translatePath\28Common::Path\20const&\29\20const can change the state due to Common::Path::toString\28char\29\20const
[asyncify] virtual\20thunk\20to\20OSystem_POSIX::getDefaultConfigFileName\28\29 can change the state due to OSystem_POSIX::getDefaultConfigFileName\28\29
[asyncify] non-virtual\20thunk\20to\20Common::VirtualMouse::notifyEvent\28Common::Event\20const&\29 can change the state due to Common::VirtualMouse::notifyEvent\28Common::Event\20const&\29
[asyncify] Common::ConfigManager::hasKey\28Common::String\20const&\2c\20Common::String\20const&\29\20const can change the state due to Common::ConfigManager::getDomain\28Common::String\20const&\29\20const
[asyncify] GUI::LangExtraFont*\20Common::uninitialized_copy<GUI::LangExtraFont*\2c\20GUI::LangExtraFont>\28GUI::LangExtraFont*\2c\20GUI::LangExtraFont*\2c\20GUI::LangExtraFont*\29 can change the state due to GUI::LangExtraFont::LangExtraFont\28GUI::LangExtraFont\20const&\29
[asyncify] OpenGL::LibRetroPipeline::Pass*\20Common::uninitialized_copy<OpenGL::LibRetroPipeline::Pass*\2c\20OpenGL::LibRetroPipeline::Pass>\28OpenGL::LibRetroPipeline::Pass*\2c\20OpenGL::LibRetroPipeline::Pass*\2c\20OpenGL::LibRetroPipeline::Pass*\29 can change the state due to OpenGL::LibRetroPipeline::Pass::Pass\28OpenGL::LibRetroPipeline::Pass\20const&\29
[asyncify] OpenGL::LibRetroPipeline::Pass*\20Common::copy<OpenGL::LibRetroPipeline::Pass\20const*\2c\20OpenGL::LibRetroPipeline::Pass*>\28OpenGL::LibRetroPipeline::Pass\20const*\2c\20OpenGL::LibRetroPipeline::Pass\20const*\2c\20OpenGL::LibRetroPipeline::Pass*\29 can change the state due to OpenGL::LibRetroPipeline::Pass::operator=\28OpenGL::LibRetroPipeline::Pass\20const&\29
[asyncify] Common::NEResources::getIDList\28Common::WinResourceID\20const&\29\20const can change the state due to Common::Array<Common::WinResourceID>::push_back\28Common::WinResourceID\20const&\29
[asyncify] DetectionResults::listRecognizedGames\28\29\20const can change the state due to Common::Array<DetectedGame>::push_back\28DetectedGame\20const&\29
[asyncify] Graphics::VectorRendererSpec<unsigned\20short>::fillSurface\28\29 can change the state due to Graphics::VectorRendererSpec<unsigned\20short>::precalcGradient\28int\29
[asyncify] Graphics::VectorRendererSpec<unsigned\20short>::drawInteriorRoundedSquareAlg\28int\2c\20int\2c\20int\2c\20int\2c\20int\2c\20unsigned\20short\2c\20Graphics::VectorRenderer::FillMode\29 can change the state due to Graphics::VectorRendererSpec<unsigned\20short>::precalcGradient\28int\29
[asyncify] Graphics::VectorRendererSpec<unsigned\20short>::drawInteriorRoundedSquareAlgClip\28int\2c\20int\2c\20int\2c\20int\2c\20int\2c\20unsigned\20short\2c\20Graphics::VectorRenderer::FillMode\29 can change the state due to Graphics::VectorRendererSpec<unsigned\20short>::precalcGradient\28int\29
[asyncify] Graphics::VectorRendererSpec<unsigned\20short>::drawTabAlg\28int\2c\20int\2c\20int\2c\20int\2c\20int\2c\20unsigned\20short\2c\20Graphics::VectorRenderer::FillMode\2c\20int\2c\20int\29 can change the state due to Graphics::VectorRendererSpec<unsigned\20short>::precalcGradient\28int\29
[asyncify] Graphics::VectorRendererSpec<unsigned\20short>::drawTabAlgClip\28int\2c\20int\2c\20int\2c\20int\2c\20int\2c\20unsigned\20short\2c\20Graphics::VectorRenderer::FillMode\2c\20int\2c\20int\29 can change the state due to Graphics::VectorRendererSpec<unsigned\20short>::precalcGradient\28int\29
[asyncify] Graphics::VectorRendererAA<unsigned\20short>::drawTabAlg\28int\2c\20int\2c\20int\2c\20int\2c\20int\2c\20unsigned\20short\2c\20Graphics::VectorRenderer::FillMode\2c\20int\2c\20int\29 can change the state due to Graphics::VectorRendererSpec<unsigned\20short>::precalcGradient\28int\29
[asyncify] Common::HashMap<Common::String\2c\20Graphics::ManagedSurface*\2c\20Common::Hash<Common::String>\2c\20Common::EqualTo<Common::String>>::clear\28bool\29 can change the state due to Common::MemoryPool::freeUnusedPages\28\29
[asyncify] Common::HashMap<int\2c\20Graphics::ManagedSurface\20const*\2c\20Common::Hash<int>\2c\20Common::EqualTo<int>>::clear\28bool\29 can change the state due to Common::MemoryPool::freeUnusedPages\28\29
[asyncify] Common::HashMap<Common::U32String\2c\20int\2c\20Common::Hash<Common::U32String>\2c\20Common::EqualTo<Common::U32String>>::clear\28bool\29 can change the state due to Common::MemoryPool::freeUnusedPages\28\29
[asyncify] Common::HashMap<int\2c\20Common::Array<int>\2c\20Common::Hash<int>\2c\20Common::EqualTo<int>>::clear\28bool\29 can change the state due to Common::MemoryPool::freeUnusedPages\28\29
[asyncify] Common::HashMap<Common::String\2c\20Common::ConfigManager::Domain\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::clear\28bool\29 can change the state due to Common::MemoryPool::freeUnusedPages\28\29
[asyncify] Common::HashMap<Common::String\2c\20Common::Array<Common::AchievementDescription>\2c\20Common::Hash<Common::String>\2c\20Common::EqualTo<Common::String>>::clear\28bool\29 can change the state due to Common::MemoryPool::freeUnusedPages\28\29
[asyncify] Common::MemoryPool::allocChunk\28\29 can change the state due to Common::Array<PlainGameDescriptor>::push_back\28PlainGameDescriptor\20const&\29
[asyncify] GlkMetaEngineDetection::getSupportedGames\28\29\20const can change the state due to Common::Array<PlainGameDescriptor>::push_back\28PlainGameDescriptor\20const&\29
[asyncify] PlainGameList::PlainGameList\28PlainGameDescriptor\20const*\29 can change the state due to Common::Array<PlainGameDescriptor>::push_back\28PlainGameDescriptor\20const&\29
[asyncify] SkyMetaEngineDetection::getSupportedGames\28\29\20const can change the state due to Common::Array<PlainGameDescriptor>::push_back\28PlainGameDescriptor\20const&\29
[asyncify] Common::Action::addDefaultInputMapping\28Common::String\20const&\29 can change the state due to Common::Array<Common::String>::push_back\28Common::String\20const&\29
[asyncify] Common::Array<unsigned\20int>::resize\28unsigned\20int\29 can change the state due to Common::Array<Gob::DataIO::Archive*>::reserve\28unsigned\20int\29
[asyncify] Common::Array<Common::Keymap*>::push_back\28Common::Array<Common::Keymap*>\20const&\29 can change the state due to Common::Array<Gob::DataIO::Archive*>::insert_aux\28Gob::DataIO::Archive**\2c\20Gob::DataIO::Archive*\20const*\2c\20Gob::DataIO::Archive*\20const*\29
[asyncify] Common::Array<Gob::DataIO::Archive*>::push_back\28Gob::DataIO::Archive*\20const&\29 can change the state due to Common::Array<Gob::DataIO::Archive*>::insert_aux\28Gob::DataIO::Archive**\2c\20Gob::DataIO::Archive*\20const*\2c\20Gob::DataIO::Archive*\20const*\29
[asyncify] Graphics::VectorRendererSpec<unsigned\20int>::precalcGradient\28int\29 can change the state due to Common::Array<unsigned\20int>::push_back\28unsigned\20int\20const&\29
[asyncify] GUI::ThemeLayout::ThemeLayout\28GUI::ThemeLayout\20const&\29 can change the state due to Common::Array<unsigned\20int>::Array\28Common::Array<unsigned\20int>\20const&\29
[asyncify] OSystem_SDL::getSupportedAntiAliasingLevels\28\29\20const can change the state due to Common::Array<unsigned\20int>::Array\28Common::Array<unsigned\20int>\20const&\29
[asyncify] virtual\20thunk\20to\20OSystem_SDL::getSupportedAntiAliasingLevels\28\29\20const can change the state due to Common::Array<unsigned\20int>::Array\28Common::Array<unsigned\20int>\20const&\29
[asyncify] non-virtual\20thunk\20to\20StdioStream::~StdioStream\28\29.1 can change the state due to StdioStream::~StdioStream\28\29.2
[asyncify] non-virtual\20thunk\20to\20PosixIoStream::~PosixIoStream\28\29.1 can change the state due to PosixIoStream::~PosixIoStream\28\29.1
[asyncify] nsvg__startElement\28void*\2c\20char\20const*\2c\20char\20const**\29 can change the state due to nsvg__parseAttr\28NSVGparser*\2c\20char\20const*\2c\20char\20const*\29
[asyncify] nsvg__parseGradient\28NSVGparser*\2c\20char\20const**\2c\20char\29 can change the state due to nsvg__parseAttr\28NSVGparser*\2c\20char\20const*\2c\20char\20const*\29
[asyncify] nsvg__parseAttribs\28NSVGparser*\2c\20char\20const**\29 can change the state due to nsvg__parseAttr\28NSVGparser*\2c\20char\20const*\2c\20char\20const*\29
[asyncify] nsvg__parsePoly\28NSVGparser*\2c\20char\20const**\2c\20int\29 can change the state due to nsvg__parseAttr\28NSVGparser*\2c\20char\20const*\2c\20char\20const*\29
[asyncify] nsvg__parseStyle\28NSVGparser*\2c\20char\20const*\29 can change the state due to nsvg__parseAttr\28NSVGparser*\2c\20char\20const*\2c\20char\20const*\29
[asyncify] non-virtual\20thunk\20to\20PosixIoStream::size\28\29\20const can change the state due to PosixIoStream::size\28\29\20const
[asyncify] SDL_MouseNormalSpeedScaleChanged can change the state due to atof
[asyncify] SDL_MouseRelativeSpeedScaleChanged can change the state due to atof
[asyncify] SDL_PrivateAppendToMappingString can change the state due to SDL_snprintf
[asyncify] GuessControllerType can change the state due to SDL_snprintf
[asyncify] SDL_UnloadObject can change the state due to __dl_seterr
[asyncify] Base::ensureFirstCommand\28Common::String\20const&\2c\20char\20const*\29 can change the state due to Base::usage\28char\20const*\2c\20...\29
[asyncify] OpenGLSdlGraphicsManager::hasFeature\28OSystem::Feature\29\20const can change the state due to OpenGL::OpenGLGraphicsManager::hasFeature\28OSystem::Feature\29\20const
[asyncify] GUI::ExistingSave*\20Common::uninitialized_copy<GUI::ExistingSave*\2c\20GUI::ExistingSave>\28GUI::ExistingSave*\2c\20GUI::ExistingSave*\2c\20GUI::ExistingSave*\29 can change the state due to GUI::ExistingSave::ExistingSave\28GUI::ExistingSave\20const&\29
[asyncify] GUI::TabWidget::Tab*\20Common::uninitialized_copy<GUI::TabWidget::Tab*\2c\20GUI::TabWidget::Tab>\28GUI::TabWidget::Tab*\2c\20GUI::TabWidget::Tab*\2c\20GUI::TabWidget::Tab*\29 can change the state due to GUI::TabWidget::Tab::Tab\28GUI::TabWidget::Tab\20const&\29
[asyncify] Common::Queue<Common::Event>::pop\28\29 can change the state due to Common::Event::Event\28Common::Event\20const&\29
[asyncify] Common::DelayedEventSource::DelayedEventsEntry::DelayedEventsEntry\28Common::DelayedEventSource::DelayedEventsEntry\20const&\29 can change the state due to Common::Event::Event\28Common::Event\20const&\29
[asyncify] Common::HardwareInput*\20Common::uninitialized_copy<Common::HardwareInput*\2c\20Common::HardwareInput>\28Common::HardwareInput*\2c\20Common::HardwareInput*\2c\20Common::HardwareInput*\29 can change the state due to Common::HardwareInput::HardwareInput\28Common::HardwareInput\20const&\29
[asyncify] void\20SWAP<Common::HardwareInput>\28Common::HardwareInput&\2c\20Common::HardwareInput&\29 can change the state due to Common::HardwareInput::HardwareInput\28Common::HardwareInput\20const&\29
[asyncify] Common::SaveFileManager::getError\28\29 can change the state due to Common::Error::Error\28Common::Error\20const&\29
[asyncify] OpenGL::VertexAttrib*\20Common::uninitialized_copy<OpenGL::VertexAttrib*\2c\20OpenGL::VertexAttrib>\28OpenGL::VertexAttrib*\2c\20OpenGL::VertexAttrib*\2c\20OpenGL::VertexAttrib*\29 can change the state due to OpenGL::VertexAttrib::VertexAttrib\28OpenGL::VertexAttrib\20const&\29
[asyncify] OpenGL::LibRetro::ShaderTexture*\20Common::uninitialized_copy<OpenGL::LibRetro::ShaderTexture*\2c\20OpenGL::LibRetro::ShaderTexture>\28OpenGL::LibRetro::ShaderTexture*\2c\20OpenGL::LibRetro::ShaderTexture*\2c\20OpenGL::LibRetro::ShaderTexture*\29 can change the state due to OpenGL::LibRetro::ShaderTexture::ShaderTexture\28OpenGL::LibRetro::ShaderTexture\20const&\29
[asyncify] OpenGL::LibRetro::ShaderPass*\20Common::uninitialized_copy<OpenGL::LibRetro::ShaderPass*\2c\20OpenGL::LibRetro::ShaderPass>\28OpenGL::LibRetro::ShaderPass*\2c\20OpenGL::LibRetro::ShaderPass*\2c\20OpenGL::LibRetro::ShaderPass*\29 can change the state due to OpenGL::LibRetro::ShaderPass::ShaderPass\28OpenGL::LibRetro::ShaderPass\20const&\29
[asyncify] OpenGL::LibRetroPipeline::Texture*\20Common::uninitialized_copy<OpenGL::LibRetroPipeline::Texture*\2c\20OpenGL::LibRetroPipeline::Texture>\28OpenGL::LibRetroPipeline::Texture*\2c\20OpenGL::LibRetroPipeline::Texture*\2c\20OpenGL::LibRetroPipeline::Texture*\29 can change the state due to OpenGL::LibRetroPipeline::Texture::Texture\28OpenGL::LibRetroPipeline::Texture\20const&\29
[asyncify] void\20SWAP<Common::DebugManager::DebugChannel>\28Common::DebugManager::DebugChannel&\2c\20Common::DebugManager::DebugChannel&\29 can change the state due to Common::DebugManager::DebugChannel::DebugChannel\28Common::DebugManager::DebugChannel\20const&\29
[asyncify] Common::WinResourceID*\20Common::uninitialized_copy<Common::WinResourceID*\2c\20Common::WinResourceID>\28Common::WinResourceID*\2c\20Common::WinResourceID*\2c\20Common::WinResourceID*\29 can change the state due to Common::WinResourceID::WinResourceID\28Common::WinResourceID\20const&\29
[asyncify] DetectedGame*\20Common::uninitialized_copy<DetectedGame*\2c\20DetectedGame>\28DetectedGame*\2c\20DetectedGame*\2c\20DetectedGame*\29 can change the state due to DetectedGame::DetectedGame\28DetectedGame\20const&\29
[asyncify] void\20SWAP<DetectedGame>\28DetectedGame&\2c\20DetectedGame&\29 can change the state due to DetectedGame::DetectedGame\28DetectedGame\20const&\29
[asyncify] Glk::ChunkEntry*\20Common::uninitialized_copy<Glk::ChunkEntry*\2c\20Glk::ChunkEntry>\28Glk::ChunkEntry*\2c\20Glk::ChunkEntry*\2c\20Glk::ChunkEntry*\29 can change the state due to Glk::ChunkEntry::ChunkEntry\28Glk::ChunkEntry\20const&\29
[asyncify] QualifiedGameDescriptor*\20Common::uninitialized_copy<QualifiedGameDescriptor\20const*\2c\20QualifiedGameDescriptor>\28QualifiedGameDescriptor\20const*\2c\20QualifiedGameDescriptor\20const*\2c\20QualifiedGameDescriptor*\29 can change the state due to QualifiedGameDescriptor::QualifiedGameDescriptor\28QualifiedGameDescriptor\20const&\29
[asyncify] void\20Common::sort<Common::ListInternal::Iterator<Common::String>\2c\20Common::Less<Common::String>>\28Common::ListInternal::Iterator<Common::String>\2c\20Common::ListInternal::Iterator<Common::String>\2c\20Common::Less<Common::String>\29 can change the state due to void\20SWAP<Common::String>\28Common::String&\2c\20Common::String&\29
[asyncify] void\20Common::sort<Common::String*\2c\20Common::Less<Common::String>>\28Common::String*\2c\20Common::String*\2c\20Common::Less<Common::String>\29 can change the state due to void\20SWAP<Common::String>\28Common::String&\2c\20Common::String&\29
[asyncify] Common::AchievementDescription*\20Common::uninitialized_copy<Common::AchievementDescription*\2c\20Common::AchievementDescription>\28Common::AchievementDescription*\2c\20Common::AchievementDescription*\2c\20Common::AchievementDescription*\29 can change the state due to Common::AchievementDescription::AchievementDescription\28Common::AchievementDescription\20const&\29
[asyncify] SaveStateDescriptor*\20Common::uninitialized_copy<SaveStateDescriptor*\2c\20SaveStateDescriptor>\28SaveStateDescriptor*\2c\20SaveStateDescriptor*\2c\20SaveStateDescriptor*\29 can change the state due to SaveStateDescriptor::SaveStateDescriptor\28SaveStateDescriptor\20const&\29
[asyncify] GUI::Debugger::Var*\20Common::uninitialized_copy<GUI::Debugger::Var*\2c\20GUI::Debugger::Var>\28GUI::Debugger::Var*\2c\20GUI::Debugger::Var*\2c\20GUI::Debugger::Var*\29 can change the state due to GUI::Debugger::Var::Var\28GUI::Debugger::Var\20const&\29
[asyncify] GUI::GridItemInfo*\20Common::uninitialized_copy<GUI::GridItemInfo*\2c\20GUI::GridItemInfo>\28GUI::GridItemInfo*\2c\20GUI::GridItemInfo*\2c\20GUI::GridItemInfo*\29 can change the state due to GUI::GridItemInfo::GridItemInfo\28GUI::GridItemInfo\20const&\29
[asyncify] GUI::LauncherEntry*\20Common::uninitialized_copy<GUI::LauncherEntry*\2c\20GUI::LauncherEntry>\28GUI::LauncherEntry*\2c\20GUI::LauncherEntry*\2c\20GUI::LauncherEntry*\29 can change the state due to GUI::LauncherEntry::LauncherEntry\28GUI::LauncherEntry\20const&\29
[asyncify] void\20SWAP<GUI::LauncherEntry>\28GUI::LauncherEntry&\2c\20GUI::LauncherEntry&\29 can change the state due to GUI::LauncherEntry::LauncherEntry\28GUI::LauncherEntry\20const&\29
[asyncify] GUI::DropdownButtonWidget::Entry*\20Common::uninitialized_copy<GUI::DropdownButtonWidget::Entry*\2c\20GUI::DropdownButtonWidget::Entry>\28GUI::DropdownButtonWidget::Entry*\2c\20GUI::DropdownButtonWidget::Entry*\2c\20GUI::DropdownButtonWidget::Entry*\29 can change the state due to GUI::DropdownButtonWidget::Entry::Entry\28GUI::DropdownButtonWidget::Entry\20const&\29
[asyncify] void\20Common::sort<Common::U32String*\2c\20Common::Less<Common::U32String>>\28Common::U32String*\2c\20Common::U32String*\2c\20Common::Less<Common::U32String>\29 can change the state due to void\20SWAP<Common::U32String>\28Common::U32String&\2c\20Common::U32String&\29
[asyncify] GUI::ListWidget::ListData*\20Common::uninitialized_copy<GUI::ListWidget::ListData*\2c\20GUI::ListWidget::ListData>\28GUI::ListWidget::ListData*\2c\20GUI::ListWidget::ListData*\2c\20GUI::ListWidget::ListData*\29 can change the state due to GUI::ListWidget::ListData::ListData\28GUI::ListWidget::ListData\20const&\29
[asyncify] Common::TranslationManager::getTranslation\28char\20const*\29\20const can change the state due to Common::TranslationManager::getTranslation\28char\20const*\2c\20char\20const*\29\20const
[asyncify] Common::TranslationManager::getTranslation\28Common::String\20const&\2c\20Common::String\20const&\29\20const can change the state due to Common::TranslationManager::getTranslation\28char\20const*\2c\20char\20const*\29\20const
[asyncify] GUI::TabWidget::Tab*\20Common::copy<GUI::TabWidget::Tab*\2c\20GUI::TabWidget::Tab*>\28GUI::TabWidget::Tab*\2c\20GUI::TabWidget::Tab*\2c\20GUI::TabWidget::Tab*\29 can change the state due to GUI::TabWidget::Tab::operator=\28GUI::TabWidget::Tab\20const&\29
[asyncify] Common::HardwareInput::createMouse\28Common::String\20const&\2c\20unsigned\20char\2c\20Common::U32String\20const&\29 can change the state due to Common::HardwareInput::createSimple\28Common::HardwareInputType\2c\20Common::String\20const&\2c\20unsigned\20int\2c\20Common::U32String\20const&\29
[asyncify] Common::HardwareInput::createJoystickButton\28Common::String\20const&\2c\20unsigned\20char\2c\20Common::U32String\20const&\29 can change the state due to Common::HardwareInput::createSimple\28Common::HardwareInputType\2c\20Common::String\20const&\2c\20unsigned\20int\2c\20Common::U32String\20const&\29
[asyncify] Common::HardwareInput::createJoystickHalfAxis\28Common::String\20const&\2c\20unsigned\20char\2c\20bool\2c\20Common::U32String\20const&\29 can change the state due to Common::HardwareInput::createSimple\28Common::HardwareInputType\2c\20Common::String\20const&\2c\20unsigned\20int\2c\20Common::U32String\20const&\29
[asyncify] Common::HardwareInput*\20Common::copy<Common::HardwareInput\20const*\2c\20Common::HardwareInput*>\28Common::HardwareInput\20const*\2c\20Common::HardwareInput\20const*\2c\20Common::HardwareInput*\29 can change the state due to Common::HardwareInput::operator=\28Common::HardwareInput\20const&\29
[asyncify] OpenGL::LibRetro::ShaderTexture*\20Common::copy<OpenGL::LibRetro::ShaderTexture\20const*\2c\20OpenGL::LibRetro::ShaderTexture*>\28OpenGL::LibRetro::ShaderTexture\20const*\2c\20OpenGL::LibRetro::ShaderTexture\20const*\2c\20OpenGL::LibRetro::ShaderTexture*\29 can change the state due to OpenGL::LibRetro::ShaderTexture::operator=\28OpenGL::LibRetro::ShaderTexture\20const&\29
[asyncify] OpenGL::LibRetro::ShaderPass*\20Common::copy<OpenGL::LibRetro::ShaderPass\20const*\2c\20OpenGL::LibRetro::ShaderPass*>\28OpenGL::LibRetro::ShaderPass\20const*\2c\20OpenGL::LibRetro::ShaderPass\20const*\2c\20OpenGL::LibRetro::ShaderPass*\29 can change the state due to OpenGL::LibRetro::ShaderPass::operator=\28OpenGL::LibRetro::ShaderPass\20const&\29
[asyncify] OpenGL::LibRetroPipeline::Texture*\20Common::copy<OpenGL::LibRetroPipeline::Texture\20const*\2c\20OpenGL::LibRetroPipeline::Texture*>\28OpenGL::LibRetroPipeline::Texture\20const*\2c\20OpenGL::LibRetroPipeline::Texture\20const*\2c\20OpenGL::LibRetroPipeline::Texture*\29 can change the state due to OpenGL::LibRetroPipeline::Texture::operator=\28OpenGL::LibRetroPipeline::Texture\20const&\29
[asyncify] OpenGL::OpenGLGraphicsManager::beginGFXTransaction\28\29 can change the state due to OpenGL::OpenGLGraphicsManager::VideoState::operator=\28OpenGL::OpenGLGraphicsManager::VideoState\20const&\29
[asyncify] OpenGL::VertexAttrib*\20Common::copy<OpenGL::VertexAttrib\20const*\2c\20OpenGL::VertexAttrib*>\28OpenGL::VertexAttrib\20const*\2c\20OpenGL::VertexAttrib\20const*\2c\20OpenGL::VertexAttrib*\29 can change the state due to OpenGL::VertexAttrib::operator=\28OpenGL::VertexAttrib\20const&\29
[asyncify] Common::WinResourceID*\20Common::copy<Common::WinResourceID\20const*\2c\20Common::WinResourceID*>\28Common::WinResourceID\20const*\2c\20Common::WinResourceID\20const*\2c\20Common::WinResourceID*\29 can change the state due to Common::WinResourceID::operator=\28Common::WinResourceID\20const&\29
[asyncify] DetectedGame*\20Common::copy<DetectedGame\20const*\2c\20DetectedGame*>\28DetectedGame\20const*\2c\20DetectedGame\20const*\2c\20DetectedGame*\29 can change the state due to DetectedGame::operator=\28DetectedGame\20const&\29
[asyncify] Glk::ChunkEntry*\20Common::copy<Glk::ChunkEntry\20const*\2c\20Glk::ChunkEntry*>\28Glk::ChunkEntry\20const*\2c\20Glk::ChunkEntry\20const*\2c\20Glk::ChunkEntry*\29 can change the state due to Glk::ChunkEntry::operator=\28Glk::ChunkEntry\20const&\29
[asyncify] QualifiedGameDescriptor*\20Common::copy<QualifiedGameDescriptor\20const*\2c\20QualifiedGameDescriptor*>\28QualifiedGameDescriptor\20const*\2c\20QualifiedGameDescriptor\20const*\2c\20QualifiedGameDescriptor*\29 can change the state due to QualifiedGameDescriptor::operator=\28QualifiedGameDescriptor\20const&\29
[asyncify] Common::AchievementDescription*\20Common::copy<Common::AchievementDescription\20const*\2c\20Common::AchievementDescription*>\28Common::AchievementDescription\20const*\2c\20Common::AchievementDescription\20const*\2c\20Common::AchievementDescription*\29 can change the state due to Common::AchievementDescription::operator=\28Common::AchievementDescription\20const&\29
[asyncify] GUI::Debugger::Var*\20Common::copy<GUI::Debugger::Var\20const*\2c\20GUI::Debugger::Var*>\28GUI::Debugger::Var\20const*\2c\20GUI::Debugger::Var\20const*\2c\20GUI::Debugger::Var*\29 can change the state due to GUI::Debugger::Var::operator=\28GUI::Debugger::Var\20const&\29
[asyncify] GUI::LauncherEntry*\20Common::copy<GUI::LauncherEntry\20const*\2c\20GUI::LauncherEntry*>\28GUI::LauncherEntry\20const*\2c\20GUI::LauncherEntry\20const*\2c\20GUI::LauncherEntry*\29 can change the state due to GUI::LauncherEntry::operator=\28GUI::LauncherEntry\20const&\29
[asyncify] GUI::GridItemInfo*\20Common::copy<GUI::GridItemInfo\20const*\2c\20GUI::GridItemInfo*>\28GUI::GridItemInfo\20const*\2c\20GUI::GridItemInfo\20const*\2c\20GUI::GridItemInfo*\29 can change the state due to GUI::GridItemInfo::operator=\28GUI::GridItemInfo\20const&\29
[asyncify] GUI::DropdownButtonWidget::Entry*\20Common::copy<GUI::DropdownButtonWidget::Entry\20const*\2c\20GUI::DropdownButtonWidget::Entry*>\28GUI::DropdownButtonWidget::Entry\20const*\2c\20GUI::DropdownButtonWidget::Entry\20const*\2c\20GUI::DropdownButtonWidget::Entry*\29 can change the state due to GUI::DropdownButtonWidget::Entry::operator=\28GUI::DropdownButtonWidget::Entry\20const&\29
[asyncify] GUI::ListWidget::ListData*\20Common::copy<GUI::ListWidget::ListData\20const*\2c\20GUI::ListWidget::ListData*>\28GUI::ListWidget::ListData\20const*\2c\20GUI::ListWidget::ListData\20const*\2c\20GUI::ListWidget::ListData*\29 can change the state due to GUI::ListWidget::ListData::operator=\28GUI::ListWidget::ListData\20const&\29
[asyncify] Common::ConfigManager::registerDefault\28Common::String\20const&\2c\20bool\29 can change the state due to Common::ConfigManager::registerDefault\28Common::String\20const&\2c\20char\20const*\29
[asyncify] Common::Error::Error\28Common::ErrorCode\29 can change the state due to Common::errorToString\28Common::ErrorCode\29
[asyncify] GlkMetaEngineDetection::findGame\28char\20const*\29\20const can change the state due to Glk::Comprehend::ComprehendMetaEngine::findGame\28char\20const*\29
[asyncify] virtual\20thunk\20to\20OSystem_SDL::getSystemLanguage\28\29\20const can change the state due to OSystem_SDL::getSystemLanguage\28\29\20const
[asyncify] Common::BaseString<char>::deleteLastChar\28\29 can change the state due to Common::BaseString<char>::deleteChar\28unsigned\20int\29
[asyncify] Common::BaseString<char>::end\28\29 can change the state due to Common::BaseString<char>::begin\28\29
[asyncify] MidiDriver::musicType2GUIO\28unsigned\20int\29 can change the state due to Common::String::operator+=\28char\20const*\29
[asyncify] DetectedGame::appendGUIOptions\28Common::String\20const&\29 can change the state due to Common::String::operator+=\28char\20const*\29
[asyncify] OSystem_POSIX::getDefaultIconsPath\28\29 can change the state due to byn$mgfn-shared$OSystem_POSIX::getDefaultIconsPath\28\29
[asyncify] OSystem_POSIX::getDefaultLogFileName\28\29 can change the state due to byn$mgfn-shared$OSystem_POSIX::getDefaultIconsPath\28\29
[asyncify] Base::buildQualifiedGameName\28Common::String\20const&\2c\20Common::String\20const&\29 can change the state due to Common::String::format\28char\20const*\2c\20...\29
[asyncify] Common::BaseString<char32_t>::deleteLastChar\28\29 can change the state due to Common::BaseString<char32_t>::deleteChar\28unsigned\20int\29
[asyncify] GUI::ListWidget::getThemeColor\28GUI::ThemeEngine::FontColor\29 can change the state due to Common::U32String::U32String\28char\20const*\2c\20Common::CodePage\29
[asyncify] POSIXFilesystemNode::getDisplayName\28\29\20const can change the state due to Common::U32String::U32String\28Common::String\20const&\2c\20Common::CodePage\29
[asyncify] ADDetectedGame*\20Common::uninitialized_copy<ADDetectedGame*\2c\20ADDetectedGame>\28ADDetectedGame*\2c\20ADDetectedGame*\2c\20ADDetectedGame*\29 can change the state due to ADDetectedGame::ADDetectedGame\28ADDetectedGame\20const&\29
[asyncify] ADDetectedGame*\20Common::copy<ADDetectedGame\20const*\2c\20ADDetectedGame*>\28ADDetectedGame\20const*\2c\20ADDetectedGame\20const*\2c\20ADDetectedGame*\29 can change the state due to ADDetectedGame::operator=\28ADDetectedGame\20const&\29
[asyncify] GUI::ThemeEval::getVar\28Common::String\20const&\2c\20int\29 can change the state due to Common::HashMap<Common::String\2c\20int\2c\20Common::Hash<Common::String>\2c\20Common::EqualTo<Common::String>>::getOrCreateVal\28Common::String\20const&\29
[asyncify] DefaultSaveFileManager::~DefaultSaveFileManager\28\29.1 can change the state due to DefaultSaveFileManager::~DefaultSaveFileManager\28\29
[asyncify] Common::Array<GUI::ExistingSave>::~Array\28\29 can change the state due to Common::Array<GUI::ExistingSave>::freeStorage\28GUI::ExistingSave*\2c\20unsigned\20int\29
[asyncify] non-virtual\20thunk\20to\20GUI::DropdownButtonWidget::~DropdownButtonWidget\28\29.1 can change the state due to GUI::DropdownButtonWidget::~DropdownButtonWidget\28\29.1
[asyncify] non-virtual\20thunk\20to\20GUI::GroupedListWidget::~GroupedListWidget\28\29.1 can change the state due to GUI::GroupedListWidget::~GroupedListWidget\28\29.1
[asyncify] Common::Path::Path\28char\20const*\2c\20char\29 can change the state due to Common::Path::set\28char\20const*\2c\20char\29
[asyncify] Common::HashMap<Common::String\2c\20Common::ConfigManager::Domain\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::~HashMap\28\29 can change the state due to Common::ConfigManager::Domain::~Domain\28\29
[asyncify] Common::Array<GUI::LangExtraFont>::freeStorage\28GUI::LangExtraFont*\2c\20unsigned\20int\29 can change the state due to GUI::LangExtraFont::~LangExtraFont\28\29
[asyncify] Common::DelayedEventSource::~DelayedEventSource\28\29.1 can change the state due to Common::DelayedEventSource::~DelayedEventSource\28\29
[asyncify] POSIXFilesystemNode::~POSIXFilesystemNode\28\29.1 can change the state due to POSIXFilesystemNode::~POSIXFilesystemNode\28\29
[asyncify] Common::GenericArchiveMember::~GenericArchiveMember\28\29.1 can change the state due to Common::GenericArchiveMember::~GenericArchiveMember\28\29
[asyncify] Common::HashMap<Common::String\2c\20Common::ConfigManager::Domain\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::erase\28Common::String\20const&\29 can change the state due to Common::HashMap<Common::String\2c\20Common::ConfigManager::Domain\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::freeNode\28Common::HashMap<Common::String\2c\20Common::ConfigManager::Domain\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::Node*\29
[asyncify] Common::ConfigManager::~ConfigManager\28\29.1 can change the state due to Common::ConfigManager::~ConfigManager\28\29
[asyncify] Common::DebugManager::~DebugManager\28\29 can change the state due to Common::HashMap<Common::String\2c\20Common::DebugManager::DebugChannel\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::freeNode\28Common::HashMap<Common::String\2c\20Common::DebugManager::DebugChannel\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::Node*\29
[asyncify] MetaEngineDetection::parseAndCustomizeGuiOptions\28Common::String\20const&\2c\20Common::String\20const&\29\20const can change the state due to Common::parseGameGUIOptions\28Common::String\20const&\29
[asyncify] Common::MainTranslationManager::~MainTranslationManager\28\29 can change the state due to Common::TranslationManager::~TranslationManager\28\29
[asyncify] Common::MainTranslationManager::~MainTranslationManager\28\29.1 can change the state due to Common::TranslationManager::~TranslationManager\28\29
[asyncify] void\20Common::sort<Common::TLanguage*\2c\20Common::Less<Common::TLanguage>>\28Common::TLanguage*\2c\20Common::TLanguage*\2c\20Common::Less<Common::TLanguage>\29 can change the state due to void\20SWAP<Common::TLanguage>\28Common::TLanguage&\2c\20Common::TLanguage&\29
[asyncify] Common::List<Common::NEResources::Resource>::clear\28\29 can change the state due to Common::NEResources::Resource::~Resource\28\29
[asyncify] Common::HashMap<Common::WinResourceID\2c\20Common::HashMap<Common::WinResourceID\2c\20Common::String\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>::lookup\28Common::WinResourceID\20const&\29\20const can change the state due to Common::WinResourceID_Hash::operator\28\29\28Common::WinResourceID\20const&\29\20const
[asyncify] Common::HashMap<Common::WinResourceID\2c\20Common::String\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>::lookup\28Common::WinResourceID\20const&\29\20const can change the state due to Common::WinResourceID_Hash::operator\28\29\28Common::WinResourceID\20const&\29\20const
[asyncify] Common::HashMap<Common::WinResourceID\2c\20Common::HashMap<Common::WinResourceID\2c\20Common::HashMap<Common::WinResourceID\2c\20Common::PEResources::Resource\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>::lookup\28Common::WinResourceID\20const&\29\20const can change the state due to Common::WinResourceID_Hash::operator\28\29\28Common::WinResourceID\20const&\29\20const
[asyncify] Common::HashMap<Common::WinResourceID\2c\20Common::HashMap<Common::WinResourceID\2c\20Common::PEResources::Resource\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>::lookup\28Common::WinResourceID\20const&\29\20const can change the state due to Common::WinResourceID_Hash::operator\28\29\28Common::WinResourceID\20const&\29\20const
[asyncify] Common::HashMap<Common::WinResourceID\2c\20Common::PEResources::Resource\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>::lookup\28Common::WinResourceID\20const&\29\20const can change the state due to Common::WinResourceID_Hash::operator\28\29\28Common::WinResourceID\20const&\29\20const
[asyncify] Common::HashMap<Common::WinResourceID\2c\20Common::PEResources::Resource\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>::~HashMap\28\29 can change the state due to Common::HashMap<Common::String\2c\20Common::PEResources::Section\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::freeNode\28Common::HashMap<Common::String\2c\20Common::PEResources::Section\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::Node*\29
[asyncify] AccessMetaEngineDetection::~AccessMetaEngineDetection\28\29 can change the state due to AdvancedMetaEngineDetection::~AdvancedMetaEngineDetection\28\29
[asyncify] DirectorMetaEngineDetection::~DirectorMetaEngineDetection\28\29 can change the state due to AdvancedMetaEngineDetection::~AdvancedMetaEngineDetection\28\29
[asyncify] Common::HashMap<Common::U32String\2c\20int\2c\20Common::Hash<Common::U32String>\2c\20Common::EqualTo<Common::U32String>>::~HashMap\28\29 can change the state due to Common::HashMap<Common::String\2c\20bool\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::freeNode\28Common::HashMap<Common::String\2c\20bool\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::Node*\29
[asyncify] Common::HashMap<Common::String\2c\20bool\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::~HashMap\28\29 can change the state due to Common::HashMap<Common::String\2c\20bool\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::freeNode\28Common::HashMap<Common::String\2c\20bool\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::Node*\29
[asyncify] Common::Array<ADDetectedGame>::freeStorage\28ADDetectedGame*\2c\20unsigned\20int\29 can change the state due to Common::HashMap<Common::String\2c\20FileProperties\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::~HashMap\28\29
[asyncify] Common::Action::setCustomBackendActionAxisEvent\28unsigned\20int\29 can change the state due to byn$mgfn-shared$Common::Action::setCustomBackendActionAxisEvent\28unsigned\20int\29
[asyncify] Common::Action::setCustomBackendActionEvent\28unsigned\20int\29 can change the state due to byn$mgfn-shared$Common::Action::setCustomBackendActionAxisEvent\28unsigned\20int\29
[asyncify] AgiMetaEngineDetection::~AgiMetaEngineDetection\28\29.1 can change the state due to AgiMetaEngineDetection::~AgiMetaEngineDetection\28\29
[asyncify] Common::Array<DetectedGame>::freeStorage\28DetectedGame*\2c\20unsigned\20int\29 can change the state due to DetectedGame::~DetectedGame\28\29
[asyncify] MD5CacheManager::~MD5CacheManager\28\29 can change the state due to Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::~HashMap\28\29
[asyncify] AGSMetaEngineDetection::~AGSMetaEngineDetection\28\29.1 can change the state due to AGSMetaEngineDetection::~AGSMetaEngineDetection\28\29
[asyncify] Common::HashMap<Common::HardwareInput\2c\20Common::Array<Common::Action*>\2c\20Common::HardwareInput_Hash\2c\20Common::HardwareInput_EqualTo>::freeNode\28Common::HashMap<Common::HardwareInput\2c\20Common::Array<Common::Action*>\2c\20Common::HardwareInput_Hash\2c\20Common::HardwareInput_EqualTo>::Node*\29 can change the state due to Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::Node::~Node\28\29
[asyncify] Common::InputWatcher::~InputWatcher\28\29 can change the state due to Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::Node::~Node\28\29
[asyncify] byn$mgfn-shared$Common::Array<Common::HardwareInput>::freeStorage\28Common::HardwareInput*\2c\20unsigned\20int\29 can change the state due to Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::Node::~Node\28\29
[asyncify] Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::freeNode\28Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::Node*\29 can change the state due to Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::Node::~Node\28\29
[asyncify] Common::Array<GUI::ListWidget::ListData>::freeStorage\28GUI::ListWidget::ListData*\2c\20unsigned\20int\29 can change the state due to Common::HashMap<Common::String\2c\20Common::U32String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::Node::~Node\28\29
[asyncify] Common::Array<GUI::TabWidget::Tab>::freeStorage\28GUI::TabWidget::Tab*\2c\20unsigned\20int\29 can change the state due to Common::HashMap<Common::String\2c\20Common::U32String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::Node::~Node\28\29
[asyncify] Common::Array<Common::TLanguage>::freeStorage\28Common::TLanguage*\2c\20unsigned\20int\29 can change the state due to byn$mgfn-shared$Common::Array<GUI::Debugger::Var>::freeStorage\28GUI::Debugger::Var*\2c\20unsigned\20int\29
[asyncify] Common::Array<OpenGL::LibRetroPipeline::Texture>::freeStorage\28OpenGL::LibRetroPipeline::Texture*\2c\20unsigned\20int\29 can change the state due to byn$mgfn-shared$Common::Array<GUI::Debugger::Var>::freeStorage\28GUI::Debugger::Var*\2c\20unsigned\20int\29
[asyncify] Common::Array<GUI::Debugger::Var>::freeStorage\28GUI::Debugger::Var*\2c\20unsigned\20int\29 can change the state due to byn$mgfn-shared$Common::Array<GUI::Debugger::Var>::freeStorage\28GUI::Debugger::Var*\2c\20unsigned\20int\29
[asyncify] Common::Array<Common::PoMessageEntry>::freeStorage\28Common::PoMessageEntry*\2c\20unsigned\20int\29 can change the state due to Common::HashMap<Common::String\2c\20SizeMD5\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::Node::~Node\28\29
[asyncify] Common::List<Common::Event>::clear\28\29 can change the state due to byn$mgfn-shared$Common::List<Common::String>::clear\28\29
[asyncify] Common::List<Common::String>::clear\28\29 can change the state due to byn$mgfn-shared$Common::List<Common::String>::clear\28\29
[asyncify] Common::List<Common::SearchSet::Node>::clear\28\29 can change the state due to byn$mgfn-shared$Common::List<Common::String>::clear\28\29
[asyncify] Common::List<GUI::ThemeEngine::ThemeDescriptor>::clear\28\29 can change the state due to QualifiedGameDescriptor::~QualifiedGameDescriptor\28\29
[asyncify] byn$mgfn-shared$Common::Array<QualifiedGameDescriptor>::freeStorage\28QualifiedGameDescriptor*\2c\20unsigned\20int\29 can change the state due to QualifiedGameDescriptor::~QualifiedGameDescriptor\28\29
[asyncify] Common::AchievementsManager::~AchievementsManager\28\29.1 can change the state due to Common::AchievementsManager::~AchievementsManager\28\29
[asyncify] Common::List<Common::INIFile::Section>::clear\28\29 can change the state due to Common::INIFile::Section::~Section\28\29
[asyncify] Common::Array<Common::String>::freeStorage\28Common::String*\2c\20unsigned\20int\29 can change the state due to byn$mgfn-shared$Common::Array<Common::String>::freeStorage\28Common::String*\2c\20unsigned\20int\29
[asyncify] Common::Array<Common::U32String>::freeStorage\28Common::U32String*\2c\20unsigned\20int\29 can change the state due to byn$mgfn-shared$Common::Array<Common::String>::freeStorage\28Common::String*\2c\20unsigned\20int\29
[asyncify] Common::List<Common::Event>::erase\28Common::ListInternal::NodeBase*\29 can change the state due to byn$mgfn-shared$Common::List<Common::String>::erase\28Common::ListInternal::NodeBase*\29
[asyncify] Common::List<Common::String>::erase\28Common::ListInternal::NodeBase*\29 can change the state due to byn$mgfn-shared$Common::List<Common::String>::erase\28Common::ListInternal::NodeBase*\29
[asyncify] Common::Array<GUI::LauncherEntry>::freeStorage\28GUI::LauncherEntry*\2c\20unsigned\20int\29 can change the state due to GUI::LauncherEntry::~LauncherEntry\28\29
[asyncify] Common::Array<OpenGL::VertexAttrib>::freeStorage\28OpenGL::VertexAttrib*\2c\20unsigned\20int\29 can change the state due to byn$mgfn-shared$Common::Array<Glk::ChunkEntry>::freeStorage\28Glk::ChunkEntry*\2c\20unsigned\20int\29
[asyncify] Common::Array<Common::WinResourceID>::freeStorage\28Common::WinResourceID*\2c\20unsigned\20int\29 can change the state due to byn$mgfn-shared$Common::Array<Glk::ChunkEntry>::freeStorage\28Glk::ChunkEntry*\2c\20unsigned\20int\29
[asyncify] Common::Array<Glk::ChunkEntry>::freeStorage\28Glk::ChunkEntry*\2c\20unsigned\20int\29 can change the state due to byn$mgfn-shared$Common::Array<Glk::ChunkEntry>::freeStorage\28Glk::ChunkEntry*\2c\20unsigned\20int\29
[asyncify] Common::Array<GUI::GridItemInfo>::freeStorage\28GUI::GridItemInfo*\2c\20unsigned\20int\29 can change the state due to GUI::GridItemInfo::~GridItemInfo\28\29
[asyncify] Common::Error::operator=\28Common::Error&&\29 can change the state due to Common::String::operator=\28Common::String&&\29
[asyncify] QualifiedGameDescriptor::operator=\28QualifiedGameDescriptor&&\29 can change the state due to Common::String::operator=\28Common::String&&\29
[asyncify] Common::Event::operator=\28Common::Event&&\29 can change the state due to Common::String::operator=\28Common::String&&\29
[asyncify] operator\20new\28unsigned\20long\2c\20Common::MemoryPool&\29 can change the state due to Common::MemoryPool::allocChunk\28\29
[asyncify] ScummMetaEngineDetection::getSupportedGames\28\29\20const can change the state due to PlainGameList::PlainGameList\28PlainGameDescriptor\20const*\29
[asyncify] AdvancedMetaEngineDetection::getSupportedGames\28\29\20const can change the state due to PlainGameList::PlainGameList\28PlainGameDescriptor\20const*\29
[asyncify] GUI::GridWidget::calcVisibleEntries\28\29 can change the state due to Common::Array<Gob::DataIO::Archive*>::push_back\28Gob::DataIO::Archive*\20const&\29
[asyncify] byn$mgfn-shared$GUI::ThemeLayout::addChild\28GUI::ThemeLayout*\29 can change the state due to Common::Array<Gob::DataIO::Archive*>::push_back\28Gob::DataIO::Archive*\20const&\29
[asyncify] Graphics::VectorRendererSpec<unsigned\20int>::fillSurface\28\29 can change the state due to Graphics::VectorRendererSpec<unsigned\20int>::precalcGradient\28int\29
[asyncify] Graphics::VectorRendererSpec<unsigned\20int>::drawInteriorRoundedSquareAlg\28int\2c\20int\2c\20int\2c\20int\2c\20int\2c\20unsigned\20int\2c\20Graphics::VectorRenderer::FillMode\29 can change the state due to Graphics::VectorRendererSpec<unsigned\20int>::precalcGradient\28int\29
[asyncify] Graphics::VectorRendererSpec<unsigned\20int>::drawInteriorRoundedSquareAlgClip\28int\2c\20int\2c\20int\2c\20int\2c\20int\2c\20unsigned\20int\2c\20Graphics::VectorRenderer::FillMode\29 can change the state due to Graphics::VectorRendererSpec<unsigned\20int>::precalcGradient\28int\29
[asyncify] Graphics::VectorRendererSpec<unsigned\20int>::drawTabAlg\28int\2c\20int\2c\20int\2c\20int\2c\20int\2c\20unsigned\20int\2c\20Graphics::VectorRenderer::FillMode\2c\20int\2c\20int\29 can change the state due to Graphics::VectorRendererSpec<unsigned\20int>::precalcGradient\28int\29
[asyncify] Graphics::VectorRendererSpec<unsigned\20int>::drawTabAlgClip\28int\2c\20int\2c\20int\2c\20int\2c\20int\2c\20unsigned\20int\2c\20Graphics::VectorRenderer::FillMode\2c\20int\2c\20int\29 can change the state due to Graphics::VectorRendererSpec<unsigned\20int>::precalcGradient\28int\29
[asyncify] Graphics::VectorRendererAA<unsigned\20int>::drawTabAlg\28int\2c\20int\2c\20int\2c\20int\2c\20int\2c\20unsigned\20int\2c\20Graphics::VectorRenderer::FillMode\2c\20int\2c\20int\29 can change the state due to Graphics::VectorRendererSpec<unsigned\20int>::precalcGradient\28int\29
[asyncify] void\20Common::sort<Common::HardwareInput*\2c\20Common::HardwareInputTypeIdComparator>\28Common::HardwareInput*\2c\20Common::HardwareInput*\2c\20Common::HardwareInputTypeIdComparator\29 can change the state due to void\20SWAP<Common::HardwareInput>\28Common::HardwareInput&\2c\20Common::HardwareInput&\29
[asyncify] void\20Common::sort<Common::ListInternal::Iterator<Common::DebugManager::DebugChannel>\2c\20Common::\28anonymous\20namespace\29::DebugLevelComperator>\28Common::ListInternal::Iterator<Common::DebugManager::DebugChannel>\2c\20Common::ListInternal::Iterator<Common::DebugManager::DebugChannel>\2c\20Common::\28anonymous\20namespace\29::DebugLevelComperator\29 can change the state due to void\20SWAP<Common::DebugManager::DebugChannel>\28Common::DebugManager::DebugChannel&\2c\20Common::DebugManager::DebugChannel&\29
[asyncify] void\20Common::sort<DetectedGame*\2c\20GUI::GameTargetLess>\28DetectedGame*\2c\20DetectedGame*\2c\20GUI::GameTargetLess\29 can change the state due to void\20SWAP<DetectedGame>\28DetectedGame&\2c\20DetectedGame&\29
[asyncify] void\20Common::sort<DetectedGame*\2c\20GUI::GameDescLess>\28DetectedGame*\2c\20DetectedGame*\2c\20GUI::GameDescLess\29 can change the state due to void\20SWAP<DetectedGame>\28DetectedGame&\2c\20DetectedGame&\29
[asyncify] void\20Common::sort<GUI::LauncherEntry*\2c\20GUI::LauncherEntryComparator>\28GUI::LauncherEntry*\2c\20GUI::LauncherEntry*\2c\20GUI::LauncherEntryComparator\29 can change the state due to void\20SWAP<GUI::LauncherEntry>\28GUI::LauncherEntry&\2c\20GUI::LauncherEntry&\29
[asyncify] Common::TranslationManager::getTranslation\28Common::String\20const&\29\20const can change the state due to Common::TranslationManager::getTranslation\28char\20const*\29\20const
[asyncify] TownsEmuMusicPlugin::createInstance\28MidiDriver**\2c\20unsigned\20int\29\20const can change the state due to Common::Error::Error\28Common::ErrorCode\29
[asyncify] Common::DebugManager::~DebugManager\28\29.1 can change the state due to Common::DebugManager::~DebugManager\28\29
[asyncify] Common::HashMap<Common::WinResourceID\2c\20Common::HashMap<Common::WinResourceID\2c\20Common::HashMap<Common::WinResourceID\2c\20Common::PEResources::Resource\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>::contains\28Common::WinResourceID\20const&\29\20const can change the state due to Common::HashMap<Common::WinResourceID\2c\20Common::HashMap<Common::WinResourceID\2c\20Common::HashMap<Common::WinResourceID\2c\20Common::PEResources::Resource\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>::lookup\28Common::WinResourceID\20const&\29\20const
[asyncify] Common::HashMap<Common::WinResourceID\2c\20Common::HashMap<Common::WinResourceID\2c\20Common::PEResources::Resource\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>::contains\28Common::WinResourceID\20const&\29\20const can change the state due to Common::HashMap<Common::WinResourceID\2c\20Common::HashMap<Common::WinResourceID\2c\20Common::PEResources::Resource\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>\2c\20Common::WinResourceID_Hash\2c\20Common::WinResourceID_EqualTo>::lookup\28Common::WinResourceID\20const&\29\20const
[asyncify] DirectorMetaEngineDetection::~DirectorMetaEngineDetection\28\29.1 can change the state due to DirectorMetaEngineDetection::~DirectorMetaEngineDetection\28\29
[asyncify] Common::XMLParser::XMLKeyLayout::~XMLKeyLayout\28\29 can change the state due to Common::HashMap<Common::String\2c\20bool\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::~HashMap\28\29
[asyncify] Common::BasePtrTrackerImpl<Common::HashMap<Common::String\2c\20int\2c\20Common::Hash<Common::String>\2c\20Common::EqualTo<Common::String>>>::destructObject\28\29 can change the state due to Common::HashMap<Common::String\2c\20bool\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::~HashMap\28\29
[asyncify] Common::Array<ADDetectedGame>::~Array\28\29 can change the state due to Common::Array<ADDetectedGame>::freeStorage\28ADDetectedGame*\2c\20unsigned\20int\29
[asyncify] Common::Array<DetectedGame>::~Array\28\29 can change the state due to Common::Array<DetectedGame>::freeStorage\28DetectedGame*\2c\20unsigned\20int\29
[asyncify] MD5CacheManager::~MD5CacheManager\28\29.1 can change the state due to MD5CacheManager::~MD5CacheManager\28\29
[asyncify] Common::Keymap::unregisterMapping\28Common::Action*\29 can change the state due to Common::HashMap<Common::HardwareInput\2c\20Common::Array<Common::Action*>\2c\20Common::HardwareInput_Hash\2c\20Common::HardwareInput_EqualTo>::freeNode\28Common::HashMap<Common::HardwareInput\2c\20Common::Array<Common::Action*>\2c\20Common::HardwareInput_Hash\2c\20Common::HardwareInput_EqualTo>::Node*\29
[asyncify] Common::InputWatcher::~InputWatcher\28\29.1 can change the state due to Common::InputWatcher::~InputWatcher\28\29
[asyncify] Common::Array<Common::HardwareInput>::freeStorage\28Common::HardwareInput*\2c\20unsigned\20int\29 can change the state due to byn$mgfn-shared$Common::Array<Common::HardwareInput>::freeStorage\28Common::HardwareInput*\2c\20unsigned\20int\29
[asyncify] Common::Array<OpenGL::LibRetro::ShaderPass>::freeStorage\28OpenGL::LibRetro::ShaderPass*\2c\20unsigned\20int\29 can change the state due to byn$mgfn-shared$Common::Array<Common::HardwareInput>::freeStorage\28Common::HardwareInput*\2c\20unsigned\20int\29
[asyncify] Common::Array<OpenGL::LibRetro::ShaderTexture>::freeStorage\28OpenGL::LibRetro::ShaderTexture*\2c\20unsigned\20int\29 can change the state due to byn$mgfn-shared$Common::Array<Common::HardwareInput>::freeStorage\28Common::HardwareInput*\2c\20unsigned\20int\29
[asyncify] Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::erase\28Common::String\20const&\29 can change the state due to Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::freeNode\28Common::HashMap<Common::String\2c\20Common::String\2c\20Common::IgnoreCase_Hash\2c\20Common::IgnoreCase_EqualTo>::Node*\29
[asyncify] Common::Array<Common::TLanguage>::~Array\28\29 can change the state due to Common::Array<Common::TLanguage>::freeStorage\28Common::TLanguage*\2c\20unsigned\20int\29
[asyncify] GUI::PopUpWidget::clearEntries\28\29 can change the state due to Common::Array<Common::TLanguage>::freeStorage\28Common::TLanguage*\2c\20unsigned\20int\29
[asyncify] Common::Array<OpenGL::LibRetroPipeline::Texture>::~Array\28\29 can change the state due to Common::Array<OpenGL::LibRetroPipeline::Texture>::freeStorage\28OpenGL::LibRetroPipeline::Texture*\2c\20unsigned\20int\29
[asyncify] Common::ArtificialEventSource::~ArtificialEventSource\28\29 can change the state due to Common::List<Common::Event>::clear\28\29
[asyncify] ChainedGamesManager::~ChainedGamesManager\28\29 can change the state due to Common::List<Common::String>::clear\28\29
[asyncify] Common::Array<QualifiedGameDescriptor>::freeStorage\28QualifiedGameDescriptor*\2c\20unsigned\20int\29 can change the state due to byn$mgfn-shared$Common::Array<QualifiedGameDescriptor>::freeStorage\28QualifiedGameDescriptor*\2c\20unsigned\20int\29
[asyncify] Common::Array<Common::AchievementDescription>::freeStorage\28Common::AchievementDescription*\2c\20unsigned\20int\29 can change the state due to byn$mgfn-shared$Common::Array<QualifiedGameDescriptor>::freeStorage\28QualifiedGameDescriptor*\2c\20unsigned\20int\29
[asyncify] Common::Array<Common::String>::clear\28\29 can change the state due to Common::Array<Common::String>::freeStorage\28Common::String*\2c\20unsigned\20int\29
[asyncify] Common::Array<Common::String>::~Array\28\29 can change the state due to Common::Array<Common::String>::freeStorage\28Common::String*\2c\20unsigned\20int\29
[asyncify] Common::Array<Common::U32String>::~Array\28\29 can change the state due to Common::Array<Common::U32String>::freeStorage\28Common::U32String*\2c\20unsigned\20int\29
[asyncify] Common::List<Common::String>::pop_front\28\29 can change the state due to Common::List<Common::String>::erase\28Common::ListInternal::NodeBase*\29
[asyncify] Common::Array<GUI::LauncherEntry>::~Array\28\29 can change the state due to Common::Array<GUI::LauncherEntry>::freeStorage\28GUI::LauncherEntry*\2c\20unsigned\20int\29
[asyncify] Common::Array<Glk::ChunkEntry>::~Array\28\29 can change the state due to Common::Array<Glk::ChunkEntry>::freeStorage\28Glk::ChunkEntry*\2c\20unsigned\20int\29
[asyncify] Common::Array<GUI::GridItemInfo>::~Array\28\29 can change the state due to Common::Array<GUI::GridItemInfo>::freeStorage\28GUI::GridItemInfo*\2c\20unsigned\20int\29
[asyncify] GUI::ThemeLayout::addChild\28GUI::ThemeLayout*\29 can change the state due to byn$mgfn-shared$GUI::ThemeLayout::addChild\28GUI::ThemeLayout*\29
[asyncify] Common::CompositeHardwareInputSet::addHardwareInputSet\28Common::HardwareInputSet*\29 can change the state due to byn$mgfn-shared$GUI::ThemeLayout::addChild\28GUI::ThemeLayout*\29
[asyncify] GUI::MetadataParser::CustomXMLKeyLayout::~CustomXMLKeyLayout\28\29 can change the state due to Common::XMLParser::XMLKeyLayout::~XMLKeyLayout\28\29
[asyncify] Common::Array<Common::HardwareInput>::~Array\28\29 can change the state due to Common::Array<Common::HardwareInput>::freeStorage\28Common::HardwareInput*\2c\20unsigned\20int\29
[asyncify] OpenGL::LibRetroPipeline::Pass::~Pass\28\29 can change the state due to Common::Array<OpenGL::LibRetroPipeline::Texture>::~Array\28\29
[asyncify] Common::ArtificialEventSource::~ArtificialEventSource\28\29.1 can change the state due to Common::ArtificialEventSource::~ArtificialEventSource\28\29
[asyncify] ChainedGamesManager::~ChainedGamesManager\28\29.1 can change the state due to ChainedGamesManager::~ChainedGamesManager\28\29
[asyncify] Common::Array<QualifiedGameDescriptor>::~Array\28\29 can change the state due to Common::Array<QualifiedGameDescriptor>::freeStorage\28QualifiedGameDescriptor*\2c\20unsigned\20int\29
[asyncify] Common::Array<Common::AchievementDescription>::~Array\28\29 can change the state due to Common::Array<Common::AchievementDescription>::freeStorage\28Common::AchievementDescription*\2c\20unsigned\20int\29
[asyncify] Common::Array<OpenGL::LibRetroPipeline::Pass>::freeStorage\28OpenGL::LibRetroPipeline::Pass*\2c\20unsigned\20int\29 can change the state due to OpenGL::LibRetroPipeline::Pass::~Pass\28\29
