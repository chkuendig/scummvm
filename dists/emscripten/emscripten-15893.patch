From c3a1fe0fb743c17af1b466f380070c926f4dda7b Mon Sep 17 00:00:00 2001
From: kamenokonokotan <kamenokonokotan@gmail.com>
Date: Thu, 6 Jan 2022 14:55:48 +0900
Subject: [PATCH 01/16] import mutable globals used in Asyncify pass

---
 emcc.py        | 9 +++++++++
 emscripten.py  | 1 +
 src/library.js | 6 ++++++
 3 files changed, 16 insertions(+)

diff --git a/emcc.py b/emcc.py
index ff1f45cdb80..d33491f73f1 100755
--- a/emcc.py
+++ b/emcc.py
@@ -553,6 +553,8 @@ def get_binaryen_passes():
     passes += ['--fpcast-emu']
   if settings.ASYNCIFY:
     passes += ['--asyncify']
+    if settings.MAIN_MODULE or settings.SIDE_MODULE:
+      passes += ['--pass-arg=asyncify-side-module']
     if settings.ASSERTIONS:
       passes += ['--pass-arg=asyncify-asserts']
     if settings.ASYNCIFY_ADVISE:
@@ -1867,6 +1869,13 @@ def phase_linker_setup(options, state, newargs, user_settings):
         '__heap_base',
         '__stack_pointer',
     ]
+
+    if settings.ASYNCIFY:
+      settings.DEFAULT_LIBRARY_FUNCS_TO_INCLUDE += [
+        '__asyncify_state',
+        '__asyncify_data'
+      ]
+    
     # Unconditional dependency in library_dylink.js
     settings.REQUIRED_EXPORTS += ['setThrew']
 
diff --git a/emscripten.py b/emscripten.py
index 683584840c5..8f7e562ba9c 100644
--- a/emscripten.py
+++ b/emscripten.py
@@ -364,6 +364,7 @@ def emscript(in_wasm, out_wasm, outfile_js, memfile):
 
   if settings.ASYNCIFY:
     exports += ['asyncify_start_unwind', 'asyncify_stop_unwind', 'asyncify_start_rewind', 'asyncify_stop_rewind']
+    metadata['globalImports'] += ['__asyncify_state', '__asyncify_data']
 
   report_missing_symbols(forwarded_json['libraryFunctions'])
 
diff --git a/src/library.js b/src/library.js
index 777712e058d..11c05598c19 100644
--- a/src/library.js
+++ b/src/library.js
@@ -3586,6 +3586,12 @@ LibraryManager.library = {
   __c_longjmp: "new WebAssembly.Tag({'parameters': ['{{{ POINTER_WASM_TYPE }}}']})",
   __c_longjmp_import: true,
 #endif
+#if ASYNCIFY
+  __asyncify_state: "new WebAssembly.Global({'value': 'i32', 'mutable': true}, 0)",
+  __asyncify_state__import: true,
+  __asyncify_data: "new WebAssembly.Global({'value': 'i32', 'mutable': true}, 0)",
+  __asyncify_data__import: true,
+#endif
 #endif
 };
 

From 0e8967d1b5ad0e080a66e1dcc06373beeaefd062 Mon Sep 17 00:00:00 2001
From: nokotan <kamenokonokotan@gmail.com>
Date: Sun, 23 Jan 2022 21:54:03 +0900
Subject: [PATCH 02/16] move globals metadata modification

---
 emscripten.py | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/emscripten.py b/emscripten.py
index 8f7e562ba9c..2df8b1f5e96 100644
--- a/emscripten.py
+++ b/emscripten.py
@@ -344,6 +344,9 @@ def emscript(in_wasm, out_wasm, outfile_js, memfile):
     if settings.INITIAL_TABLE == -1:
       settings.INITIAL_TABLE = dylink_sec.table_size + 1
 
+    if settings.ASYNCIFY:
+      metadata['globalImports'] += ['__asyncify_state', '__asyncify_data']
+
   glue, forwarded_data = compile_settings()
   if DEBUG:
     logger.debug('  emscript: glue took %s seconds' % (time.time() - t))
@@ -364,7 +367,6 @@ def emscript(in_wasm, out_wasm, outfile_js, memfile):
 
   if settings.ASYNCIFY:
     exports += ['asyncify_start_unwind', 'asyncify_stop_unwind', 'asyncify_start_rewind', 'asyncify_stop_rewind']
-    metadata['globalImports'] += ['__asyncify_state', '__asyncify_data']
 
   report_missing_symbols(forwarded_json['libraryFunctions'])
 

From 87c4a2413127584dd3fd84e7893159dda0febaec Mon Sep 17 00:00:00 2001
From: kamenokonokotan <kamenokonokotan@gmail.com>
Date: Tue, 25 Jan 2022 22:00:21 +0900
Subject: [PATCH 03/16] Remove redundant spaces

---
 emcc.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/emcc.py b/emcc.py
index d33491f73f1..c0dc95454fd 100755
--- a/emcc.py
+++ b/emcc.py
@@ -1875,7 +1875,7 @@ def phase_linker_setup(options, state, newargs, user_settings):
         '__asyncify_state',
         '__asyncify_data'
       ]
-    
+
     # Unconditional dependency in library_dylink.js
     settings.REQUIRED_EXPORTS += ['setThrew']
 

From be73d8ed787a4eb8b0fef283fa0ffda39a5c40fb Mon Sep 17 00:00:00 2001
From: kamenokonokotan <kamenokonokotan@gmail.com>
Date: Tue, 25 Jan 2022 22:10:36 +0900
Subject: [PATCH 04/16] Add test_asyncify_side_module

---
 tests/test_core.py | 28 ++++++++++++++++++++++++++++
 1 file changed, 28 insertions(+)

diff --git a/tests/test_core.py b/tests/test_core.py
index 25c02899de9..4bd989bdaa4 100644
--- a/tests/test_core.py
+++ b/tests/test_core.py
@@ -8023,6 +8023,34 @@ def test_asyncify_indirect_lists(self, args, should_pass):
       if should_pass:
         raise
 
+  @needs_dylink
+  @no_memory64('TODO: asyncify for wasm64')
+  def test_asyncify_side_module(self):
+    self.set_setting('ASYNCIFY')
+    self.emcc_args += ['-sASYNCIFY_IMPORTS=["_Z8my_sleepi"]']
+    self.dylink_test(r'''
+      #include <stdio.h>
+      #include "header.h"
+
+      int main() {
+        my_sleep(1);     
+        return 0;
+      }
+    ''', r'''
+      #include <emscripten.h>
+      #include <stdio.h>
+      #include "header.h"
+
+      void my_sleep(int milli_seconds) {
+        // put variable onto stack
+        volatile int value = 42;
+        printf("%d ", value);
+        emscripten_sleep(milli_seconds);
+        // variable on stack in side module function should be restored.
+        printf("%d\n", value);
+      }
+    ''', '42 42', header='void my_sleep(int);')
+
   @no_asan('asyncify stack operations confuse asan')
   @no_memory64('TODO: asyncify for wasm64')
   def test_emscripten_scan_registers(self):

From db4f96fd7242652fa010e5c9bd675de7e77b7e45 Mon Sep 17 00:00:00 2001
From: kamenokonokotan <kamenokonokotan@gmail.com>
Date: Wed, 26 Jan 2022 01:29:14 +0900
Subject: [PATCH 05/16] flake8, add EXIT_RUNTIME

---
 tests/test_core.py | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/tests/test_core.py b/tests/test_core.py
index 4bd989bdaa4..48bf88dc037 100644
--- a/tests/test_core.py
+++ b/tests/test_core.py
@@ -8027,13 +8027,14 @@ def test_asyncify_indirect_lists(self, args, should_pass):
   @no_memory64('TODO: asyncify for wasm64')
   def test_asyncify_side_module(self):
     self.set_setting('ASYNCIFY')
+    self.set_setting('EXIT_RUNTIME', 1)
     self.emcc_args += ['-sASYNCIFY_IMPORTS=["_Z8my_sleepi"]']
     self.dylink_test(r'''
       #include <stdio.h>
       #include "header.h"
 
       int main() {
-        my_sleep(1);     
+        my_sleep(1);
         return 0;
       }
     ''', r'''

From 8903c05acc5f67d9568234613ffcb2cbef8d3465 Mon Sep 17 00:00:00 2001
From: kamenokonokotan <kamenokonokotan@gmail.com>
Date: Sun, 30 Jan 2022 02:39:01 +0900
Subject: [PATCH 06/16] add instrumentWasmExports

---
 src/library_dylink.js | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/src/library_dylink.js b/src/library_dylink.js
index 10d09a97e94..23c34695aee 100644
--- a/src/library_dylink.js
+++ b/src/library_dylink.js
@@ -583,6 +583,9 @@ var LibraryDylink = {
         // add new entries to functionsInTableMap
         updateTableMap(tableBase, metadata.tableSize);
         moduleExports = relocateExports(instance.exports, memoryBase);
+#if ASYNCIFY
+        moduleExports = Asyncify.instrumentWasmExports(moduleExports);
+#endif
         if (!flags.allowUndefined) {
           reportUndefinedSymbols();
         }

From f272f1f0a67dfd898562fba68c1bcbad34bed818 Mon Sep 17 00:00:00 2001
From: kamenokonokotan <kamenokonokotan@gmail.com>
Date: Sun, 30 Jan 2022 02:39:56 +0900
Subject: [PATCH 07/16] add searched symbols in getDataRewindFunc

---
 src/library_async.js | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/src/library_async.js b/src/library_async.js
index da09a1ae2d8..0ceb072dd37 100644
--- a/src/library_async.js
+++ b/src/library_async.js
@@ -205,6 +205,11 @@ mergeInto(LibraryManager.library, {
       var id = {{{ makeGetValue('ptr', C_STRUCTS.asyncify_data_s.rewind_id, 'i32') }}};
       var name = Asyncify.callStackIdToName[id];
       var func = Module['asm'][name];
+#if RELOCATABLE
+      if (!func) {
+        func = Module[asmjsMangle(name)];
+      }
+#endif
       return func;
     },
 

From 8f6f940c10c62d5219bc0053982981e4f2ab905f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Christian=20K=C3=BCndig?= <christian@kuendig.info>
Date: Fri, 18 Feb 2022 18:15:53 +0100
Subject: [PATCH 08/16] Fixing dlsym for emscripten-core/emscripten#15893

---
 src/library_dylink.js | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/src/library_dylink.js b/src/library_dylink.js
index 23c34695aee..ed8bb105979 100644
--- a/src/library_dylink.js
+++ b/src/library_dylink.js
@@ -965,6 +965,12 @@ var LibraryDylink = {
 #if DYLINK_DEBUG
       err('dlsym: ' + symbol + ' getting table slot for: ' + result);
 #endif
+
+#if ASYNCIFY
+      if(symbol in GOT && GOT[symbol].value != 0) {
+        return GOT[symbol].value 
+      }
+#endif
       // Insert the function into the wasm table.  If its a direct wasm function
       // the second argument will not be needed.  If its a JS function we rely
       // on the `sig` attribute being set based on the `<func>__sig` specified

From 0aaef151d93da804e7492160599078a58e6b33c6 Mon Sep 17 00:00:00 2001
From: kamenokonokotan <kamenokonokotan@gmail.com>
Date: Sun, 6 Mar 2022 00:05:00 +0900
Subject: [PATCH 09/16] Add test case test_asyncify_dlfcn

---
 tests/test_core.py | 33 +++++++++++++++++++++++++++++++++
 1 file changed, 33 insertions(+)

diff --git a/tests/test_core.py b/tests/test_core.py
index 48bf88dc037..9682aa69ab8 100644
--- a/tests/test_core.py
+++ b/tests/test_core.py
@@ -8052,6 +8052,39 @@ def test_asyncify_side_module(self):
       }
     ''', '42 42', header='void my_sleep(int);')
 
+  @needs_dylink
+  @no_memory64('TODO: asyncify for wasm64')
+  def test_asyncify_dlfcn(self):
+    self.set_setting('ASYNCIFY')
+    self.set_setting('EXIT_RUNTIME', 1)
+    self.emcc_args += ['-sASYNCIFY_IGNORE_INDIRECT=0']
+    self.dylink_test(r'''
+      #include <iostream>
+      #include <dlfcn.h>
+
+      typedef int (*func_t)();
+
+      int main(int argc, char **argv)
+      {
+        void *_dlHandle = dlopen("liblib.so", RTLD_NOW | RTLD_LOCAL);
+        func_t my_func = (func_t)dlsym(_dlHandle, "side_module_run");
+        printf("%d\n", my_func());
+        return 0;
+      }
+    ''', r'''
+      #include <iostream>
+      #include <emscripten/emscripten.h>
+
+      extern "C"
+      {
+        int side_module_run()
+        {
+          emscripten_sleep(1000);
+          return 42;
+        }
+      }
+    ''', '42', need_reverse=False)
+
   @no_asan('asyncify stack operations confuse asan')
   @no_memory64('TODO: asyncify for wasm64')
   def test_emscripten_scan_registers(self):

From 7c16bbfa3c2f3ffd67cc5f0ca58594c50ab8cf15 Mon Sep 17 00:00:00 2001
From: kamenokonokotan <kamenokonokotan@gmail.com>
Date: Wed, 6 Apr 2022 01:40:08 +0900
Subject: [PATCH 10/16] Update test case

---
 tests/test_core.py | 10 +++++++---
 1 file changed, 7 insertions(+), 3 deletions(-)

diff --git a/tests/test_core.py b/tests/test_core.py
index 9682aa69ab8..4a2fcdaeaf7 100644
--- a/tests/test_core.py
+++ b/tests/test_core.py
@@ -8034,7 +8034,9 @@ def test_asyncify_side_module(self):
       #include "header.h"
 
       int main() {
+        printf("before sleep\n");
         my_sleep(1);
+        printf("after sleep\n");
         return 0;
       }
     ''', r'''
@@ -8045,12 +8047,12 @@ def test_asyncify_side_module(self):
       void my_sleep(int milli_seconds) {
         // put variable onto stack
         volatile int value = 42;
-        printf("%d ", value);
+        printf("%d\n", value);
         emscripten_sleep(milli_seconds);
         // variable on stack in side module function should be restored.
         printf("%d\n", value);
       }
-    ''', '42 42', header='void my_sleep(int);')
+    ''', 'before sleep\n42\n42\nafter sleep\n', header='void my_sleep(int);')
 
   @needs_dylink
   @no_memory64('TODO: asyncify for wasm64')
@@ -8079,11 +8081,13 @@ def test_asyncify_dlfcn(self):
       {
         int side_module_run()
         {
+          printf("before sleep\n");
           emscripten_sleep(1000);
+          printf("after sleep\n");
           return 42;
         }
       }
-    ''', '42', need_reverse=False)
+    ''', 'before sleep\nafter sleep\n42', need_reverse=False)
 
   @no_asan('asyncify stack operations confuse asan')
   @no_memory64('TODO: asyncify for wasm64')

From a4bc5272c6869c03f0774c2eb418cadd08cd07bb Mon Sep 17 00:00:00 2001
From: kamenokonokotan <kamenokonokotan@gmail.com>
Date: Sun, 15 May 2022 22:05:21 +0900
Subject: [PATCH 11/16] rename test_asyncify_dlfcn to test_dlfcn_asyncify

Signed-off-by: kamenokonokotan <kamenokonokotan@gmail.com>
---
 tests/test_core.py | 73 ++++++++++++++++++++++++----------------------
 1 file changed, 38 insertions(+), 35 deletions(-)

diff --git a/tests/test_core.py b/tests/test_core.py
index 4a2fcdaeaf7..ad352752ea8 100644
--- a/tests/test_core.py
+++ b/tests/test_core.py
@@ -3889,6 +3889,44 @@ def test_dlfcn_feature_in_lib(self):
       '''
     self.do_run(src, 'float: 42.\n')
 
+  @needs_dylink
+  @no_memory64('TODO: asyncify for wasm64')
+  def test_dlfcn_asyncify(self):
+    self.set_setting('ASYNCIFY')
+    self.set_setting('EXIT_RUNTIME', 1)
+    self.emcc_args += ['-sASYNCIFY_IGNORE_INDIRECT=0']
+
+    create_file('liblib.c', r'''
+        #include <stdio.h>
+        #include <emscripten/emscripten.h>
+ 
+        int side_module_run()
+        {
+          printf("before sleep\n");
+          emscripten_sleep(1000);
+          printf("after sleep\n");
+          return 42;
+        }
+      ''')
+    self.build_dlfcn_lib('liblib.c')
+
+    self.prep_dlfcn_main()
+    src = r'''
+      #include <iostream>
+      #include <dlfcn.h>
+
+      typedef int (*func_t)();
+
+      int main(int argc, char **argv)
+      {
+        void *_dlHandle = dlopen("liblib.so", RTLD_NOW | RTLD_LOCAL);
+        func_t my_func = (func_t)dlsym(_dlHandle, "side_module_run");
+        printf("%d\n", my_func());
+        return 0;
+      }
+      '''
+    self.do_run(src, 'before sleep\nafter sleep\n42\n')
+
   def dylink_test(self, main, side, expected=None, header=None, force_c=False,
                   main_module=2, **kwargs):
     # Same as dylink_testf but take source code in string form
@@ -8054,41 +8092,6 @@ def test_asyncify_side_module(self):
       }
     ''', 'before sleep\n42\n42\nafter sleep\n', header='void my_sleep(int);')
 
-  @needs_dylink
-  @no_memory64('TODO: asyncify for wasm64')
-  def test_asyncify_dlfcn(self):
-    self.set_setting('ASYNCIFY')
-    self.set_setting('EXIT_RUNTIME', 1)
-    self.emcc_args += ['-sASYNCIFY_IGNORE_INDIRECT=0']
-    self.dylink_test(r'''
-      #include <iostream>
-      #include <dlfcn.h>
-
-      typedef int (*func_t)();
-
-      int main(int argc, char **argv)
-      {
-        void *_dlHandle = dlopen("liblib.so", RTLD_NOW | RTLD_LOCAL);
-        func_t my_func = (func_t)dlsym(_dlHandle, "side_module_run");
-        printf("%d\n", my_func());
-        return 0;
-      }
-    ''', r'''
-      #include <iostream>
-      #include <emscripten/emscripten.h>
-
-      extern "C"
-      {
-        int side_module_run()
-        {
-          printf("before sleep\n");
-          emscripten_sleep(1000);
-          printf("after sleep\n");
-          return 42;
-        }
-      }
-    ''', 'before sleep\nafter sleep\n42', need_reverse=False)
-
   @no_asan('asyncify stack operations confuse asan')
   @no_memory64('TODO: asyncify for wasm64')
   def test_emscripten_scan_registers(self):

From 01ccd5e2bddeea98b45ee860e60b5c00837db06e Mon Sep 17 00:00:00 2001
From: kamenokonokotan <kamenokonokotan@gmail.com>
Date: Thu, 6 Jan 2022 14:55:48 +0900
Subject: [PATCH 12/16] import mutable globals used in Asyncify pass

---
 emcc.py       | 2 +-
 emscripten.py | 1 +
 2 files changed, 2 insertions(+), 1 deletion(-)

diff --git a/emcc.py b/emcc.py
index c0dc95454fd..d33491f73f1 100755
--- a/emcc.py
+++ b/emcc.py
@@ -1875,7 +1875,7 @@ def phase_linker_setup(options, state, newargs, user_settings):
         '__asyncify_state',
         '__asyncify_data'
       ]
-
+    
     # Unconditional dependency in library_dylink.js
     settings.REQUIRED_EXPORTS += ['setThrew']
 
diff --git a/emscripten.py b/emscripten.py
index 2df8b1f5e96..450b542cef3 100644
--- a/emscripten.py
+++ b/emscripten.py
@@ -367,6 +367,7 @@ def emscript(in_wasm, out_wasm, outfile_js, memfile):
 
   if settings.ASYNCIFY:
     exports += ['asyncify_start_unwind', 'asyncify_stop_unwind', 'asyncify_start_rewind', 'asyncify_stop_rewind']
+    metadata['globalImports'] += ['__asyncify_state', '__asyncify_data']
 
   report_missing_symbols(forwarded_json['libraryFunctions'])
 

From 642f96c6091760bec612d24aff66e44399f32791 Mon Sep 17 00:00:00 2001
From: nokotan <kamenokonokotan@gmail.com>
Date: Wed, 13 Apr 2022 23:25:27 +0900
Subject: [PATCH 13/16] updates

---
 src/library_async.js  | 3 +++
 src/library_dylink.js | 4 ++--
 tests/test_core.py    | 4 ++--
 3 files changed, 7 insertions(+), 4 deletions(-)

diff --git a/src/library_async.js b/src/library_async.js
index 0ceb072dd37..14511ba05f9 100644
--- a/src/library_async.js
+++ b/src/library_async.js
@@ -206,6 +206,9 @@ mergeInto(LibraryManager.library, {
       var name = Asyncify.callStackIdToName[id];
       var func = Module['asm'][name];
 #if RELOCATABLE
+      // Exported functions in side modules are not listed in `Module["asm"]`,
+      // but are added as a form of `Module["(asmjs mangled name)"]`.
+      // So we should find a rewind function from `Module["asm"]` and `Module["(asmjs mangled name)"]`.
       if (!func) {
         func = Module[asmjsMangle(name)];
       }
diff --git a/src/library_dylink.js b/src/library_dylink.js
index ed8bb105979..93d51127852 100644
--- a/src/library_dylink.js
+++ b/src/library_dylink.js
@@ -967,8 +967,8 @@ var LibraryDylink = {
 #endif
 
 #if ASYNCIFY
-      if(symbol in GOT && GOT[symbol].value != 0) {
-        return GOT[symbol].value 
+      if (symbol in GOT && GOT[symbol].value != 0) {
+        return GOT[symbol].value;
       }
 #endif
       // Insert the function into the wasm table.  If its a direct wasm function
diff --git a/tests/test_core.py b/tests/test_core.py
index ad352752ea8..c98d28ea46c 100644
--- a/tests/test_core.py
+++ b/tests/test_core.py
@@ -8066,7 +8066,7 @@ def test_asyncify_indirect_lists(self, args, should_pass):
   def test_asyncify_side_module(self):
     self.set_setting('ASYNCIFY')
     self.set_setting('EXIT_RUNTIME', 1)
-    self.emcc_args += ['-sASYNCIFY_IMPORTS=["_Z8my_sleepi"]']
+    self.emcc_args += ['-sASYNCIFY_IMPORTS=["my_sleep"]']
     self.dylink_test(r'''
       #include <stdio.h>
       #include "header.h"
@@ -8090,7 +8090,7 @@ def test_asyncify_side_module(self):
         // variable on stack in side module function should be restored.
         printf("%d\n", value);
       }
-    ''', 'before sleep\n42\n42\nafter sleep\n', header='void my_sleep(int);')
+    ''', 'before sleep\n42\n42\nafter sleep\n', header='void my_sleep(int);', force_c=True)
 
   @no_asan('asyncify stack operations confuse asan')
   @no_memory64('TODO: asyncify for wasm64')

From 3d7a330cd2fe34836063b776bf1be1b33aac048c Mon Sep 17 00:00:00 2001
From: nokotan <kamenokonokotan@gmail.com>
Date: Tue, 19 Apr 2022 13:19:36 +0900
Subject: [PATCH 14/16] Rename asyncify-sidemodule to asyncify-relocatable

---
 emcc.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/emcc.py b/emcc.py
index d33491f73f1..bba6338b581 100755
--- a/emcc.py
+++ b/emcc.py
@@ -554,7 +554,7 @@ def get_binaryen_passes():
   if settings.ASYNCIFY:
     passes += ['--asyncify']
     if settings.MAIN_MODULE or settings.SIDE_MODULE:
-      passes += ['--pass-arg=asyncify-side-module']
+      passes += ['--pass-arg=asyncify-relocatable']
     if settings.ASSERTIONS:
       passes += ['--pass-arg=asyncify-asserts']
     if settings.ASYNCIFY_ADVISE:

From e56266bf112dc7dc5808eea67a57c5309faee477 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Christian=20Ku=CC=88ndig?= <kuendig@scandit.com>
Date: Sun, 24 Apr 2022 18:55:51 +0200
Subject: [PATCH 15/16] Keeping a reference to the original function in
 instrumentWasmExports and using that in _dlsym_js to pass the right method to
 addFunction.

---
 src/library_async.js  | 3 +++
 src/library_dylink.js | 4 ++--
 2 files changed, 5 insertions(+), 2 deletions(-)

diff --git a/src/library_async.js b/src/library_async.js
index 14511ba05f9..32ce7abd38b 100644
--- a/src/library_async.js
+++ b/src/library_async.js
@@ -130,6 +130,9 @@ mergeInto(LibraryManager.library, {
                 }
               }
             };
+#if MAIN_MODULE
+            ret[x].orig = original;
+#endif
           } else {
             ret[x] = original;
           }
diff --git a/src/library_dylink.js b/src/library_dylink.js
index 93d51127852..7bf8718d23f 100644
--- a/src/library_dylink.js
+++ b/src/library_dylink.js
@@ -967,8 +967,8 @@ var LibraryDylink = {
 #endif
 
 #if ASYNCIFY
-      if (symbol in GOT && GOT[symbol].value != 0) {
-        return GOT[symbol].value;
+      if ('orig' in result) {
+        result = result.orig;
       }
 #endif
       // Insert the function into the wasm table.  If its a direct wasm function

From 82574837cdfeebfd60a17277f64584ac0009fcb3 Mon Sep 17 00:00:00 2001
From: kamenokonokotan <kamenokonokotan@gmail.com>
Date: Mon, 16 May 2022 00:15:06 +0900
Subject: [PATCH 16/16] flake8

---
 emcc.py            | 2 +-
 tests/test_core.py | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/emcc.py b/emcc.py
index bba6338b581..9702782919c 100755
--- a/emcc.py
+++ b/emcc.py
@@ -1875,7 +1875,7 @@ def phase_linker_setup(options, state, newargs, user_settings):
         '__asyncify_state',
         '__asyncify_data'
       ]
-    
+
     # Unconditional dependency in library_dylink.js
     settings.REQUIRED_EXPORTS += ['setThrew']
 
diff --git a/tests/test_core.py b/tests/test_core.py
index c98d28ea46c..23c1d06c000 100644
--- a/tests/test_core.py
+++ b/tests/test_core.py
@@ -3899,7 +3899,7 @@ def test_dlfcn_asyncify(self):
     create_file('liblib.c', r'''
         #include <stdio.h>
         #include <emscripten/emscripten.h>
- 
+
         int side_module_run()
         {
           printf("before sleep\n");
