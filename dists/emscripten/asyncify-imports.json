[
  "Adl::getVersion_WOZ(Common::File&)",
  "Adl::readTrack_WOZ(Common::File&, unsigned int, bool)",
  "Adl::decodeTrack(Common::SeekableReadStream&, unsigned int, bool, unsigned char*, unsigned int, Common::Array<bool>&)",
  "AgiMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const",
  "AGSMetaEngineDetection::detectGames(Common::FSList const&, unsigned int, bool)",
  "AGSMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const",
  "CGE::CGEMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const",
  "CGE2::CGE2MetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const",
  "DirectorMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const",
  "Glk::Blorb::getMember(Common::Path const&) const",
  "Glk::Blorb::createReadStreamForMember(Common::Path const&) const",
  "Glk::Blorb::isBlorb(Common::SeekableReadStream&, unsigned int)",
  "Glk::Blorb::~Blorb()",
  "Glk::Blorb::~Blorb().1",
  "Common::BasePtrTrackerImpl<Common::GenericArchiveMember>::destructObject()",
  "Gob::DataIO::unpackChunk(Common::SeekableReadStream&, unsigned char*, unsigned int)",
  "GobMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const",
  "Gob::DataIO::openArchive(Common::String, bool)",
  "Adl::AdlMetaEngineDetection::detectGame(Common::FSNode const&, Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::Language, Common::Platform, Common::String const&, unsigned int, bool)",
  "Glk::Blorb::readRIdx(Common::SeekableReadStream&, Common::Array<Glk::ChunkEntry>&)",
  "Scumm::composeFileHashMap(Common::HashMap<Common::String, Scumm::DetectorDesc, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>&, Common::FSList const&, int, char const* const*)",
  "Scumm::searchFSNode(Common::FSList const&, Common::String const&, Common::FSNode&)",
  "Scumm::detectLanguage(Common::FSList const&, unsigned char, Common::Language)",
  "Sci::SciMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const",
  "Scumm::ScummDiskImage::openDisk(char)",
  "Scumm::ScummDiskImage::extractIndex(Common::WriteStream*)",
  "Scumm::ScummDiskImage::extractResource(Common::WriteStream*, int)",
  "Scumm::ScummDiskImage::close()",
  "Scumm::ScummDiskImage::read(void*, unsigned int)",
  "Common::SeekableReadStream::skip(unsigned int)",
  "Scumm::ScummDiskImage::openSubFile(Common::String const&)",
  "Scumm::ScummDiskImage::eos() const",
  "Scumm::ScummDiskImage::pos() const",
  "Scumm::ScummDiskImage::size() const",
  "Scumm::ScummDiskImage::seek(long long, int)",
  "Common::WriteStream::finalize()",
  "ScummMetaEngineDetection::detectGames(Common::FSList const&, unsigned int, bool)",
  "Scumm::ScummNESFile::extractResource(Common::WriteStream*, Scumm::ScummNESFile::Resource const*, Scumm::ScummNESFile::ResType)",
  "Scumm::ScummNESFile::open(Common::Path const&)",
  "Scumm::ScummNESFile::close()",
  "Scumm::ScummNESFile::openSubFile(Common::String const&)",
  "SkyMetaEngineDetection::detectGames(Common::FSList const&, unsigned int, bool)",
  "SludgeMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const",
  "TuckerMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const",
  "OSystem_SDL::~OSystem_SDL()",
  "Wintermute::WintermuteMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const",
  "OSystem_SDL::init()",
  "virtual thunk to OSystem_SDL::init()",
  "OSystem_SDL::hasFeature(OSystem::Feature)",
  "non-virtual thunk to OSystem_SDL::hasFeature(OSystem::Feature)",
  "OSystem_SDL::engineInit()",
  "virtual thunk to OSystem_SDL::engineInit()",
  "OSystem_SDL::addSysArchivesToSearchSet(Common::SearchSet&, int)",
  "OSystem_SDL::getTextFromClipboard()",
  "OSystem_SDL::hasTextInClipboard()",
  "virtual thunk to OSystem_SDL::getTextFromClipboard()",
  "OSystem_SDL::setTextInClipboard(Common::U32String const&)",
  "OSystem_SDL::getSupportedGraphicsModes() const",
  "non-virtual thunk to OSystem_SDL::getSupportedGraphicsModes() const",
  "virtual thunk to OSystem_SDL::getSupportedGraphicsModes() const",
  "OSystem_SDL::getDefaultGraphicsMode() const",
  "OSystem_SDL::initBackend()",
  "virtual thunk to OSystem_SDL::getDefaultGraphicsMode() const",
  "virtual thunk to OSystem_SDL::hasFeature(OSystem::Feature)",
  "OSystem_SDL::getGraphicsMode() const",
  "OSystem_SDL::createLogFile()",
  "OSystem_SDL::setGraphicsMode(int, unsigned int)",
  "non-virtual thunk to OSystem_SDL::getGraphicsMode() const",
  "non-virtual thunk to OSystem_SDL::getDefaultGraphicsMode() const",
  "SdlWindow::setupIcon()",
  "SdlWindow::getDpiScalingFactor() const",
  "OSystem_POSIX::getScreenshotsPath()",
  "OSystem_POSIX::addSysArchivesToSearchSet(Common::SearchSet&, int)",
  "SdlWindow::createOrUpdateWindow(int, int, unsigned int)",
  "OSystem_Emscripten::getFeatureState(OSystem::Feature)",
  "non-virtual thunk to OSystem_Emscripten::setFeatureState(OSystem::Feature, bool)",
  "OSystem_Emscripten::setFeatureState(OSystem::Feature, bool)",
  "setupGraphics(OSystem&)",
  "launcherDialog()",
  "runGame(Plugin const*, Plugin const*, OSystem&, Common::String const&)",
  "Common::FSNode::~FSNode()",
  "Base::detectGames(Common::String const&, Common::String const&, Common::String const&, bool)",
  "Base::recListGames(Common::FSNode const&, Common::String const&, Common::String const&, bool)",
  "Common::Array<SaveStateDescriptor>::freeStorage(SaveStateDescriptor*, unsigned int)",
  "Base::recAddGames(Common::FSNode const&, Common::String const&, Common::String const&, bool)",
  "StaticPlugin::~StaticPlugin()",
  "PluginManager::unloadAllPlugins()",
  "PluginManager::~PluginManager()",
  "PluginManager::loadAllPlugins()",
  "PluginManager::getEngineFromMetaEngine(Plugin const*)",
  "PluginManager::loadAllPluginsOfType(PluginType)",
  "EngineManager::findGamesMatching(Common::String const&, Common::String const&) const",
  "EngineManager::findPlugin(Common::String const&) const",
  "EngineManager::detectGames(Common::FSList const&, unsigned int, bool)",
  "StaticPlugin::~StaticPlugin().1",
  "EngineManager::findTarget(Common::String const&, Plugin const**) const",
  "virtual thunk to OSystem_Emscripten::getFeatureState(OSystem::Feature)",
  "AdvancedMetaEngineDetection::toDetectedGame(ADDetectedGame const&, ADDetectedGameExtraInfo*) const",
  "AdvancedMetaEngineDetection::detectGames(Common::FSList const&, unsigned int, bool)",
  "AdvancedMetaEngineDetection::preprocessDescriptions()",
  "AdvancedMetaEngineDetection::composeFileHashMap(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>&, Common::FSList const&, int, Common::String const&) const",
  "AdvancedMetaEngineDetection::detectGame(Common::FSNode const&, Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::Language, Common::Platform, Common::String const&, unsigned int, bool)",
  "AdvancedMetaEngineDetection::detectGameFilebased(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, ADFileBasedFallback const*) constBase::getGameList(Common::FSNode const&)",
  "AdvancedMetaEngineDetection::getFileProperties(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, ADGameDescription const&, Common::String const&, FileProperties&) const",
  "FileMapArchive::createReadStreamForMember(Common::Path const&) const",
  "ScalerManager::findScalerPluginIndex(char const*) const",
  "Common::AchievementsManager::setActiveDomain(Common::AchievementsInfo const&)",
  "MainMenuDialog::~MainMenuDialog()",
  "GUI::ConfigDialog::build()",
  "MainMenuDialog::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)",
  "GUI::Widget::getAbsX() const",
  "GUI::Widget::handleMouseWheel(int, int, int)",
  "GUI::Widget::releaseFocus()",
  "Engine::pauseEngine()",
  "PauseToken::~PauseToken()",
  "MainMenuDialog::reflowLayout()",
  "GUI::Widget::getAbsY() const",
  "void SWAP<SaveStateDescriptor>(SaveStateDescriptor&, SaveStateDescriptor&)",
  "Common::Array<SaveStateDescriptor>::insert_aux(SaveStateDescriptor*, SaveStateDescriptor const*, SaveStateDescriptor const*)",
  "SaveStateDescriptor::initSaveType(MetaEngine const*)",
  "SaveStateDescriptor* Common::copy<SaveStateDescriptor const*, SaveStateDescriptor*>(SaveStateDescriptor const*, SaveStateDescriptor const*, SaveStateDescriptor*)",
  "GUI::AboutDialog::reflowLayout()",
  "GUI::AboutDialog::AboutDialog()",
  "GUI::AboutDialog::open()",
  "GUI::AboutDialog::drawDialog(GUI::DrawLayer)",
  "GUI::AboutDialog::handleMouseUp(int, int, int, int)",
  "GUI::AboutDialog::handleKeyUp(Common::KeyState)",
  "GUI::Dialog::receivedFocus(int, int)",
  "GUI::GuiObject::getChildX() const",
  "GUI::EE::putshapes()",
  "GUI::ConsoleDialog::init()",
  "GUI::ConsoleDialog::drawCaret(bool)",
  "GUI::ConsoleDialog::~ConsoleDialog()",
  "GUI::ConsoleDialog::open()",
  "GUI::ConsoleDialog::handleMouseWheel(int, int, int)",
  "GUI::ConsoleDialog::handleTickle()",
  "GUI::ConsoleDialog::drawLine(int)",
  "GUI::ConsoleDialog::handleKeyDown(Common::KeyState)",
  "GUI::Debugger::registerCmd(Common::String const&, Common::Functor2<int, char const**, bool>*)",
  "GUI::Debugger::cmdExit(int, char const**)",
  "GUI::Debugger::cmdOpenLog(int, char const**)",
  "GUI::Debugger::cmdMd5Mac(int, char const**)",
  "GUI::Debugger::parseCommand(char const*)",
  "GUI::Debugger::postEnter()",
  "GUI::Debugger::attach(char const*)",
  "GUI::Debugger::onFrame()",
  "GUI::Debugger::handleCommand(int, char const**, bool&)",
  "Common::Functor2Mem<int, char const**, bool, GUI::Debugger>::operator()(int, char const**) const",
  "void SWAP<Common::SharedPtr<Common::ArchiveMember>>(Common::SharedPtr<Common::ArchiveMember>&, Common::SharedPtr<Common::ArchiveMember>&)",
  "GUI::Dialog::runModal()",
  "GUI::Dialog::open()",
  "GUI::Dialog::setDefaultFocusedWidget()",
  "GUI::Dialog::close()",
  "GUI::Dialog::reflowLayout()",
  "GUI::Dialog::lostFocus()",
  "GUI::Dialog::releaseFocus()",
  "GUI::Dialog::drawDialog(GUI::DrawLayer)",
  "GUI::Dialog::handleMouseDown(int, int, int, int)",
  "GUI::Dialog::handleMouseUp(int, int, int, int)",
  "GUI::Dialog::handleMouseWheel(int, int, int)",
  "GUI::Dialog::handleKeyDown(Common::KeyState)",
  "GUI::Dialog::handleKeyUp(Common::KeyState)",
  "GUI::Dialog::handleMouseMoved(int, int, int)",
  "GUI::Dialog::handleTickle()",
  "GUI::Dialog::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)",
  "GUI::Dialog::removeWidget(GUI::Widget*)",
  "GUI::GuiManager::GuiManager()",
  "GUI::GuiManager::computeScaleFactor()",
  "GUI::GuiManager::initTextToSpeech()",
  "GUI::GuiManager::loadNewTheme(Common::String, GUI::ThemeEngine::GraphicsMode, bool)",
  "void Common::sort<Common::ListInternal::Iterator<Common::SharedPtr<Common::ArchiveMember>>, GUI::ArchiveMemberListBackComparator>(Common::ListInternal::Iterator<Common::SharedPtr<Common::ArchiveMember>>, Common::ListInternal::Iterator<Common::SharedPtr<Common::ArchiveMember>>, GUI::ArchiveMemberListBackComparator)void Common::sort<Common::ListInternal::Iterator<Common::SharedPtr<Common::ArchiveMember>>, GUI::ArchiveMemberLess>(Common::ListInternal::Iterator<Common::SharedPtr<Common::ArchiveMember>>, Common::ListInternal::Iterator<Common::SharedPtr<Common::ArchiveMember>>, GUI::ArchiveMemberLess)",
  "GUI::Debugger::cmdMd5(int, char const**)",
  "GUI::GuiManager::~GuiManager()",
  "GUI::GuiManager::displayTopDialogOnly(bool)",
  "GUI::AboutDialog::handleKeyDown(Common::KeyState)",
  "GUI::GuiManager::redraw()",
  "GUI::GuiManager::runLoop()",
  "GUI::GuiManager::screenChange()[func] check if import can change state",
  "GUI::GuiManager::checkScreenChange()",
  "GUI::CommandSender::sendCommand(unsigned int, unsigned int)",
  "GUI::BrowserDialog::BrowserDialog(Common::U32String const&, bool)",
  "GUI::GuiManager::processEvent(Common::Event const&, GUI::Dialog*)",
  "GUI::BrowserDialog::open()",
  "Common::FSNode::operator=(Common::FSNode const&)",
  "GUI::BrowserDialog::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)",
  "void Common::sort<Common::FSNode*, Common::Less<Common::FSNode>>(Common::FSNode*, Common::FSNode*, Common::Less<Common::FSNode>)",
  "void SWAP<Common::FSNode>(Common::FSNode&, Common::FSNode&)",
  "GUI::ChooserDialog::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)",
  "GUI::BrowserDialog::~BrowserDialog()",
  "GUI::EditGameDialog::EditGameDialog(Common::String const&)",
  "GUI::EditGameDialog::open()",
  "GUI::BrowserDialog::updateListing()",
  "GUI::EditGameDialog::apply()",
  "GUI::Widget::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)",
  "GUI::EditGameDialog::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)",
  "GUI::LauncherDialog::LauncherDialog(Common::String const&, GUI::LauncherChooser*)",
  "GUI::LauncherDialog::addLayoutChooserButtons()",
  "GUI::LauncherDialog::clean()",
  "GUI::LauncherDialog::addGame()",
  "GUI::LauncherDialog::close()",
  "GUI::LauncherDialog::open()",
  "GUI::LauncherDialog::editGame(int)",
  "GUI::LauncherDialog::removeGame(int)",
  "GUI::LauncherDialog::loadGame(int)",
  "GUI::LauncherDialog::handleKeyUp(Common::KeyState)",
  "GUI::LauncherDialog::doGameDetection(Common::String const&)",
  "GUI::LauncherDialog::handleOtherEvent(Common::Event const&)",
  "GUI::LauncherDialog::reflowLayout()",
  "GUI::LauncherDialog::build()",
  "GUI::LauncherChooser::selectLauncher()",
  "GUI::LauncherSimple::build()",
  "GUI::LauncherDialog::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)",
  "GUI::Debugger::~Debugger()",
  "GUI::LauncherSimple::updateButtons()",
  "GUI::LauncherGrid::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)",
  "GUI::LauncherGrid::build()",
  "GUI::LauncherGrid::updateButtons()",
  "GUI::LauncherDialog::~LauncherDialog().1",
  "Common::Array<Common::FSNode>::insert_aux(Common::FSNode*, Common::FSNode const*, Common::FSNode const*)",
  "GUI::LauncherGrid::handleKeyDown(Common::KeyState)",
  "GUI::MassAddDialog::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)",
  "GUI::MassAddDialog::~MassAddDialog().1",
  "GUI::MassAddDialog::~MassAddDialog()",
  "GUI::TimedMessageDialog::handleTickle()",
  "GUI::CountdownMessageDialog::handleTickle()",
  "GUI::MessageDialog::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)",
  "GUI::LauncherGrid::updateListing()",
  "GUI::MessageDialog::init(Common::U32String const&, Common::U32String const&, Common::Array<Common::U32String> const&, Graphics::TextAlign, char const*, Common::U32String const&)",
  "GUI::MetadataParser::keyCallback(Common::XMLParser::ParserNode*)",
  "GUI::MetadataParser::CustomXMLKeyLayout::doCallback(Common::XMLParser*, Common::XMLParser::ParserNode*)",
  "GUI::GuiObject::~GuiObject()",
  "GUI::GuiObject::getClipRect() const",
  "GUI::OptionsDialog::init()",
  "GUI::OptionsDialog::~OptionsDialog()",
  "GUI::OptionsDialog::build()",
  "GUI::LauncherSimple::updateListing()",
  "GUI::LauncherSimple::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)",
  "GUI::OptionsDialog::open()",
  "GUI::OptionsDialog::clean()",
  "GUI::OptionsDialog::close()",
  "GUI::OptionsDialog::saveMusicDeviceSetting(GUI::PopUpWidget*, Common::String)",
  "GUI::OptionsDialog::handleOtherEvent(Common::Event const&)",
  "GUI::OptionsDialog::handleTickle()",
  "GUI::OptionsDialog::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)Z_GUIZ3AZ3AOptionsDialogZ3AZ3AsetGraphicSettingsStateZ5C28boolZ5C29Z_vii",
  "GUI::OptionsDialog::loadMusicDeviceSetting(GUI::PopUpWidget*, Common::String, MusicType)",
  "GUI::OptionsDialog::addAchievementsControls(GUI::GuiObject*, Common::String const&)",
  "GUI::OptionsDialog::addStatisticsControls(GUI::GuiObject*, Common::String const&)",
  "GUI::OptionsDialog::setGraphicSettingsState(bool)",
  "GUI::OptionsDialog::addMIDIControls(GUI::GuiObject*, Common::String const&)",
  "GUI::OptionsDialog::addKeyMapperControls(GUI::GuiObject*, Common::String const&, Common::Array<Common::Keymap*> const&, Common::String const&)",
  "GUI::OptionsDialog::reflowLayout()",
  "GUI::OptionsDialog::setupGraphicsTab()",
  "GUI::GlobalOptionsDialog::~GlobalOptionsDialog()",
  "GUI::OptionsDialog::addSubtitleControls(GUI::GuiObject*, Common::String const&, int)",
  "GUI::OptionsDialog::apply()",
  "GUI::OptionsDialog::addMT32Controls(GUI::GuiObject*, Common::String const&)",
  "Common::Array<GUI::ExistingSave>::freeStorage(GUI::ExistingSave*, unsigned int)",
  "GUI::GlobalOptionsDialog::reflowLayout()",
  "GUI::GlobalOptionsDialog::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)",
  "GUI::ExistingSave::operator=(GUI::ExistingSave const&)",
  "GUI::GlobalOptionsDialog::apply()",
  "GUI::SaveLoadChooser::~SaveLoadChooser()",
  "GUI::getRequestedSaveLoadDialog(MetaEngine const*)",
  "GUI::SaveLoadChooser::runModalWithMetaEngineAndTarget(MetaEngine const*, Common::String const&)",
  "GUI::SaveLoadChooserDialog::addChooserButtons()",
  "GUI::SaveLoadChooserDialog::updateSaveList()",
  "GUI::OptionsDialog::addGraphicControls(GUI::GuiObject*, Common::String const&)",
  "GUI::SaveLoadChooser::selectChooser(MetaEngine const*)",
  "GUI::SaveLoadChooserDialog::reflowLayout()",
  "GUI::SaveLoadChooserDialog::listSaves()",
  "GUI::SaveLoadChooserSimple::runIntern()",
  "GUI::SaveLoadChooserSimple::addThumbnailContainer()",
  "GUI::SaveLoadChooserSimple::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)",
  "GUI::SaveLoadChooserSimple::reflowLayout()",
  "GUI::GlobalOptionsDialog::build()",
  "GUI::SaveLoadChooserSimple::updateSelection(bool)",
  "GUI::SaveLoadChooserSimple::updateSaveList()",
  "GUI::SaveLoadChooserGrid::~SaveLoadChooserGrid()",
  "GUI::SaveLoadChooserGrid::updateSaveList()",
  "GUI::SaveLoadChooserGrid::open()",
  "GUI::SaveLoadChooserGrid::reflowLayout()",
  "GUI::SaveLoadChooserGrid::runIntern()",
  "GUI::SaveLoadChooserDialog::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)",
  "GUI::SavenameDialog::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)",
  "GUI::ThemeBrowser::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)",
  "GUI::ThemeEngine::~ThemeEngine()",
  "GUI::ThemeEngine::clearAll()",
  "GUI::SaveLoadChooserGrid::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)",
  "GUI::SaveLoadChooserGrid::updateSaves()",
  "Graphics::VectorRenderer::drawCallback_BEVELSQ(Common::Rect const&, Graphics::DrawStep const&)",
  "GUI::ThemeEngine::disable()",
  "GUI::ThemeEngine::init()",
  "GUI::ThemeEngine::enable()",
  "GUI::ThemeEngine::restoreBackground(Common::Rect)",
  "GUI::ThemeEngine::drawDD(GUI::DrawData, Common::Rect const&, unsigned int, bool)",
  "GUI::ThemeEngine::drawDDText(GUI::TextData, GUI::TextColor, Common::Rect const&, Common::U32String const&, bool, bool, Graphics::TextAlign, GUI::ThemeEngine::TextAlignVertical, int, Common::Rect const&)",
  "GUI::ThemeEngine::drawFoldIndicator(Common::Rect const&, bool)",
  "GUI::ThemeEngine::getCharWidth(unsigned int, GUI::ThemeEngine::FontStyle) const",
  "GUI::ThemeEngine::getKerningOffset(unsigned int, unsigned int, GUI::ThemeEngine::FontStyle) const",
  "GUI::ThemeEngine::listUsableThemes(Common::List<GUI::ThemeEngine::ThemeDescriptor>&)",
  "GUI::ThemeEngine::listUsableThemes(Common::FSNode const&, Common::List<GUI::ThemeEngine::ThemeDescriptor>&, int)",
  "GUI::ThemeEval::reset()",
  "GUI::ThemeEval::getWidgetData(Common::String const&, short&, short&, short&, short&, bool&)",
  "GUI::ThemeEngine::drawSurface(Common::Point const&, Graphics::ManagedSurface const&, bool)",
  "GUI::ThemeEval::getWidgetTextHAlign(Common::String const&)",
  "GUI::ThemeEngine::getFontHeight(GUI::ThemeEngine::FontStyle) const",
  "GUI::ThemeLayoutTabWidget::~ThemeLayoutTabWidget()",
  "GUI::ThemeLayoutTabWidget::reflowLayout(GUI::Widget*)",
  "GUI::ThemeLayoutWidget::~ThemeLayoutWidget()",
  "[func] check if import can change state  GUI::ThemeLayoutStacked::makeClone(GUI::ThemeLayout*)",
  "GUI::ThemeLayout::resetLayout()",
  "GUI::ThemeLayout::getWidgetData(Common::String const&, short&, short&, short&, short&, bool&)",
  "GUI::ThemeLayout::getWidgetTextHAlign(Common::String const&)Z_GUIZ3AZ3AThemeLayoutMainZ3AZ3AreflowLayoutZ5C28GUIZ3AZ3AWidgetZ2AZ5C29Z_vii",
  "GUI::ThemeEngine::addFont(GUI::TextData, Common::String const&, Common::String const&, Common::String const&, int)",
  "GUI::ThemeLayoutMain::reflowLayout(GUI::Widget*)",
  "GUI::ThemeLayoutStacked::reflowLayout(GUI::Widget*)",
  "GUI::ThemeLayoutMain::~ThemeLayoutMain()",
  "GUI::ThemeLayoutMain::~ThemeLayoutMain().1",
  "GUI::ThemeLayout::~ThemeLayout()",
  "GUI::ThemeLayoutMain::resetLayout()",
  "Graphics::VectorRenderer::drawCallback_SQUARE(Common::Rect const&, Graphics::DrawStep const&)",
  "Graphics::VectorRenderer::drawCallback_ROUNDSQ(Common::Rect const&, Graphics::DrawStep const&)",
  "Graphics::VectorRenderer::drawCallback_LINE(Common::Rect const&, Graphics::DrawStep const&)",
  "Graphics::VectorRenderer::drawCallback_TRIANGLE(Common::Rect const&, Graphics::DrawStep const&)",
  "Graphics::VectorRenderer::drawCallback_FILLSURFACE(Common::Rect const&, Graphics::DrawStep const&)",
  "Graphics::VectorRenderer::drawCallback_TAB(Common::Rect const&, Graphics::DrawStep const&)",
  "Graphics::VectorRenderer::drawCallback_BITMAP(Common::Rect const&, Graphics::DrawStep const&)",
  "Graphics::VectorRenderer::drawCallback_CROSS(Common::Rect const&, Graphics::DrawStep const&)",
  "Graphics::VectorRenderer::drawCallback_CIRCLE(Common::Rect const&, Graphics::DrawStep const&)",
  "GUI::ThemeParser::parserCallback_dialog(Common::XMLParser::ParserNode*)",
  "GUI::ThemeParser::parserCallback_import(Common::XMLParser::ParserNode*)",
  "GUI::ThemeParser::parserCallback_space(Common::XMLParser::ParserNode*)",
  "GUI::ThemeParser::parserCallback_bitmap(Common::XMLParser::ParserNode*)",
  "GUI::Tooltip::handleMouseWheel(int, int, int)",
  "GUI::ThemeLayoutWidget::isBound(GUI::Widget*) const",
  "GUI::Tooltip::handleMouseDown(int, int, int, int)",
  "GUI::Tooltip::handleMouseUp(int, int, int, int)",
  "GUI::Tooltip::handleKeyDown(Common::KeyState)",
  "GUI::Tooltip::handleKeyUp(Common::KeyState)",
  "GUI::Tooltip::handleMouseMoved(int, int, int)",
  "GUI::UnknownGameDialog::handleMouseWheel(int, int, int)",
  "GUI::UnknownGameDialog::rebuild()",
  "GUI::UnknownGameDialog::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)",
  "GUI::Widget::~Widget()",
  "GUI::Widget::markAsDirty()",
  "GUI::Widget::findWidgetInChain(GUI::Widget*, int, int)",
  "GUI::Widget::draw()",
  "GUI::Widget::containsWidgetInChain(GUI::Widget*, GUI::Widget*)",
  "GUI::Widget::read(Common::U32String const&)",
  "GUI::StaticTextWidget::StaticTextWidget(GUI::GuiObject*, Common::String const&, Common::U32String const&, Common::U32String const&, GUI::ThemeEngine::FontStyle, Common::Language, bool)",
  "GUI::StaticTextWidget::StaticTextWidget(GUI::GuiObject*, int, int, int, int, Common::U32String const&, Graphics::TextAlign, Common::U32String const&, GUI::ThemeEngine::FontStyle, Common::Language, bool)",
  "GUI::StaticTextWidget::setLabel(Common::U32String const&)",
  "GUI::StaticTextWidget::setAlign(Graphics::TextAlign)",
  "GUI::ButtonWidget::drawWidget()",
  "GUI::ButtonWidget::setLabel(Common::U32String const&)",
  "GUI::ButtonWidget::setLabel(Common::String const&)",
  "GUI::addClearButton(GUI::GuiObject*, Common::String const&, unsigned int, int, int, int, int)",
  "GUI::PicButtonWidget::setGfx(Graphics::ManagedSurface const*, int, bool)",
  "GUI::ButtonWidget::handleMouseUp(int, int, int, int)",
  "GUI::ButtonWidget::getMinSize(int&, int&)",
  "GUI::DropdownButtonWidget::getMinSize(int&, int&)",
  "GUI::DropdownButtonWidget::handleMouseUp(int, int, int, int)",
  "GUI::DropdownButtonWidget::drawWidget()",
  "GUI::PicButtonWidget::~PicButtonWidget()",
  "GUI::CheckboxWidget::handleMouseUp(int, int, int, int)",
  "GUI::CheckboxWidget::drawWidget()",
  "GUI::CheckboxWidget::setState(bool)",
  "GUI::DropdownButtonWidget::handleMouseMoved(int, int, int)",
  "GUI::ButtonWidget::handleMouseDown(int, int, int, int)",
  "GUI::SliderWidget::handleMouseMoved(int, int, int)",
  "GUI::SliderWidget::handleMouseDown(int, int, int, int)",
  "GUI::SliderWidget::handleMouseUp(int, int, int, int)",
  "GUI::SliderWidget::handleMouseWheel(int, int, int)",
  "GUI::GraphicsWidget::setGfx(Graphics::ManagedSurface const*, bool)",
  "GUI::GraphicsWidget::GraphicsWidget(GUI::GuiObject*, Common::String const&, Common::U32String const&)",
  "GUI::SliderWidget::SliderWidget(GUI::GuiObject*, Common::String const&, Common::U32String const&, unsigned int)",
  "GUI::ContainerWidget::ContainerWidget(GUI::GuiObject*, int, int, int, int)",
  "GUI::RadiobuttonWidget::drawWidget()",
  "GUI::ContainerWidget::~ContainerWidget()",
  "GUI::RadiobuttonWidget::handleMouseUp(int, int, int, int)",
  "GUI::ContainerWidget::findWidget(int, int)",
  "GUI::ContainerWidget::removeWidget(GUI::Widget*)",
  "GUI::OptionsContainerWidget::findWidget(int, int)",
  "GUI::OptionsContainerWidget::reflowLayout()",
  "GUI::OptionsContainerWidget::~OptionsContainerWidget()",
  "GUI::StaticTextWidget::~StaticTextWidget().1",
  "GUI::ButtonWidget::~ButtonWidget()",
  "GUI::ButtonWidget::handleMouseLeft(int)",
  "non-virtual thunk to GUI::ButtonWidget::~ButtonWidget()",
  "GUI::ButtonWidget::handleMouseEntered(int)",
  "GUI::DropdownButtonWidget::~DropdownButtonWidget()",
  "GUI::ContainerWidget::containsWidget(GUI::Widget*) const",
  "GUI::ContainerWidget::ContainerWidget(GUI::GuiObject*, Common::String const&)",
  "non-virtual thunk to GUI::DropdownButtonWidget::~DropdownButtonWidget()",
  "GUI::CheckboxWidget::handleMouseLeft(int)",
  "GUI::SliderWidget::~SliderWidget().1",
  "GUI::StaticTextWidget::~StaticTextWidget()",
  "GUI::SliderWidget::handleMouseEntered(int)",
  "GUI::DropdownButtonWidget::~DropdownButtonWidget().1",
  "GUI::EditableWidget::reflowLayout()",
  "GUI::CheckboxWidget::handleMouseEntered(int)",
  "GUI::EditableWidget::handleTickle()",
  "GUI::EditableWidget::setEditString(Common::U32String const&)",
  "GUI::ButtonWidget::~ButtonWidget().1",
  "GUI::EditableWidget::handleKeyDown(Common::KeyState)",
  "GUI::EditableWidget::defaultKeyDownHandler(Common::KeyState&, bool&, bool&, bool&)",
  "GUI::EditTextWidget::drawWidget()",
  "GUI::EditTextWidget::handleMouseDown(int, int, int, int)",
  "GUI::EditTextWidget::receivedFocusWidget()",
  "GUI::EditTextWidget::lostFocusWidget()",
  "GUI::EditTextWidget::endEditMode()",
  "GUI::GridItemWidget::handleMouseWheel(int, int, int)",
  "GUI::GridItemWidget::handleMouseEntered(int)",
  "GUI::GridItemWidget::handleMouseMoved(int, int, int)",
  "GUI::GridItemWidget::handleMouseLeft(int)",
  "GUI::EditTextWidget::EditTextWidget(GUI::GuiObject*, Common::String const&, Common::U32String const&, Common::U32String const&, unsigned int, unsigned int, GUI::ThemeEngine::FontStyle)",
  "GUI::EditableWidget::drawCaret(bool)",
  "GUI::GridWidget::reloadThumbnails()",
  "GUI::GridWidget::assignEntriesToItems()",
  "GUI::GridWidget::sortGroups()",
  "GUI::GridItemTray::handleMouseMoved(int, int, int)",
  "GUI::GridItemTray::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)",
  "GUI::GridItemWidget::handleMouseDown(int, int, int, int)",
  "GUI::GridItemTray::handleMouseDown(int, int, int, int)",
  "GUI::loadSurfaceFromFile(Common::String const&, int, int)",
  "void GUI::GridWidget::unloadSurfaces<int>(Common::HashMap<int, Graphics::ManagedSurface const*, Common::Hash<int>, Common::EqualTo<int>>&)",
  "GUI::GridWidget::setSelected(int)",
  "GUI::GridWidget::handleMouseWheel(int, int, int)",
  "GUI::GridWidget::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)",
  "void GUI::GridWidget::unloadSurfaces<Common::String>(Common::HashMap<Common::String, Graphics::ManagedSurface const*, Common::Hash<Common::String>, Common::EqualTo<Common::String>>&)",
  "GUI::GroupedListWidget::sortGroups()",
  "GUI::GroupedListWidget::handleMouseUp(int, int, int, int)",
  "GUI::EditableWidget::adjustOffset()",
  "GUI::GroupedListWidget::setSelected(int)",
  "GUI::GroupedListWidget::handleMouseWheel(int, int, int)",
  "GUI::GroupedListWidget::drawWidget()",
  "GUI::GroupedListWidget::setFilter(Common::U32String const&, bool)",
  "GUI::ListWidget::containsWidget(GUI::Widget*) const",
  "GUI::ListWidget::setSelected(int)",
  "GUI::ListWidget::setList(Common::Array<Common::U32String> const&)",
  "GUI::ListWidget::handleTickle()",
  "GUI::ListWidget::handleMouseUp(int, int, int, int)",
  "GUI::ListWidget::receivedFocusWidget()",
  "GUI::ListWidget::lostFocusWidget()",
  "GUI::ListWidget::handleMouseDown(int, int, int, int)",
  "GUI::GroupedListWidget::handleMouseDown(int, int, int, int)",
  "GUI::GridWidget::reflowLayout()",
  "GUI::ListWidget::getEditRect() const",
  "GUI::ListWidget::endEditMode()",
  "GUI::ListWidget::startEditMode()",
  "GUI::ListWidget::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)",
  "GUI::ListWidget::reflowLayout()",
  "GUI::PopUpDialog::PopUpDialog(GUI::Widget*, Common::String const&, int, int)",
  "GUI::PopUpDialog::open()",
  "GUI::PopUpDialog::handleMouseUp(int, int, int, int)",
  "GUI::PopUpDialog::drawMenuEntry(int, bool)",
  "GUI::GroupedListWidget::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)",
  "GUI::PopUpDialog::handleKeyDown(Common::KeyState)",
  "GUI::PopUpWidget::handleMouseDown(int, int, int, int)",
  "GUI::ListWidget::drawWidget()",
  "GUI::PopUpWidget::handleMouseLeft(int)",
  "GUI::ScrollBarWidget::ScrollBarWidget(GUI::GuiObject*, int, int, int, int)",
  "GUI::ScrollBarWidget::handleTickle()",
  "GUI::PopUpWidget::handleMouseEntered(int)",
  "GUI::ScrollBarWidget::handleMouseDown(int, int, int, int)",
  "GUI::ScrollBarWidget::handleMouseWheel(int, int, int)",
  "GUI::ScrollContainerWidget::recalc()",
  "GUI::ScrollBarWidget::handleMouseMoved(int, int, int)",
  "GUI::ScrollContainerWidget::getChildX() const",
  "GUI::ScrollBarWidget::handleMouseLeft(int)",
  "GUI::ScrollBarWidget::checkBounds(int)",
  "GUI::ScrollContainerWidget::getWidth() const",
  "GUI::ScrollContainerWidget::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)",
  "GUI::ScrollContainerWidget::reflowLayout()",
  "GUI::ScrollContainerWidget::drawWidget()",
  "GUI::ScrollContainerWidget::getClipRect() const",
  "GUI::TabWidget::getChildY() const",
  "GUI::TabWidget::setActiveTab(int)",
  "GUI::TabWidget::~TabWidget()",
  "GUI::TabWidget::addChild(GUI::Widget*)",
  "GUI::TabWidget::removeWidget(GUI::Widget*)",
  "GUI::TabWidget::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)",
  "GUI::TabWidget::handleKeyDown(Common::KeyState)",
  "GUI::TabWidget::setFirstVisible(int, bool)",
  "GUI::TabWidget::removeTab(int)",
  "GUI::TabWidget::draw()",
  "GUI::TabWidget::containsWidget(GUI::Widget*) const",
  "GUI::TabWidget::markAsDirty()",
  "GUI::TabWidget::reflowLayout()",
  "BaseBackend::displayMessageOnOSD(Common::U32String const&)",
  "GUI::ScrollContainerWidget::handleMouseWheel(int, int, int)",
  "BaseBackend::setScaler(char const*, int)",
  "ModularGraphicsBackend::setFeatureState(OSystem::Feature, bool)",
  "virtual thunk to ModularGraphicsBackend::hasFeature(OSystem::Feature)",
  "GUI::ScrollContainerWidget::findWidget(int, int)",
  "virtual thunk to ModularGraphicsBackend::setFeatureState(OSystem::Feature, bool)",
  "ModularGraphicsBackend::getFeatureState(OSystem::Feature)",
  "ModularGraphicsBackend::getSupportedGraphicsModes() const",
  "BaseBackend::fillScreen(unsigned int)",
  "ModularGraphicsBackend::getDefaultGraphicsMode() const",
  "ModularGraphicsBackend::getGraphicsMode() const",
  "ModularGraphicsBackend::setGraphicsMode(int, unsigned int)",
  "virtual thunk to ModularGraphicsBackend::getSupportedGraphicsModes() const",
  "ModularGraphicsBackend::setShader(Common::String const&)Z_virtualZ5C20thunkZ5C20toZ5C20ModularGraphicsBackendZ3AZ3AsetShaderZ5C28CommonZ3AZ3AStringZ5C20constZ26Z5C29Z_iii",
  "virtual thunk to ModularGraphicsBackend::getGraphicsMode() const",
  "virtual thunk to ModularGraphicsBackend::getFeatureState(OSystem::Feature)",
  "virtual thunk to ModularGraphicsBackend::getDefaultStretchMode() const",
  "ModularGraphicsBackend::setStretchMode(int)",
  "ModularGraphicsBackend::getSupportedStretchModes() const",
  "virtual thunk to ModularGraphicsBackend::getStretchMode() const",
  "virtual thunk to ModularGraphicsBackend::setGraphicsMode(int, unsigned int)",
  "ModularGraphicsBackend::getDefaultScaler() const",
  "virtual thunk to ModularGraphicsBackend::getDefaultScaler() const",
  "ModularGraphicsBackend::getDefaultScaleFactor() const",
  "ModularGraphicsBackend::getStretchMode() const",
  "virtual thunk to ModularGraphicsBackend::getScaler() const",
  "virtual thunk to ModularGraphicsBackend::getScaleFactor() const",
  "virtual thunk to ModularGraphicsBackend::getScreenFormat() const",
  "ModularGraphicsBackend::getScaleFactor() const",
  "virtual thunk to ModularGraphicsBackend::getSupportedFormats() const",
  "virtual thunk to ModularGraphicsBackend::setScaler(unsigned int, int)",
  "ModularGraphicsBackend::initSize(unsigned int, unsigned int, Graphics::PixelFormat const*)",
  "ModularGraphicsBackend::initSizeHint(Common::Array<Graphics::Mode> const&)",
  "ModularGraphicsBackend::getScreenFormat() const",
  "virtual thunk to ModularGraphicsBackend::getScreenChangeID() const",
  "ModularGraphicsBackend::beginGFXTransaction()",
  "virtual thunk to ModularGraphicsBackend::beginGFXTransaction()",
  "ModularGraphicsBackend::endGFXTransaction()",
  "ModularGraphicsBackend::getScreenChangeID() const",
  "virtual thunk to ModularGraphicsBackend::endGFXTransaction()",
  "ModularGraphicsBackend::getWidth()",
  "virtual thunk to ModularGraphicsBackend::getHeight()",
  "ModularGraphicsBackend::getHeight()",
  "virtual thunk to ModularGraphicsBackend::getWidth()",
  "virtual thunk to ModularGraphicsBackend::initSize(unsigned int, unsigned int, Graphics::PixelFormat const*)",
  "virtual thunk to ModularGraphicsBackend::initSizeHint(Common::Array<Graphics::Mode> const&)",
  "ModularGraphicsBackend::setScaler(unsigned int, int)",
  "ModularGraphicsBackend::lockScreen()",
  "ModularGraphicsBackend::fillScreen(unsigned int)",
  "virtual thunk to ModularGraphicsBackend::copyRectToScreen(void const*, int, int, int, int, int)",
  "ModularGraphicsBackend::copyRectToScreen(void const*, int, int, int, int, int)",
  "virtual thunk to ModularGraphicsBackend::unlockScreen()",
  "ModularGraphicsBackend::setShakePos(int, int)",
  "ModularGraphicsBackend::getScaler() const",
  "virtual thunk to ModularGraphicsBackend::setFocusRectangle(Common::Rect const&)virtual thunk to ModularGraphicsBackend::updateScreen()",
  "virtual thunk to ModularGraphicsBackend::clearFocusRectangle()",
  "ModularGraphicsBackend::showOverlay(bool)",
  "virtual thunk to ModularGraphicsBackend::showOverlay(bool)",
  "ModularGraphicsBackend::hideOverlay()",
  "virtual thunk to ModularGraphicsBackend::hideOverlay()",
  "[func] check if import can change state",
  "ModularGraphicsBackend::getOverlayFormat() const",
  "ModularGraphicsBackend::clearOverlay()",
  "virtual thunk to ModularGraphicsBackend::clearOverlay()",
  "virtual thunk to ModularGraphicsBackend::grabOverlay(Graphics::Surface&)",
  "ModularGraphicsBackend::clearFocusRectangle()",
  "ModularGraphicsBackend::isOverlayVisible() const",
  "ModularGraphicsBackend::copyRectToOverlay(void const*, int, int, int, int, int)",
  "virtual thunk to ModularGraphicsBackend::copyRectToOverlay(void const*, int, int, int, int, int)",
  "ModularGraphicsBackend::getOverlayWidth()",
  "[func] check if import can change state",
  "virtual thunk to ModularGraphicsBackend::getOverlayWidth()",
  "ModularGraphicsBackend::showMouse(bool)",
  "virtual thunk to ModularGraphicsBackend::isOverlayVisible() const",
  "ModularGraphicsBackend::lockMouse(bool)",
  "virtual thunk to ModularGraphicsBackend::showMouse(bool)",
  "virtual thunk to ModularGraphicsBackend::lockMouse(bool)",
  "virtual thunk to ModularGraphicsBackend::getHiDPIScreenFactor() const",
  "virtual thunk to ModularGraphicsBackend::getOverlayHeight()",
  "ModularGraphicsBackend::displayMessageOnOSD(Common::U32String const&)",
  "virtual thunk to ModularGraphicsBackend::setCursorPalette(unsigned char const*, unsigned int, unsigned int)",
  "ModularGraphicsBackend::warpMouse(int, int)",
  "virtual thunk to ModularGraphicsBackend::displayMessageOnOSD(Common::U32String const&)",
  "ModularGraphicsBackend::displayActivityIconOnOSD(Graphics::Surface const*)",
  "virtual thunk to ModularGraphicsBackend::saveScreenshot()",
  "virtual thunk to ModularGraphicsBackend::warpMouse(int, int)",
  "ModularGraphicsBackend::setMouseCursor(void const*, unsigned int, unsigned int, int, int, unsigned int, bool, Graphics::PixelFormat const*)",
  "virtual thunk to ModularMixerBackend::getMixer()",
  "DefaultAudioCDManager::~DefaultAudioCDManager()",
  "DefaultAudioCDManager::open()",
  "DefaultAudioCDManager::close()",
  "ModularGraphicsBackend::getHiDPIScreenFactor() const",
  "virtual thunk to ModularGraphicsBackend::displayActivityIconOnOSD(Graphics::Surface const*)",
  "DefaultAudioCDManager::setBalance(signed char)",
  "DefaultAudioCDManager::setVolume(unsigned char)",
  "DefaultEventManager::~DefaultEventManager()",
  "DefaultAudioCDManager::stop()",
  "DefaultAudioCDManager::getStatus() const",
  "DefaultAudioCDManager::update()",
  "Common::CompositeHardwareInputSet::findHardwareInput(Common::String const&) const",
  "Common::CompositeHardwareInputSet::findHardwareInput(Common::Event const&) const",
  "Common::Keymap::registerMappings(Common::Action*, Common::Array<Common::String> const&)",
  "Common::CompositeHardwareInputSet::~CompositeHardwareInputSet()",
  "Common::Keymapper::clear()",
  "Common::Keymapper::registerHardwareInputSet(Common::HardwareInputSet*, Common::KeymapperDefaultBindings*)",
  "DefaultEventManager::getGlobalKeymap()",
  "Common::Keymapper::mapEvent(Common::Event const&, Common::List<Common::Event>&)",
  "Common::DelayedEventSource::pollEvent(Common::Event&)",
  "Common::InputWatcher::notifyEvent(Common::Event const&)",
  "Common::RemapWidget::~RemapWidget()",
  "Common::RemapWidget::reflowActionWidgets()",
  "Common::DelayedEventSource::scheduleEvent(Common::Event const&, unsigned int)",
  "Common::RemapWidget::handleMouseDown(int, int, int, int)",
  "Common::RemapWidget::handleTickle()",
  "Common::RemapWidget::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)",
  "DefaultEventManager::pollEvent(Common::Event&)",
  "[func] check if import can change state Common::RemapWidget::save()",
  "Backends::Log::Log::print(char const*, bool)",
  "MidiDriver_BASE::send(signed char, unsigned int)",
  "MidiDriver_BASE::sysExNoDelay(unsigned char const*, unsigned short)",
  "Common::VirtualMouse::pollEvent(Common::Event&)",
  "MidiDriver_BASE::metaEvent(signed char, unsigned char, unsigned char*, unsigned short)",
  "Common::OutSaveFile::finalize()",
  "Common::OutSaveFile::~OutSaveFile().1",
  "Common::OutSaveFile::clearErr()",
  "Common::OutSaveFile::pos() const",
  "Common::OutSaveFile::write(void const*, unsigned int)",
  "Common::OutSaveFile::size() const",
  "Common::OutSaveFile::err() const",
  "Common::OutSaveFile::seek(long long, int)",
  "Common::SaveFileManager::copySavefile(Common::String const&, Common::String const&, bool)",
  "DefaultSaveFileManager::checkPath(Common::FSNode const&)",
  "DefaultSaveFileManager::listSavefiles(Common::String const&)",
  "DefaultSaveFileManager::assureCached(Common::String const&)",
  "DefaultSaveFileManager::openRawFile(Common::String const&)",
  "Common::SaveFileManager::popErrorDesc()",
  "DefaultSaveFileManager::openForSaving(Common::String const&, bool)",
  "SdlEventSource::openJoystick(int)",
  "DefaultSaveFileManager::exists(Common::String const&)",
  "DefaultSaveFileManager::removeSavefile(Common::String const&)",
  "SdlEventSource::handleKeyUp(SDL_Event&, Common::Event&)",
  "SdlEventSource::handleMouseMotion(SDL_Event&, Common::Event&)",
  "SdlEventSource::processMouseEvent(Common::Event&, int, int, int, int)",
  "SdlEventSource::handleMouseButtonDown(SDL_Event&, Common::Event&)",
  "SdlEventSource::handleJoyButtonUp(SDL_Event&, Common::Event&)",
  "SdlEventSource::handleJoyHatMotion(SDL_Event&, Common::Event&)",
  "SdlEventSource::handleJoyButtonDown(SDL_Event&, Common::Event&)",
  "SdlEventSource::handleControllerButton(SDL_Event const&, Common::Event&, bool)",
  "SdlGraphicsManager::showMouse(bool)",
  "SdlEventSource::handleMouseButtonUp(SDL_Event&, Common::Event&)",
  "virtual thunk to SdlGraphicsManager::showMouse(bool)",
  "SdlGraphicsManager::saveScreenshot()",
  "SdlGraphicsManager::notifyEvent(Common::Event const&)",
  "SdlEventSource::dispatchSDLEvent(SDL_Event&, Common::Event&)",
  "WindowedGraphicsManager::showOverlay(bool)",
  "SurfaceSdlGraphicsManager::~SurfaceSdlGraphicsManager()",
  "WindowedGraphicsManager::hideOverlay()",
  "WindowedGraphicsManager::warpMouse(int, int)",
  "WindowedGraphicsManager::populateDisplayAreaDrawRect(int, int, int, Common::Rect&) const",
  "SdlGraphicsManager::getKeymap()",
  "SurfaceSdlGraphicsManager::SurfaceSdlGraphicsManager(SdlEventSource*, SdlWindow*)",
  "SurfaceSdlGraphicsManager::setFeatureState(OSystem::Feature, bool)",
  "SurfaceSdlGraphicsManager::setGraphicsModeIntern()",
  "SurfaceSdlGraphicsManager::setScaler(unsigned int, int)",
  "virtual thunk to SurfaceSdlGraphicsManager::updateScreen()",
  "SurfaceSdlGraphicsManager::updateScreen()",
  "SurfaceSdlGraphicsManager::saveScreenshot(Common::String const&) const",
  "SurfaceSdlGraphicsManager::hotswapGFXMode()",
  "SurfaceSdlGraphicsManager::initSize(unsigned int, unsigned int, Graphics::PixelFormat const*)",
  "SurfaceSdlGraphicsManager::copyRectToScreen(void const*, int, int, int, int, int)",
  "SurfaceSdlGraphicsManager::internUpdateScreen()",
  "SurfaceSdlGraphicsManager::lockScreen()",
  "SurfaceSdlGraphicsManager::unlockScreen()",
  "virtual thunk to SurfaceSdlGraphicsManager::unlockScreen()[func] check if import can change state",
  "SurfaceSdlGraphicsManager::setPalette(unsigned char const*, unsigned int, unsigned int)",
  "SurfaceSdlGraphicsManager::setCursorPalette(unsigned char const*, unsigned int, unsigned int)",
  "virtual thunk to SurfaceSdlGraphicsManager::clearFocusRectangle()",
  "SurfaceSdlGraphicsManager::loadGFXMode()",
  "SurfaceSdlGraphicsManager::endGFXTransaction()",
  "virtual thunk to SurfaceSdlGraphicsManager::setCursorPalette(unsigned char const*, unsigned int, unsigned int)",
  "virtual thunk to SurfaceSdlGraphicsManager::fillScreen(unsigned int)",
  "SurfaceSdlGraphicsManager::undrawMouse()",
  "SurfaceSdlGraphicsManager::copyRectToOverlay(void const*, int, int, int, int, int)",
  "SurfaceSdlGraphicsManager::drawMouse()",
  "SurfaceSdlGraphicsManager::blitCursor()",
  "SurfaceSdlGraphicsManager::setMouseCursor(void const*, unsigned int, unsigned int, int, int, unsigned int, bool, Graphics::PixelFormat const*)",
  "SurfaceSdlGraphicsManager::handleResizeImpl(int, int)",
  "virtual thunk to SurfaceSdlGraphicsManager::handleResizeImpl(int, int)",
  "SurfaceSdlGraphicsManager::setFocusRectangle(Common::Rect const&)",
  "SurfaceSdlGraphicsManager::displayMessageOnOSD(Common::U32String const&)",
  "SurfaceSdlGraphicsManager::clearFocusRectangle()",
  "SdlMixerManager::~SdlMixerManager()",
  "SurfaceSdlGraphicsManager::handleScalerHotkeys(unsigned int, int)",
  "SurfaceSdlGraphicsManager::SDL_SetVideoMode(int, int, int, unsigned int)",
  "MixerManager::~MixerManager()",
  "SdlMutexInternal::~SdlMutexInternal()",
  "SdlMutexInternal::~SdlMutexInternal().1",
  "SdlMixerManager::callbackHandler(unsigned char*, int)",
  "SdlMixerManager::init()",
  "DefaultTimerManager::~DefaultTimerManager()",
  "SdlMixerManager::sdlCallback(void*, unsigned char*, int)",
  "timer_handler(unsigned int, void*)",
  "SdlTimerManager::~SdlTimerManager()",
  "OpenGL::Pipeline::activate()",
  "OpenGL::Pipeline::deactivate()",
  "OpenGL::Pipeline::deactivateInternal()",
  "OpenGL::Pipeline::setFramebuffer(OpenGL::Framebuffer*)",
  "OpenGL::Pipeline::~Pipeline()",
  "OpenGL::ShaderPipeline::activateInternal()",
  "OpenGL::ShaderPipeline::deactivateInternal()",
  "OpenGL::ShaderPipeline::drawTextureInternal(OpenGL::GLTexture const&, float const*, float const*)",
  "OpenGL::ShaderPipeline::setProjectionMatrix(Math::Matrix<4, 4> const&)",
  "OpenGL::GLTexture::bind() const",
  "OpenGL::GLTexture::setWrapMode(OpenGL::WrapMode)",
  "OpenGL::GLTexture::setSize(unsigned int, unsigned int)",
  "OpenGL::Shader::getUniformLocation(Common::String const&) const",
  "OpenGL::Surface::fill(unsigned int)",
  "OpenGL::Surface::copyRectToTexture(unsigned int, unsigned int, unsigned int, unsigned int, void const*, unsigned int)",
  "OpenGL::Texture::destroy()",
  "OpenGL::Texture::enableLinearFiltering(bool)",
  "OpenGL::Texture::updateGLTexture()",
  "OpenGL::Texture::updateGLTexture(Common::Rect&)",
  "OpenGL::FakeTexture::allocate(unsigned int, unsigned int)",
  "OpenGL::GLTexture::~GLTexture()",
  "OpenGL::CLUT8LookUpPipeline::drawTextureInternal(OpenGL::GLTexture const&, float const*, float const*)",
  "OpenGL::GLTexture::enableLinearFiltering(bool)",
  "OpenGL::FakeTexture::updateGLTexture()",
  "OpenGL::TextureRGB555::updateGLTexture()",
  "OpenGL::TextureRGBA8888Swap::updateGLTexture()",
  "OpenGL::ScaledTexture::updateGLTexture()",
  "OpenGL::TextureCLUT8GPU::~TextureCLUT8GPU()",
  "OpenGL::ScaledTexture::~ScaledTexture()",
  "OpenGL::TextureCLUT8GPU::recreate()",
  "OpenGL::TextureCLUT8GPU::destroy()",
  "OpenGL::TextureCLUT8GPU::enableLinearFiltering(bool)",
  "OpenGL::Framebuffer::activate(OpenGL::Pipeline*)",
  "OpenGL::ScaledTexture::setScaler(unsigned int, int)",
  "OpenGL::Framebuffer::enableScissorTest(bool)",
  "OpenGL::TextureTarget::~TextureTarget()",
  "OpenGL::Backbuffer::activateInternal()",
  "OpenGL::TextureTarget::setSize(unsigned int, unsigned int)",
  "OpenGL::LibRetroPipeline::~LibRetroPipeline()",
  "OpenGL::Framebuffer::applyBlendState()",
  "Common::Array<OpenGL::LibRetroTextureTarget>::resize(unsigned int)",
  "OpenGL::LibRetroPipeline::setupFBOs()",
  "OpenGL::LibRetroPipeline::setupPassUniforms(unsigned int)",
  "OpenGL::getChildRecursive(Common::FSNode const&, Common::String const&)",
  "OpenGL::LibRetroPipeline::drawTextureInternal(OpenGL::GLTexture const&, float const*, float const*)",
  "Graphics::Surface* OpenGL::loadViaImageDecoder<Image::JPEGDecoder>(Common::FSNode const&)",
  "Graphics::Surface* OpenGL::loadViaImageDecoder<Image::PNGDecoder>(Common::FSNode const&)",
  "OpenGL::LibRetroPipeline::close()",
  "Graphics::Surface* OpenGL::loadViaImageDecoder<Image::TGADecoder>(Common::FSNode const&)",
  "OpenGL::OpenGLGraphicsManager::~OpenGLGraphicsManager()",
  "OpenGL::LibRetroPipeline::setShaderTexUniforms(Common::String const&, OpenGL::Shader*, OpenGL::GLTexture const&)",
  "OpenGL::OpenGLGraphicsManager::setFeatureState(OSystem::Feature, bool)",
  "OpenGL::OpenGLGraphicsManager::setStretchMode(int)",
  "OpenGL::OpenGLGraphicsManager::setScaler(unsigned int, int)",
  "OpenGL::LibRetroPipeline::Pass::addTexSampler(Common::String const&, unsigned int*, OpenGL::LibRetroPipeline::Pass::TextureSampler::Type, unsigned int, bool)",
  "OpenGL::OpenGLGraphicsManager::recalculateCursorScaling()",
  "Graphics::Surface* OpenGL::loadViaImageDecoder<Image::BitmapDecoder>(Common::FSNode const&)",
  "OpenGL::OpenGLGraphicsManager::lockScreen()",
  "OpenGL::OpenGLGraphicsManager::getOverlayFormat() const",
  "OpenGL::OpenGLGraphicsManager::getOverlayWidth() const",
  "OpenGL::OpenGLGraphicsManager::getOverlayHeight() const",
  "OpenGL::OpenGLGraphicsManager::grabOverlay(Graphics::Surface&) const",
  "OpenGL::OpenGLGraphicsManager::createSurface(Graphics::PixelFormat const&, bool, bool)",
  "OpenGL::OpenGLGraphicsManager::setCursorPalette(unsigned char const*, unsigned int, unsigned int)",
  "OpenGL::OpenGLGraphicsManager::updateScreen()",
  "OpenGL::OpenGLGraphicsManager::grabPalette(unsigned char*, unsigned int, unsigned int) const",
  "OpenGL::OpenGLGraphicsManager::gameNeedsAspectRatioCorrection() const",
  "virtual thunk to OpenGL::OpenGLGraphicsManager::gameNeedsAspectRatioCorrection() const",
  "OpenGL::OpenGLGraphicsManager::notifyContextDestroy()",
  "OpenGL::OpenGLGraphicsManager::handleResizeImpl(int, int)",
  "OpenGL::OpenGLGraphicsManager::saveScreenshot(Common::String const&) const",
  "OpenGL::OpenGLGraphicsManager::recalculateDisplayAreas()",
  "OpenGLSdlGraphicsManager::getHiDPIScreenFactor() const",
  "OpenGLSdlGraphicsManager::notifyResize(int, int)",
  "virtual thunk to WindowedGraphicsManager::setShakePos(int, int)",
  "virtual thunk to WindowedGraphicsManager::showOverlay(bool)",
  "virtual thunk to WindowedGraphicsManager::hideOverlay()",
  "OpenGLSdlGraphicsManager::notifyEvent(Common::Event const&)",
  "OpenGL::OpenGLGraphicsManager::setMouseCursor(void const*, unsigned int, unsigned int, int, int, unsigned int, bool, Graphics::PixelFormat const*)",
  "virtual thunk to WindowedGraphicsManager::warpMouse(int, int)",
  "OpenGLSdlGraphicsManager::setupMode(unsigned int, unsigned int)",
  "OpenGL::TextureGL::~TextureGL().1",
  "OpenGL::TextureGL::~TextureGL()",
  "OpenGL::TiledSurface::~TiledSurface()",
  "OpenGL::OpenGLGraphicsManager::endGFXTransaction()",
  "OpenGL::TiledSurface::draw(OpenGL::SurfaceRenderer*) const",
  "OpenGL::ShaderSurfaceRenderer::render(OpenGL::TextureGL const*, Math::Rect2d const&)",
  "OpenGL::ShaderSurfaceRenderer::restorePreviousState()",
  "OpenGL::FrameBuffer::detach()",
  "OpenGL::FrameBuffer::attach()",
  "OpenGLSdlGraphics3dManager::setStretchMode(int)",
  "virtual thunk to OpenGLSdlGraphics3dManager::setStretchMode(int)",
  "OpenGLSdlGraphics3dManager::closeOverlay()",
  "OpenGLSdlGraphics3dManager::createOrUpdateScreen()",
  "OpenGLSdlGraphics3dManager::notifyResize(int, int)",
  "OpenGLSdlGraphics3dManager::gameNeedsAspectRatioCorrection() const",
  "OpenGLSdlGraphics3dManager::handleResizeImpl(int, int)",
  "virtual thunk to OpenGLSdlGraphics3dManager::gameNeedsAspectRatioCorrection() const",
  "OpenGLSdlGraphics3dManager::updateScreen()",
  "OpenGL::TiledSurface::update()",
  "OpenGLSdlGraphics3dManager::hideOverlay()",
  "OpenGLSdlGraphics3dManager::saveScreenshot(Common::String const&) const",
  "POSIXFilesystemNode::getParent() const",
  "POSIXFilesystemNode::createReadStream()",
  "POSIXFilesystemNode::POSIXFilesystemNode(Common::String const&)",
  "POSIXFilesystemNode::createWriteStream()",
  "POSIXFilesystemNode::createDirectory()",
  "Image::BitmapDecoder::~BitmapDecoder()",
  "Image::ImageDecoder::hasPalette() const",
  "POSIXFilesystemNode::getChild(Common::String const&) const",
  "Image::JPEGDecoder::decodeFrame(Common::SeekableReadStream&)",
  "non-virtual thunk to Image::JPEGDecoder::decodeFrame(Common::SeekableReadStream&)",
  "Image::(anonymous namespace)::outputMessage(jpeg_common_struct*)",
  "Image::(anonymous namespace)::skipInputData(jpeg_decompress_struct*, long)",
  "Image::pngReadFromStream(png_struct_def*, unsigned char*, unsigned long)",
  "POSIXSaveFileManager::POSIXSaveFileManager()",
  "Image::pngWriteToStream(png_struct_def*, unsigned char*, unsigned long)",
  "Image::BitmapDecoder::loadStream(Common::SeekableReadStream&)",
  "Image::BitmapRawDecoder::decodeFrame(Common::SeekableReadStream&)",
  "Image::CinepakDecoder::loadCodebook(Common::SeekableReadStream&, unsigned short, unsigned char, unsigned char, unsigned int)",
  "Image::CinepakDecoder::decodeFrame(Common::SeekableReadStream&)",
  "Image::JPEGDecoder::loadStream(Common::SeekableReadStream&)",
  "Image::Indeo3Decoder::decodeFrame(Common::SeekableReadStream&)",
  "Image::writePNG(Common::WriteStream&, Graphics::Surface const&, unsigned char const*)",
  "Image::Indeo4Decoder::decodeFrame(Common::SeekableReadStream&)",
  "Image::PNGDecoder::loadStream(Common::SeekableReadStream&)",
  "Image::TGADecoder::loadStream(Common::SeekableReadStream&)",
  "Image::Indeo5Decoder::decodeFrame(Common::SeekableReadStream&)",
  "Image::MJPEGDecoder::decodeFrame(Common::SeekableReadStream&)",
  "Image::MSRLEDecoder::decodeFrame(Common::SeekableReadStream&)",
  "Image::JYV1Decoder::decodeFrame(Common::SeekableReadStream&)",
  "Image::CinepakDecoder::setDither(Image::Codec::DitherType, unsigned char const*)",
  "Image::XanDecoder::decodeFrame(Common::SeekableReadStream&)",
  "Image::XanDecoder::decompressLuma(Common::SeekableReadStream&)",
  "Image::MSVideo1Decoder::decodeFrame(Common::SeekableReadStream&)",
  "Image::_unpack(Common::SeekableReadStream&, unsigned char*, int)",
  "Image::XanDecoder::decodeChroma(Common::SeekableReadStream&, int)",
  "Image::Indeo::IndeoDecoderBase::IndeoDecoderBase(unsigned short, unsigned short, unsigned int)",
  "Image::Indeo::IndeoDecoderBase::iviMc(Image::Indeo::IVIBandDesc*, void (*)(short*, short const*, unsigned int, int), void (*)(short*, short const*, short const*, unsigned int, int, int), int, int, int, int, int, int, int)",
  "Image::Indeo::IndeoDecoderBase::decode_band(Image::Indeo::IVIBandDesc*)",
  "Image::Indeo::IndeoDecoderBase::decodeIndeoFrame()",
  "Image::MSRLE4Decoder::decodeFrame(Common::SeekableReadStream&)",
  "Image::Indeo::IndeoDecoderBase::decodeCodedBlocks(Image::Indeo::GetBits*, Image::Indeo::IVIBandDesc*, void (*)(short*, short const*, unsigned int, int), void (*)(short*, short const*, short const*, unsigned int, int, int), int, int, int, int, int*, int, int, int, unsigned int, int)",
  "Graphics::CursorManager::showMouse(bool)",
  "Graphics::CursorManager::pushCursor(void const*, unsigned int, unsigned int, int, int, unsigned int, bool, Graphics::PixelFormat const*)",
  "Graphics::CursorManager::popCursor()",
  "Graphics::CursorManager::replaceCursor(void const*, unsigned int, unsigned int, int, int, unsigned int, bool, Graphics::PixelFormat const*)",
  "Graphics::CursorManager::pushCursorPalette(unsigned char const*, unsigned int, unsigned int)",
  "Graphics::Font::drawChar(Graphics::ManagedSurface*, unsigned int, int, int, unsigned int) const",
  "Graphics::Font::drawString(Graphics::Surface*, Common::String const&, int, int, int, unsigned int, Graphics::TextAlign, int, bool) const",
  "Graphics::Font::drawString(Graphics::Surface*, Common::U32String const&, int, int, int, unsigned int, Graphics::TextAlign, int, bool) const",
  "Graphics::Font::getBoundingBox(unsigned int) const",
  "Graphics::FontManager::~FontManager()",
  "Graphics::Font::wordWrapText(Common::U32String const&, int, Common::Array<Common::U32String>&, int, unsigned int) const",
  "Graphics::TTFLibrary::~TTFLibrary()",
  "Graphics::TTFFont::load(Common::SeekableReadStream&, int, Graphics::TTFSizeMode, unsigned int, Graphics::TTFRenderMode, unsigned int const*, bool)",
  "Graphics::AmigaFont::AmigaFont(Common::SeekableReadStream*)",
  "Graphics::TTFFont::drawChar(Graphics::ManagedSurface*, unsigned int, int, int, unsigned int) const",
  "Graphics::Font::getStringWidth(Common::U32String const&) const",
  "Graphics::ManagedSurface::ManagedSurface(Graphics::ManagedSurface const&)",
  "Graphics::ManagedSurface::create(short, short, Graphics::PixelFormat const&)",
  "Graphics::ManagedSurface::copyFrom(Graphics::Surface const&)",
  "Graphics::ManagedSurface::ManagedSurface(Graphics::Surface const*)",
  "Graphics::Font::drawString(Graphics::ManagedSurface*, Common::String const&, int, int, int, unsigned int, Graphics::TextAlign, int, bool) const",
  "Graphics::ManagedSurface::create(Graphics::ManagedSurface&, Common::Rect const&)",
  "Graphics::ManagedSurface::setPixels(void*)",
  "Graphics::ManagedSurface::copyFrom(Graphics::ManagedSurface const&)",
  "Graphics::TTFFont::getKerningOffset(unsigned int, unsigned int) const",
  "Graphics::ManagedSurface::addDirtyRect(Common::Rect const&)",
  "OpenGL::clearGLError()",
  "OpenGL::checkGLError(char const*, char const*, int)",
  "OpenGL::Shader::createDirectShader(unsigned long, char const* const*, unsigned int, Common::String const&)",
  "OpenGL::Shader::createCompatShader(char const*, unsigned int, Common::String const&, int)",
  "Graphics::ManagedSurface::transBlitFromInner(Graphics::Surface const&, Common::Rect const&, Common::Rect const&, unsigned int, bool, unsigned int, unsigned int, unsigned int const*, unsigned int const*, Graphics::Surface const*, bool)",
  "OpenGL::Shader::loadShader(Common::String const&, unsigned int, unsigned int, char const* const*)",
  "OpenGL::Shader::use(bool)",
  "OpenGL::Shader::createBuffer(unsigned int, long, void const*, unsigned int)",
  "OpenGL::Shader::addAttribute(char const*)",
  "OpenGL::Shader::freeBuffer(unsigned int)",
  "OpenGL::Shader::~Shader()",
  "OpenGL::Shader::unbind()",
  "Common::BasePtrTrackerDeletionImpl<unsigned int, OpenGL::SharedPtrProgramDeleter>::destructObject()",
  "Graphics::TTFFont::cacheGlyph(Graphics::TTFFont::Glyph&, unsigned int) const",
  "Graphics::blacksquareinwhitecircle(Graphics::ManagedSurface*, int, int, int, int, int)",
  "Graphics::drawRow(Graphics::ManagedSurface*, int, int*, int, int, int, int, int)",
  "Scaler::scale(unsigned char const*, unsigned int, unsigned char*, unsigned int, int, int, int, int)",
  "Graphics::circleColorNoblend(Graphics::ManagedSurface*, double, double, double, int, bool)",
  "Graphics::ManagedSurface::create(short, short)",
  "NormalScaler::increaseFactor()",
  "NormalScaler::decreaseFactor()",
  "Graphics::ManagedSurface::blitFromInner(Graphics::Surface const&, Common::Rect const&, Common::Rect const&, unsigned int const*)",
  "SourceScaler::scaleIntern(unsigned char const*, unsigned int, unsigned char*, unsigned int, int, int, int, int)",
  "Graphics::SVGBitmap::SVGBitmap(Common::SeekableReadStream*)",
  "Graphics::SVGBitmap::~SVGBitmap()",
  "Graphics::VectorRenderer::drawStep(Common::Rect const&, Common::Rect const&, Graphics::DrawStep const&, unsigned int)",
  "Graphics::VectorRenderer::drawCross(int, int, int, int)",
  "Graphics::SVGBitmap::render(Graphics::ManagedSurface&, int, int)",
  "Graphics::VectorRendererSpec<unsigned int>::drawCircle(int, int, int)",
  "Graphics::VectorRendererSpec<unsigned int>::drawLine(int, int, int, int)",
  "Graphics::VectorRendererSpec<unsigned int>::drawSquare(int, int, int, int)",
  "Graphics::VectorRendererSpec<unsigned int>::drawRoundedSquare(int, int, int, int, int)",
  "Graphics::VectorRendererSpec<unsigned int>::drawTriangle(int, int, int, int, Graphics::VectorRenderer::TriangleOrientation)",
  "Graphics::VectorRendererSpec<unsigned int>::drawBeveledSquare(int, int, int, int)",
  "Graphics::VectorRendererSpec<unsigned int>::drawTab(int, int, int, int, int, int)",
  "Graphics::VectorRendererSpec<unsigned int>::copyFrame(OSystem*, Common::Rect const&)",
  "Graphics::VectorRendererSpec<unsigned int>::copyWholeFrame(OSystem*)",
  "Graphics::frame(Graphics::ManagedSurface*, int, int, int, int, int, int, int, int, int)",
  "OpenGL::Context::initialize(OpenGL::ContextType)",
  "Graphics::VectorRendererSpec<unsigned int>::drawRoundedSquareAlg(int, int, int, int, int, unsigned int, Graphics::VectorRenderer::FillMode)",
  "Graphics::VectorRendererSpec<unsigned int>::drawRoundedSquareAlgClip(int, int, int, int, int, unsigned int, Graphics::VectorRenderer::FillMode)",
  "Graphics::VectorRendererSpec<unsigned int>::drawString(Graphics::Font const*, Common::U32String const&, Common::Rect const&, Graphics::TextAlign, GUI::ThemeEngine::TextAlignVertical, int, bool, Common::Rect const&)",
  "Graphics::VectorRendererSpec<unsigned int>::drawBevelSquareAlg(int, int, int, int, int, unsigned int, unsigned int)",
  "Graphics::VectorRendererSpec<unsigned int>::drawBevelSquareAlgClip(int, int, int, int, int, unsigned int, unsigned int)",
  "Graphics::VectorRendererSpec<unsigned short>::drawCircle(int, int, int)",
  "Graphics::VectorRendererSpec<unsigned short>::drawLine(int, int, int, int)",
  "Graphics::VectorRendererSpec<unsigned short>::drawSquare(int, int, int, int)",
  "Graphics::VectorRendererSpec<unsigned short>::drawRoundedSquare(int, int, int, int, int)",
  "Graphics::VectorRendererSpec<unsigned short>::drawTriangle(int, int, int, int, Graphics::VectorRenderer::TriangleOrientation)",
  "Graphics::VectorRendererSpec<unsigned short>::drawBeveledSquare(int, int, int, int)",
  "Graphics::VectorRendererSpec<unsigned short>::drawTab(int, int, int, int, int, int)",
  "Graphics::VectorRendererSpec<unsigned short>::drawString(Graphics::Font const*, Common::U32String const&, Common::Rect const&, Graphics::TextAlign, GUI::ThemeEngine::TextAlignVertical, int, bool, Common::Rect const&)",
  "Graphics::VectorRendererSpec<unsigned short>::drawRoundedSquareAlgClip(int, int, int, int, int, unsigned short, Graphics::VectorRenderer::FillMode)",
  "Graphics::VectorRendererSpec<unsigned short>::drawRoundedSquareAlg(int, int, int, int, int, unsigned short, Graphics::VectorRenderer::FillMode)",
  "Graphics::VectorRendererSpec<unsigned short>::drawBevelSquareAlg(int, int, int, int, int, unsigned short, unsigned short)",
  "Graphics::VectorRendererSpec<unsigned short>::drawBevelSquareAlgClip(int, int, int, int, int, unsigned short, unsigned short)",
  "Graphics::VectorRendererAA<unsigned int>::drawRoundedSquareAlg(int, int, int, int, int, unsigned int, Graphics::VectorRenderer::FillMode)",
  "Graphics::VectorRendererAA<unsigned int>::drawInteriorRoundedSquareAlg(int, int, int, int, int, unsigned int, Graphics::VectorRenderer::FillMode)",
  "Graphics::VectorRendererAA<unsigned short>::drawRoundedSquareAlg(int, int, int, int, int, unsigned short, Graphics::VectorRenderer::FillMode)",
  "Graphics::VectorRendererAA<unsigned short>::drawInteriorRoundedSquareAlg(int, int, int, int, int, unsigned short, Graphics::VectorRenderer::FillMode)",
  "AdvMameScaler::increaseFactor()",
  "HQScaler::increaseFactor()",
  "AdvMameScaler::decreaseFactor()",
  "AdLibPart::send(unsigned int)",
  "MidiDriver_ADLIB::partKeyOff(AdLibPart*, unsigned char)",
  "MidiDriver_ADLIB::allocateVoice(unsigned char)",
  "MidiDriver_ADLIB::mcKeyOn(AdLibVoice*, AdLibInstrument const*, unsigned char, unsigned char, AdLibInstrument const*, unsigned char)",
  "MidiDriver_ADLIB::adlibPlayNote(int, int)",
  "MidiDriver_ADLIB::adlibNoteOnEx(int, unsigned char, int)",
  "AdLibPart::controlChange(unsigned char, unsigned char)",
  "AdLibPart::volume(unsigned char)",
  "AdLibPart::sustain(bool)",
  "AdLibPart::allNotesOff()",
  "MidiDriver_ADLIB::open()",
  "MidiDriver_ADLIB::send(unsigned int)",
  "MidiDriver_ADLIB::close()",
  "MidiDriver_ADLIB::send(signed char, unsigned int)",
  "MidiDriver_ADLIB::onTimer()",
  "MidiDriver_ADLIB::mcIncStuff(AdLibVoice*, Struct10*, Struct11*)",
  "Common::Functor0Mem<void, MidiDriver_ADLIB>::operator()() const",
  "AdLibEmuMusicPlugin::createInstance(MidiDriver**, unsigned int) const",
  "Audio::LoopingAudioStream::readBuffer(short*, int)",
  "Audio::LoopingAudioStream::endOfData() const",
  "Audio::LoopingAudioStream::LoopingAudioStream(Common::DisposablePtr<Audio::RewindableAudioStream, Common::DefaultDeleter<Audio::RewindableAudioStream>>&&, unsigned int, bool)",
  "Audio::SubSeekableAudioStream::readBuffer(short*, int)",
  "Audio::SubSeekableAudioStream::seek(Audio::Timestamp const&)",
  "Audio::QueuingAudioStreamImpl::queueAudioStream(Audio::AudioStream*, DisposeAfterUse::Flag)",
  "Audio::makeLimitingAudioStream(Audio::AudioStream*, Audio::Timestamp const&, DisposeAfterUse::Flag)",
  "Audio::AudioStream::endOfStream() const",
  "Audio::LoopingAudioStream::~LoopingAudioStream()",
  "Audio::LoopingAudioStream::~LoopingAudioStream().1",
  "Audio::LoopingAudioStream::isStereo() const",
  "Audio::LoopingAudioStream::getRate() const",
  "Audio::SeekableAudioStream::rewind()",
  "Audio::SubSeekableAudioStream::~SubSeekableAudioStream()",
  "Audio::SubSeekableAudioStream::~SubSeekableAudioStream().1",
  "Audio::SubSeekableAudioStream::endOfData() const",
  "Audio::QueuingAudioStreamImpl::endOfData() const",
  "Audio::makeLoopingAudioStream(Audio::RewindableAudioStream*, unsigned int)",
  "Audio::LimitingAudioStream::~LimitingAudioStream()",
  "Audio::LimitingAudioStream::~LimitingAudioStream().1",
  "Audio::LimitingAudioStream::isStereo() const",
  "Audio::LimitingAudioStream::endOfData() const",
  "Audio::LimitingAudioStream::readBuffer(short*, int)",
  "Audio::LimitingAudioStream::endOfStream() const",
  "Audio::QueuingAudioStreamImpl::readBuffer(short*, int)",
  "OPL::EmulatedOPL::readBuffer(short*, int)",
  "OPL::EmulatedOPL::~EmulatedOPL()",
  "OPL::EmulatedOPL::getRate() const",
  "OPL::EmulatedOPL::setCallbackFrequency(int)",
  "Audio::LimitingAudioStream::getRate() const",
  "Audio::SubSeekableAudioStream::endOfStream() const",
  "OPL::EmulatedOPL::startCallbacks(int)",
  "MidiDriver_BASE::stopAllNotes(bool)",
  "MidiDriver_BASE::MidiDriver_BASE()",
  "MidiDriver::midiDriverCommonSend(unsigned int)",
  "MidiDriver::midiDriverCommonSysEx(unsigned char const*, unsigned short)",
  "Audio::MixerImpl::~MixerImpl()",
  "OPL::EmulatedOPL::stopCallbacks()",
  "Audio::MixerImpl::setChannelBalance(Audio::SoundHandle, signed char)",
  "Audio::MixerImpl::getSoundElapsedTime(Audio::SoundHandle)",
  "Audio::MixerImpl::getElapsedTime(Audio::SoundHandle)",
  "[func] check if import can change state Audio::MixerImpl::pauseAll(bool)Audio::MixerImpl::setChannelVolume(Audio::SoundHandle, unsigned char)",
  "Audio::MixerImpl::muteSoundType(Audio::Mixer::SoundType, bool)",
  "Audio::MixerImpl::loopChannel(Audio::SoundHandle)",
  "Audio::MixerImpl::pauseHandle(Audio::SoundHandle, bool)",
  "Audio::MixerImpl::pauseID(int, bool)",
  "Audio::MixerImpl::pauseAll(bool)",
  "Audio::MixerImpl::playStream(Audio::Mixer::SoundType, Audio::SoundHandle*, Audio::AudioStream*, int, unsigned char, signed char, DisposeAfterUse::Flag, bool, bool)",
  "Audio::Channel::~Channel()",
  "MidiChannel_MPU401::noteOff(unsigned char)",
  "MidiChannel_MPU401::noteOn(unsigned char, unsigned char)",
  "MidiChannel_MPU401::programChange(unsigned char)",
  "MidiChannel_MPU401::pitchBend(short)",
  "MidiChannel_MPU401::controlChange(unsigned char, unsigned char)",
  "MidiChannel_MPU401::pitchBendFactor(unsigned char)",
  "MidiDriver_MPU401::close()",
  "MidiDriver_MPU401::setTimerCallback(void*, void (*)(void*))",
  "MidiChannel::modulationWheel(unsigned char)",
  "MidiChannel::volume(unsigned char)",
  "MidiChannel::panPosition(unsigned char)",
  "MidiChannel::detune(unsigned char)",
  "MidiChannel::sustain(bool)",
  "MidiChannel::effectLevel(unsigned char)",
  "MidiChannel::chorusLevel(unsigned char)",
  "OPL::OPL::~OPL()",
  "MusicDevice::MusicDevice(MusicPluginObject const*, Common::String, MusicType)",
  "MidiDriver_BASE::~MidiDriver_BASE()",
  "Audio::SimpleRateConverter<true, true, true>::flow(Audio::AudioStream&, short*, unsigned int, unsigned short, unsigned short)",
  "Audio::CopyRateConverter<true, true, true>::flow(Audio::AudioStream&, short*, unsigned int, unsigned short, unsigned short)",
  "Audio::LinearRateConverter<true, true, true>::flow(Audio::AudioStream&, short*, unsigned int, unsigned short, unsigned short)",
  "Audio::SimpleRateConverter<true, true, false>::flow(Audio::AudioStream&, short*, unsigned int, unsigned short, unsigned short)",
  "Audio::MixerImpl::setVolumeForSoundType(Audio::Mixer::SoundType, int)",
  "MidiChannel_MPU401::send(unsigned int)",
  "MidiChannel::allNotesOff()",
  "Audio::LinearRateConverter<true, true, false>::flow(Audio::AudioStream&, short*, unsigned int, unsigned short, unsigned short)",
  "Audio::CopyRateConverter<true, false, false>::flow(Audio::AudioStream&, short*, unsigned int, unsigned short, unsigned short)",
  "Audio::CopyRateConverter<true, true, false>::flow(Audio::AudioStream&, short*, unsigned int, unsigned short, unsigned short)",
  "Audio::SimpleRateConverter<false, true, false>::flow(Audio::AudioStream&, short*, unsigned int, unsigned short, unsigned short)",
  "Audio::CopyRateConverter<false, true, false>::flow(Audio::AudioStream&, short*, unsigned int, unsigned short, unsigned short)",
  "Audio::SimpleRateConverter<false, false, false>::flow(Audio::AudioStream&, short*, unsigned int, unsigned short, unsigned short)",
  "Audio::LinearRateConverter<false, false, false>::flow(Audio::AudioStream&, short*, unsigned int, unsigned short, unsigned short)",
  "Audio::ADPCMStream::rewind()",
  "Audio::LinearRateConverter<true, false, false>::flow(Audio::AudioStream&, short*, unsigned int, unsigned short, unsigned short)",
  "Audio::Oki_ADPCMStream::readBuffer(short*, int)",
  "Audio::DVI_ADPCMStream::readBuffer(short*, int)",
  "Audio::SimpleRateConverter<true, false, false>::flow(Audio::AudioStream&, short*, unsigned int, unsigned short, unsigned short)",
  "Audio::XA_ADPCMStream::readBuffer(short*, int)",
  "Audio::MSIma_ADPCMStream::readBuffer(short*, int)",
  "Audio::Apple_ADPCMStream::readBuffer(short*, int)",
  "Audio::DK3_ADPCMStream::readBuffer(short*, int)",
  "Audio::MS_ADPCMStream::readBuffer(short*, int)",
  "Audio::ADPCMStream::endOfData() const",
  "Audio::Oki_ADPCMStream::~Oki_ADPCMStream().1",
  "Audio::CopyRateConverter<false, false, false>::flow(Audio::AudioStream&, short*, unsigned int, unsigned short, unsigned short)",
  "Audio::LinearRateConverter<false, true, false>::flow(Audio::AudioStream&, short*, unsigned int, unsigned short, unsigned short)",
  "Audio::XA_ADPCMStream::~XA_ADPCMStream()",
  "Audio::XA_ADPCMStream::~XA_ADPCMStream().1",
  "Audio::Apple_ADPCMStream::~Apple_ADPCMStream()",
  "Audio::MSIma_ADPCMStream::~MSIma_ADPCMStream()",
  "Audio::MSIma_ADPCMStream::~MSIma_ADPCMStream().1",
  "Audio::MS_ADPCMStream::~MS_ADPCMStream()",
  "Audio::MS_ADPCMStream::~MS_ADPCMStream().1",
  "Audio::MS_ADPCMStream::endOfData() const",
  "Audio::Oki_ADPCMStream::endOfData() const",
  "Audio::DK3_ADPCMStream::~DK3_ADPCMStream()",
  "Audio::G711AudioStream::seek(Audio::Timestamp const&)",
  "Audio::G711AudioStream::readBuffer(short*, int)",
  "Audio::DK3_ADPCMStream::~DK3_ADPCMStream().1",
  "Audio::G711AudioStream::getLength() const",
  "Audio::G711MuLawStream::~G711MuLawStream()",
  "Audio::G711MuLawStream::~G711MuLawStream().1",
  "Audio::Apple_ADPCMStream::~Apple_ADPCMStream().1",
  "Audio::QuickTimeAudioDecoder::~QuickTimeAudioDecoder()",
  "Audio::G711ALawStream::~G711ALawStream()",
  "Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::getCurrentTrackTime() const",
  "Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::~QuickTimeAudioTrack().1",
  "Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::~QuickTimeAudioTrack()",
  "Audio::QuickTimeAudioDecoder::readSampleDesc(Common::QuickTimeParser::Track*, unsigned int, unsigned int)",
  "Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::queueStream(Audio::AudioStream*, Audio::Timestamp const&)",
  "Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::enterNewEdit(Audio::Timestamp const&)",
  "Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::queueAudio(Audio::Timestamp const&)",
  "Audio::G711ALawStream::~G711ALawStream().1",
  "Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::skipSamples(Audio::Timestamp const&, Audio::AudioStream*)",
  "Audio::QuickTimeAudioDecoder::AudioSampleDesc::~AudioSampleDesc()",
  "Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::endOfData() const",
  "Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::isStereo() const",
  "Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::getRate() const",
  "Audio::makeQuickTimeStream(Common::SeekableReadStream*, DisposeAfterUse::Flag)",
  "Audio::ForcedMonoAudioStream::~ForcedMonoAudioStream()",
  "Audio::ForcedMonoAudioStream::readBuffer(short*, int)",
  "Audio::ForcedMonoAudioStream::~ForcedMonoAudioStream().1",
  "Audio::DVI_ADPCMStream::~DVI_ADPCMStream().1",
  "Audio::QuickTimeAudioStream::readBuffer(short*, int)",
  "Audio::QuickTimeAudioStream::endOfData() const",
  "Audio::QuickTimeAudioStream::isStereo() const",
  "Audio::QuickTimeAudioStream::seek(Audio::Timestamp const&)",
  "Audio::QuickTimeAudioStream::getLength() const",
  "Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::seek(Audio::Timestamp const&)",
  "Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::readBuffer(short*, int)",
  "non-virtual thunk to Audio::QuickTimeAudioStream::~QuickTimeAudioStream().1",
  "Audio::RawStream<3, true, true>::~RawStream()",
  "Audio::makeRawStream(Common::SeekableReadStream*, int, unsigned char, DisposeAfterUse::Flag)",
  "Audio::RawStream<3, true, true>::seek(Audio::Timestamp const&)",
  "Audio::RawStream<3, true, false>::~RawStream()",
  "Audio::RawStream<3, true, false>::~RawStream().1",
  "Audio::RawStream<3, true, false>::readBuffer(short*, int)",
  "Audio::RawStream<2, true, true>::~RawStream()",
  "Audio::RawStream<2, true, true>::~RawStream().1",
  "Audio::RawStream<2, true, true>::readBuffer(short*, int)",
  "Audio::RawStream<3, true, true>::~RawStream().1",
  "Audio::RawStream<2, true, true>::seek(Audio::Timestamp const&)",
  "Audio::RawStream<2, true, false>::~RawStream()",
  "Audio::RawStream<3, true, true>::readBuffer(short*, int)",
  "Audio::RawStream<2, true, false>::readBuffer(short*, int)",
  "Audio::RawStream<1, true, false>::~RawStream().1",
  "Audio::RawStream<1, true, false>::~RawStream()",
  "Audio::RawStream<1, true, false>::readBuffer(short*, int)",
  "Audio::RawStream<3, false, true>::~RawStream()",
  "non-virtual thunk to Audio::QuickTimeAudioStream::~QuickTimeAudioStream()",
  "Audio::RawStream<3, false, true>::~RawStream().1",
  "Audio::RawStream<3, false, false>::~RawStream()",
  "Audio::RawStream<3, false, true>::readBuffer(short*, int)",
  "Audio::RawStream<3, false, false>::readBuffer(short*, int)",
  "Audio::RawStream<3, false, false>::~RawStream().1",
  "Audio::RawStream<2, false, true>::~RawStream().1",
  "Audio::RawStream<2, false, false>::~RawStream()",
  "Audio::RawStream<2, false, false>::~RawStream().1",
  "Audio::RawStream<2, false, true>::~RawStream()",
  "Audio::RawStream<1, false, false>::~RawStream()",
  "Audio::RawStream<1, false, false>::~RawStream().1",
  "Audio::RawStream<1, false, false>::readBuffer(short*, int)",
  "Audio::makeWAVStream(Common::SeekableReadStream*, DisposeAfterUse::Flag)",
  "OPL::DOSBox::DBOPL::Channel* OPL::DOSBox::DBOPL::Channel::BlockTemplate<(OPL::DOSBox::DBOPL::SynthMode)1>(OPL::DOSBox::DBOPL::Chip*, unsigned int, int*)",
  "OPL::DOSBox::DBOPL::Channel* OPL::DOSBox::DBOPL::Channel::BlockTemplate<(OPL::DOSBox::DBOPL::SynthMode)7>(OPL::DOSBox::DBOPL::Chip*, unsigned int, int*)",
  "OPL::DOSBox::DBOPL::Channel* OPL::DOSBox::DBOPL::Channel::BlockTemplate<(OPL::DOSBox::DBOPL::SynthMode)6>(OPL::DOSBox::DBOPL::Chip*, unsigned int, int*)",
  "Audio::QuickTimeAudioStream::getRate() const",
  "Audio::QuickTimeAudioStream::~QuickTimeAudioStream().1",
  "Audio::RawStream<1, true, false>::seek(Audio::Timestamp const&)",
  "OPL::DOSBox::DBOPL::Channel* OPL::DOSBox::DBOPL::Channel::BlockTemplate<(OPL::DOSBox::DBOPL::SynthMode)8>(OPL::DOSBox::DBOPL::Chip*, unsigned int, int*)",
  "OPL::DOSBox::DBOPL::Channel* OPL::DOSBox::DBOPL::Channel::BlockTemplate<(OPL::DOSBox::DBOPL::SynthMode)3>(OPL::DOSBox::DBOPL::Chip*, unsigned int, int*)",
  "OPL::DOSBox::DBOPL::Channel* OPL::DOSBox::DBOPL::Channel::BlockTemplate<(OPL::DOSBox::DBOPL::SynthMode)2>(OPL::DOSBox::DBOPL::Chip*, unsigned int, int*)",
  "OPL::DOSBox::DBOPL::Channel* OPL::DOSBox::DBOPL::Channel::BlockTemplate<(OPL::DOSBox::DBOPL::SynthMode)10>(OPL::DOSBox::DBOPL::Chip*, unsigned int, int*)",
  "OPL::DOSBox::DBOPL::Channel* OPL::DOSBox::DBOPL::Channel::BlockTemplate<(OPL::DOSBox::DBOPL::SynthMode)0>(OPL::DOSBox::DBOPL::Chip*, unsigned int, int*)",
  "OPL::DOSBox::DBOPL::Channel* OPL::DOSBox::DBOPL::Channel::BlockTemplate<(OPL::DOSBox::DBOPL::SynthMode)11>(OPL::DOSBox::DBOPL::Chip*, unsigned int, int*)",
  "Audio::QuickTimeAudioStream::~QuickTimeAudioStream()",
  "OPL::DOSBox::Chip::write(unsigned int, unsigned char)",
  "OPL::DOSBox::DBOPL::Channel* OPL::DOSBox::DBOPL::Channel::BlockTemplate<(OPL::DOSBox::DBOPL::SynthMode)5>(OPL::DOSBox::DBOPL::Chip*, unsigned int, int*)",
  "OPL::DOSBox::OPL::writeReg(int, int)",
  "OPL::MAME::OPL::~OPL()",
  "OPL::DOSBox::OPL::read(int)",
  "OPL::DOSBox::OPL::init()",
  "OPL::MAME::OPL::init()",
  "OPL::DOSBox::OPL::generateSamples(short*, int)",
  "OPL::MAME::OPLResetChip(OPL::MAME::fm_opl_f*)",
  "OPL::MAME::OPL::write(int, int)",
  "OPL::MAME::OPLWriteReg(OPL::MAME::fm_opl_f*, int, int)",
  "MidiDriver_MT32::~MidiDriver_MT32()",
  "MidiDriver_MT32::close()",
  "OPL::MAME::OPL_STATUS_RESET(OPL::MAME::fm_opl_f*, int)",
  "MidiDriver_MT32::generateSamples(short*, int)",
  "MT32EmuMusicPlugin::createInstance(MidiDriver**, unsigned int) const",
  "MidiDriver_Emulated::readBuffer(short*, int)",
  "MT32Emu::ScummVMReportHandler::showLCDMessage(char const*)",
  "MidiDriver_MT32::open()",
  "MT32Emu::CppInterfaceImpl::onErrorPCMROM(void*)",
  "MT32Emu::CppInterfaceImpl::printDebug(void*, char const*, void*)",
  "MT32Emu::CppInterfaceImpl::onErrorControlROM(void*)",
  "MT32Emu::CppInterfaceImpl::onMIDISystemRealtime(void*, unsigned char)",
  "MT32Emu::CppInterfaceImpl::onMIDIMessagePlayed(void*)",
  "MT32Emu::CppInterfaceImpl::onNewReverbTime(void*, unsigned char)",
  "MT32Emu::CppInterfaceImpl::onNewReverbLevel(void*, unsigned char)",
  "MT32Emu::CppInterfaceImpl::onProgramChanged(void*, unsigned char, char const*, char const*)",
  "MT32Emu::CppInterfaceImpl::showLCDMessage(void*, char const*)",
  "OPL::NUKED::OPL::~OPL()",
  "OPL::NUKED::OPL::init()",
  "Common::GenericArchiveMember::createReadStream() const",
  "OPL::NUKED::OPL::generateSamples(short*, int)",
  "Common::MemcachingCaseInsensitiveArchive::createReadStreamForMember(Common::Path const&) const",
  "Common::Archive::listMatchingMembers(Common::List<Common::SharedPtr<Common::ArchiveMember>>&, Common::Path const&) const",
  "Common::SearchSet::add(Common::String const&, Common::Archive*, int, bool)",
  "Common::SearchSet::remove(Common::String const&)",
  "Common::SearchSet::addDirectory(Common::String const&, Common::FSNode const&, int, int, bool)",
  "Common::SearchSet::hasFile(Common::Path const&) const",
  "MT32Emu::CppInterfaceImpl::onNewReverbMode(void*, unsigned char)",
  "Common::SearchSet::getMember(Common::Path const&) const",
  "Common::SearchManager::clear()",
  "Common::SearchSet::~SearchSet().1",
  "Common::SearchSet::~SearchSet()",
  "Common::SearchManager::~SearchManager()",
  "Common::ArchiveMember::getDisplayName() const",
  "Common::HashMap<Common::String, Common::SharedArchiveContents, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::~HashMap()",
  "non-virtual thunk to Common::SearchManager::~SearchManager().1",
  "Common::SearchManager::~SearchManager().1",
  "non-virtual thunk to Common::SearchManager::~SearchManager()",
  "Common::BaseString<char>::incRefCount() const",
  "Common::SearchSet::listMembers(Common::List<Common::SharedPtr<Common::ArchiveMember>>&) const",
  "MT32Emu::CppInterfaceImpl::onPolyStateChanged(void*, unsigned char)",
  "Common::ConfigManager::flushToDisk()",
  "Common::ConfigManager::loadFromStream(Common::SeekableReadStream&)",
  "Common::ConfigManager::writeDomain(Common::WriteStream&, Common::String const&, Common::ConfigManager::Domain const&)",
  "debug(char const*, ...)",
  "debug(int, char const*, ...)",
  "debugN(char const*, ...)",
  "debugN(int, char const*, ...)",
  "debugC(int, unsigned int, char const*, ...)",
  "Common::EventDispatcher::unregisterSource(Common::EventSource*)",
  "Common::EventManager::~EventManager()",
  "Common::EventDispatcher::unregisterObserver(Common::EventObserver*)",
  "Common::File::~File()",
  "Common::EventDispatcher::dispatch()",
  "Common::File::open(Common::Path const&)",
  "Common::File::open(Common::Path const&, Common::Archive&)",
  "Common::File::close()",
  "Common::File::clearErr()",
  "Common::File::pos() const",
  "Common::File::size() const",
  "Common::File::open(Common::FSNode const&)",
  "Common::File::eos() const",
  "Common::File::read(void*, unsigned int)",
  "Common::File::exists(Common::Path const&)",
  "Common::DumpFile::~DumpFile().1",
  "Common::DumpFile::~DumpFile()",
  "Common::File::seek(long long, int)",
  "Common::DumpFile::open(Common::FSNode const&)",
  "Common::DumpFile::flush()",
  "Common::DumpFile::err() const[func] check if import can change state",
  "Common::DumpFile::clearErr()",
  "Common::DumpFile::open(Common::String const&, bool)",
  "Common::DumpFile::write(void const*, unsigned int)",
  "Common::File::err() const",
  "Common::DumpFile::size() const",
  "Common::FSNode::getChild(Common::String const&) const",
  "Common::FSNode::getDisplayName() const",
  "Common::FSNode::getParent() const",
  "Common::FSNode::FSNode(Common::Path const&)",
  "Common::FSNode::getPath() const",
  "Common::FSNode::createReadStream() const",
  "Common::FSNode::createWriteStream() const",
  "Common::FSDirectory::~FSDirectory()",
  "Common::FSDirectory::ensureCached() const",
  "Common::FSDirectory::getMember(Common::Path const&) const",
  "Common::FSDirectory::hasFile(Common::Path const&) const",
  "Common::FSDirectory::cacheDirectoryRecursive(Common::FSNode, int, Common::Path const&) const",
  "Common::FSDirectory::createReadStreamForMember(Common::Path const&) const",
  "Common::FSNode::~FSNode().1",
  "Common::FSDirectory::listMembers(Common::List<Common::SharedPtr<Common::ArchiveMember>>&) const",
  "Common::BasePtrTrackerImpl<AbstractFSNode>::destructObject()",
  "Common::MacResManager::close()",
  "Common::MacResManager::getResForkDataSize() const",
  "Common::MacResManager::computeResForkMD5AsString(unsigned int, bool) const",
  "Common::MacResManager::open(Common::Path const&, Common::Archive&)",
  "Common::MacResManager::loadFromAppleDouble(Common::SeekableReadStream*)",
  "Common::MacResManager::loadFromMacBinary(Common::SeekableReadStream*)",
  "Common::MacResManager::readAndValidateMacBinaryHeader(Common::SeekableReadStream&, unsigned char (&) [128])",
  "Common::MacResManager::load(Common::SeekableReadStream*)",
  "Common::MacResManager::openFileOrDataFork(Common::Path const&, Common::Archive&)",
  "Common::computeStreamMD5AsString(Common::ReadStream&, unsigned int)",
  "Common::Mutex::Mutex()",
  "Common::StackLock::~StackLock()",
  "Common::StackLock::StackLock(Common::Mutex const&, char const*)",
  "Common::OSDMessageQueue::~OSDMessageQueue()",
  "Common::OSDMessageQueue::pollEvent(Common::Event&)",
  "Common::FSDirectory::listMatchingMembers(Common::List<Common::SharedPtr<Common::ArchiveMember>>&, Common::Path const&) const",
  "Common::FSNode::getName() const",
  "Common::ReadStream::readStream(unsigned int) [func] check if import can change state Common::SeekableSubReadStream::SeekableSubReadStream(Common::SeekableReadStream*, unsigned int, unsigned int, DisposeAfterUse::Flag).1",
  "Common::SeekableReadStream::readLine(char*, unsigned long, bool)",
  "Common::SafeSeekableSubReadStream::read(void*, unsigned int)",
  "Common::ReadStream::readString(char, unsigned long)",
  "Common::SubReadStream::eos() const",
  "Common::SeekableSubReadStream::~SeekableSubReadStream()",
  "Common::SubReadStream::clearErr()",
  "Common::SeekableSubReadStream::~SeekableSubReadStream().1",
  "virtual thunk to Common::SeekableSubReadStream::~SeekableSubReadStream()",
  "virtual thunk to Common::SeekableSubReadStream::~SeekableSubReadStream().1",
  "Common::SafeSeekableSubReadStream::~SafeSeekableSubReadStream()",
  "Common::SafeSeekableSubReadStream::~SafeSeekableSubReadStream().1",
  "virtual thunk to Common::SafeSeekableSubReadStream::~SafeSeekableSubReadStream()",
  "virtual thunk to Common::SafeSeekableSubReadStream::~SafeSeekableSubReadStream().1",
  "OSystem::~OSystem()",
  "OSystem::initBackend()",
  "OSystem::destroy()",
  "OSystem::setGraphicsMode(char const*)",
  "OSystem::fatalError()",
  "OSystem::setStretchMode(char const*)",
  "OSystem::createConfigWriteStream()",
  "Common::MemoryReadStream::~MemoryReadStream().1",
  "Common::SubReadStream::~SubReadStream().1",
  "Common::SubReadStream::read(void*, unsigned int)",
  "Common::TTSVoice::~TTSVoice()",
  "error(char const*, ...)",
  "Common::TextToSpeechManager::popState()",
  "Common::TextToSpeechManager::pushState()",
  "Common::SeekableSubReadStream::seek(long long, int)",
  "Common::SubReadStream::~SubReadStream()",
  "Common::TranslationManager::openTranslationsFile(Common::FSNode const&, Common::File&, int)",
  "Common::TranslationManager::setLanguage(Common::String const&)",
  "warning(char const*, ...)",
  "Common::GzioReadStream::~GzioReadStream().1",
  "Common::GzioReadStream::~GzioReadStream()",
  "unzlocal_GetCurrentFileInfoInternal(void*, unz_file_info*, unz_file_info_internal*, char*, unsigned long, void*, unsigned long, char*, unsigned long)",
  "unzOpen(Common::SeekableReadStream*)",
  "Common::TranslationManager::TranslationManager(Common::String const&)",
  "Common::ZipArchive::~ZipArchive()",
  "Common::GZipReadStream::~GZipReadStream()",
  "Common::GZipReadStream::~GZipReadStream().1",
  "Common::GZipReadStream::read(void*, unsigned int)",
  "Common::GZipReadStream::seek(long long, int)",
  "Common::GZipWriteStream::~GZipWriteStream()",
  "Common::GZipWriteStream::err() const",
  "Common::GZipWriteStream::clearErr()",
  "Common::GZipWriteStream::write(void const*, unsigned int)",
  "Common::GZipWriteStream::finalize()",
  "Common::makeZipArchive(Common::FSNode const&)",
  "Common::ZipArchive::readContentsForPath(Common::String const&) const",
  "Common::INIFile::loadFromStream(Common::SeekableReadStream&)",
  "Common::TranslationManager::openTranslationsFile(Common::File&)",
  "Common::INIFile::saveToSaveFile(Common::String const&)",
  "Common::QuickTimeParser::~QuickTimeParser()",
  "Common::QuickTimeParser::readDefault(Common::QuickTimeParser::Atom)",
  "Common::QuickTimeParser::readLeaf(Common::QuickTimeParser::Atom)",
  "Common::QuickTimeParser::readHDLR(Common::QuickTimeParser::Atom)",
  "Common::GzioReadStream::readAtOffset(long long, unsigned char*, unsigned int)",
  "Common::QuickTimeParser::readELST(Common::QuickTimeParser::Atom)",
  "Common::QuickTimeParser::readSTCO(Common::QuickTimeParser::Atom)",
  "Common::QuickTimeParser::readSTSC(Common::QuickTimeParser::Atom)",
  "Common::QuickTimeParser::readMVHD(Common::QuickTimeParser::Atom)",
  "Common::QuickTimeParser::readSTSS(Common::QuickTimeParser::Atom)",
  "Common::QuickTimeParser::readSTSD(Common::QuickTimeParser::Atom)",
  "Common::QuickTimeParser::readSTTS(Common::QuickTimeParser::Atom)",
  "Common::QuickTimeParser::readSTSZ(Common::QuickTimeParser::Atom)",
  "Common::QuickTimeParser::readTKHD(Common::QuickTimeParser::Atom)",
  "Common::QuickTimeParser::readWAVE(Common::QuickTimeParser::Atom)",
  "Common::QuickTimeParser::readESDS(Common::QuickTimeParser::Atom)",
  "Common::QuickTimeParser::SampleDesc::~SampleDesc()",
  "Common::QuickTimeParser::SampleDesc::~SampleDesc().1",
  "Common::QuickTimeParser::Track::~Track()",
  "Common::WinResources::loadFromEXE(Common::String const&)",
  "Common::readMP4Desc(Common::SeekableReadStream*, unsigned char&, int&)",
  "Common::WinResources::loadFromCompressedEXE(Common::String const&)",
  "Common::WinResources::VersionInfo::readVSVersionInfo(Common::SeekableReadStream*)",
  "Common::WinResources::getResource(Common::WinResourceID const&, Common::WinResourceID const&, Common::WinResourceID const&)",
  "Common::NEResources::clear()",
  "Common::NEResources::~NEResources()",
  "Common::NEResources::loadString(unsigned int)",
  "Common::NEResources::parseVersionInfo(Common::SeekableReadStream*)",
  "Common::NEResources::getResource(Common::WinResourceID const&, Common::WinResourceID const&)",
  "Common::PEResources::loadFromEXE(Common::SeekableReadStream*, DisposeAfterUse::Flag)",
  "Common::PEResources::parseResourceLevel(Common::PEResources::Section&, unsigned int, int)",
  "Common::PEResources::getResource(Common::WinResourceID const&, Common::WinResourceID const&, Common::WinResourceID const&)",
  "Common::PEResources::loadString(unsigned int)",
  "Common::PEResources::getResource(Common::WinResourceID const&, Common::WinResourceID const&)",
  "Common::PEResources::parseVersionInfo(Common::SeekableReadStream*)",
  "Common::XMLParser::~XMLParser()",
  "Common::XMLParser::parserError(Common::String const&)",
  "Common::XMLParser::closeKey()",
  "Common::XMLParser::parse()",
  "MT32Emu::Partial::deactivate()",
  "MT32Emu::Partial::startPartial(MT32Emu::Part const*, MT32Emu::Poly*, MT32Emu::PatchCache const*, MT32Emu::MemParams::RhythmTemp const*, MT32Emu::Partial*)",
  "MT32Emu::Poly::noteOff(bool)",
  "MT32Emu::Poly::startDecay()",
  "MT32Emu::Poly::stopPedalHold()",
  "MT32Emu::Part::refresh()",
  "MT32Emu::Part::setProgram(unsigned int)",
  "MT32Emu::RhythmPart::noteOn(unsigned int, unsigned int)",
  "Common::NEResources::loadFromEXE(Common::SeekableReadStream*, DisposeAfterUse::Flag)",
  "MT32Emu::BReverbModelImpl<short>::close()",
  "MT32Emu::BReverbModelImpl<short>::open()",
  "MT32Emu::BReverbModelImpl<short>::isActive() const",
  "MT32Emu::BReverbModelImpl<float>::open()",
  "MT32Emu::BReverbModelImpl<float>::process(float const*, float const*, float*, float*, unsigned int)",
  "MT32Emu::BReverbModelImpl<float>::isActive() const",
  "MT32Emu::AbstractFile::getSHA1()",
  "MT32Emu::BReverbModelImpl<short>::setParameters(unsigned char, unsigned char)",
  "MT32Emu::ROMImage::ROMImage(MT32Emu::File*, bool, MT32Emu::ROMInfo const* const*)",
  "MT32Emu::ROMImage::~ROMImage()",
  "MT32Emu::AnalogImpl<int>::process(short*, short const*, short const*, short const*, short const*, short const*, short const*, unsigned int)",
  "MT32Emu::AccurateLowPassFilter::process(float)",
  "MT32Emu::AnalogImpl<float>::process(float*, float const*, float const*, float const*, float const*, float const*, float const*, unsigned int)",
  "MT32Emu::AccurateLowPassFilter::process(int)",
  "MT32Emu::Part::refreshTimbre(unsigned int)",
  "MT32Emu::AnalogImpl<int>::~AnalogImpl().1",
  "MT32Emu::AnalogImpl<float>::~AnalogImpl()",
  "MT32Emu::AnalogImpl<float>::~AnalogImpl().1",
  "MT32Emu::Part::playPoly(MT32Emu::PatchCache const*, MT32Emu::MemParams::RhythmTemp const*, unsigned int, unsigned int, unsigned int)",
  "MT32Emu::Synth::setReverbOutputGain(float)",
  "MT32Emu::Synth::printDebug(char const*, ...)",
  "MT32Emu::Synth::refreshSystemReverbParameters()",
  "MT32Emu::Synth::dispose()",
  "MT32Emu::Synth::playMsg(unsigned int, unsigned int)",
  "MT32Emu::Synth::reset()",
  "MT32Emu::RendererImpl<short>::doRender(short*, unsigned int)",
  "MT32Emu::AnalogImpl<int>::getDACStreamsLength(unsigned int) const",
  "MT32Emu::Synth::writeSysex(unsigned char, unsigned char const*, unsigned int)",
  "MT32Emu::Synth::render(short*, unsigned int)",
  "MT32Emu::Synth::render(float*, unsigned int)",
  "MT32Emu::DefaultMidiStreamParser::handleShortMessage(unsigned int)",
  "MT32Emu::RendererImpl<float>::doRenderStreams(MT32Emu::DACOutputStreams<float> const&, unsigned int)",
  "MT32Emu::DefaultMidiStreamParser::handleSysex(unsigned char const*, unsigned int)",
  "non-virtual thunk to MT32Emu::DefaultMidiStreamParser::handleSysex(unsigned char const*, unsigned int)",
  "MT32Emu::DefaultMidiStreamParser::handleSystemRealtimeMessage(unsigned char)",
  "non-virtual thunk to MT32Emu::DefaultMidiStreamParser::handleSystemRealtimeMessage(unsigned char)",
  "mt32emu_free_context",
  "MT32Emu::replaceOrMergeROMImage(MT32Emu::ROMImage const*&, MT32Emu::ROMImage const*, MT32Emu::MachineConfiguration const*, mt32emu_return_code, mt32emu_return_code)",
  "MT32Emu::DelegatingReportHandlerAdapter::printDebug(char const*, void*)",
  "MT32Emu::DelegatingReportHandlerAdapter::onErrorPCMROM()",
  "MT32Emu::DelegatingReportHandlerAdapter::onErrorControlROM()",
  "MT32Emu::DelegatingReportHandlerAdapter::showLCDMessage(char const*)",
  "MT32Emu::DelegatingReportHandlerAdapter::onMIDIMessagePlayed()",
  "MT32Emu::DelegatingReportHandlerAdapter::onMIDIQueueOverflow()",
  "MT32Emu::DelegatingReportHandlerAdapter::onDeviceReconfig()",
  "MT32Emu::DelegatingReportHandlerAdapter::onNewReverbTime(unsigned char)",
  "MT32Emu::DelegatingReportHandlerAdapter::onNewReverbLevel(unsigned char)",
  "MT32Emu::DelegatingReportHandlerAdapter::onPolyStateChanged(unsigned char)",
  "MT32Emu::DelegatingReportHandlerAdapter::onProgramChanged(unsigned char, char const*, char const*)",
  "MT32Emu::DelegatingReportHandlerAdapter::onLCDStateUpdated()",
  "MT32Emu::DelegatingReportHandlerAdapter::onMidiMessageLEDStateUpdated(bool)",
  "MT32Emu::RendererImpl<short>::doRenderStreams(MT32Emu::DACOutputStreams<short> const&, unsigned int)",
  "SRCTools::ResamplerModel::CascadeStage::getOutputSamples(float*, unsigned int)",
  "SRCTools::ResamplerModel::InternalResamplerCascadeStage::~InternalResamplerCascadeStage()",
  "SRCTools::ResamplerModel::InternalResamplerCascadeStage::~InternalResamplerCascadeStage().1",
  "MT32Emu::Synth::writeSysexGlobal(unsigned int, unsigned char const*, unsigned int)",
  "png_error",
  "png_destroy_png_struct",
  "png_calloc",
  "png_malloc_base",
  "png_malloc_warn",
  "png_read_data",
  "png_realloc_array",
  "MT32Emu::DelegatingReportHandlerAdapter::onMIDISystemRealtime(unsigned char)",
  "png_read_row",
  "png_write_data",
  "deflateInit2_",
  "deflateEnd",
  "deflate",
  "inflateReset2",
  "png_malloc",
  "inflateEnd",
  "FT_Get_Advance",
  "af_latin_metrics_init",
  "af_glyph_hints_done",
  "inflate",
  "af_cjk_metrics_init_widths",
  "af_cjk_metrics_init",
  "af_indic_metrics_init",
  "af_face_globals_free",
  "af_face_globals_new",
  "af_autofitter_load_glyph",
  "cff_get_interface",
  "inflateInit2_",
  "FT_GlyphLoader_CheckPoints",
  "cff_index_init",
  "cff_index_get_pointers",
  "cff_index_get_sid_string",
  "cff_size_init",
  "cff_face_done",
  "cff_size_done",
  "cff_slot_init",
  "cff_face_init",
  "cff_get_kerning",
  "cff_glyph_load",
  "cff_get_advances",
  "cff_cmap_unicode_done",
  "cff_cmap_unicode_char_index",
  "cff_cmap_unicode_char_next",
  "cff_get_ps_name",
  "cff_ps_get_font_info",
  "cff_get_name_index",
  "cff_get_cmap_info",
  "cff_get_ros",
  "cf2_glyphpath_lineTo",
  "cf2_glyphpath_curveTo",
  "cf2_freeSeacComponent",
  "cf2_getSeacComponent",
  "cf2_glyphpath_pushPrevElem",
  "cff_parser_run",
  "bdf_free_font",
  "BDF_Face_Init",
  "BDF_Face_Done",
  "_bdf_parse_start",
  "_bdf_add_property",
  "cf2_interpT2CharString",
  "hash_insert",
  "_bdf_parse_glyphs",
  "FT_Stream_Free",
  "cff_size_select",
  "FT_Stream_New",
  "ft_glyphslot_set_bitmap",
  "FT_New_GlyphSlot",
  "FT_Render_Glyph",
  "ft_glyphslot_done",
  "open_face",
  "FT_Open_Face",
  "FT_Load_Glyph",
  "FT_Done_Face",
  "FT_New_Size",
  "destroy_face",
  "open_face_from_buffer",
  "destroy_size",
  "FT_Done_Size",
  "FT_Select_Size",
  "FT_Request_Size",
  "FT_CMap_New",
  "FT_Get_Next_Char",
  "IsMacResource",
  "FT_Add_Module",
  "ft_module_get_service",
  "FT_Outline_Decompose",
  "FT_Raccess_Get_DataOffsets",
  "raccess_guess_darwin_ufs_export",
  "raccess_guess_linux_netatalk",
  "FT_Stream_Read",
  "FT_Stream_Skip",
  "ft_glyphslot_alloc_bitmap",
  "FT_Stream_ReleaseFrame",
  "FT_Stream_ExitFrame",
  "FT_Stream_EnterFrame",
  "Z_FT_Stream_ReadCharZ_iiiraccess_guess_linux_double",
  "FT_Stream_ReadUShort",
  "FT_Stream_ReadChar",
  "FT_Stream_ReadULong",
  "FT_Stream_ReadULongLE",
  "FT_Stream_ReadAt",
  "ft_mem_qalloc",
  "ft_mem_realloc",
  "ft_mem_qrealloc",
  "[func] check if import can change state ft_mem_allocft_mem_strdup",
  "ft_mem_strdup",
  "FT_List_Finalize",
  "FT_Stream_TryRead",
  "ft_gzip_file_io",
  "inflateInit2_.1",
  "ft_gzip_stream_close",
  "ft_gzip_file_fill_output",
  "FT_Stream_ReadFields",
  "inflate_flush",
  "ft_lzw_stream_close",
  "FT_Stream_ReadUShortLE",
  "inflateEnd.1",
  "PCF_Face_Init",
  "PCF_Face_Done",
  "inflate.1",
  "pfr_slot_done",
  "pfr_face_done",
  "pfr_face_init",
  "ps_table_new",
  "ps_table_done",
  "ps_table_add",
  "pfr_extra_item_load_kerning_pairs",
  "ps_parser_load_field",
  "afm_parser_done",
  "t1_cmap_std_char_index",
  "afm_parser_read_vals",
  "afm_parser_parse",
  "t1_cmap_unicode_char_indexZ_t1_cmap_unicode_char_nextZ_iiips_table_releaseZ_t1_decoder_parse_charstringsZ_iiii",
  "t1_cmap_unicode_char_next",
  "t1_cmap_unicode_init",
  "t1_decoder_parse_charstrings",
  "psh_globals_destroy",
  "ps_dimension_done",
  "ps_unicodes_init",
  "ft_black_done",
  "ft_raster1_init",
  "ft_raster1_set_mode",
  "ft_raster1_render",
  "Bezier_Up",
  "Render_Single_Pass",
  "tt_cmap14_done",
  "tt_cmap14_char_var_index",
  "sfnt_done_faceZ_tt_face_get_nameZ_iiii",
  "tt_face_load_cmap",
  "tt_face_load_head",
  "tt_face_load_post",
  "tt_face_load_name",
  "",
  "tt_face_load_pclt",
  "tt_face_free_name",
  "tt_face_load_bhed",
  "tt_face_load_kern",
  "tt_face_free_ps_names",
  "load_post_names",
  "tt_face_load_hmtx",
  "tt_sbit_decoder_load_image",
  "tt_face_load_strike_metrics",
  "sfnt_get_ps_name",
  "tt_get_cmap_info",
  "tt_face_load_sbit",
  "gray_hline",
  "ft_smooth_render_generic",
  "gray_raster_render",
  "tt_get_interface",
  "tt_face_load_cvt",
  "tt_face_done",
  "tt_size_done_bytecode",
  "tt_size_run_prep",
  "tt_glyphzone_done",
  "tt_get_advances",
  "tt_size_request",
  "load_truetype_glyph",
  "tt_glyph_load",
  "Ins_DELTAP",
  "Compute_Point_Displacement",
  "TT_Set_MM_Blend",
  "tt_face_vary_cvt",
  "TT_Set_Var_Design",
  "ft_var_readpackeddeltas",
  "tt_get_metrics",
  "TT_Get_MM_Var",
  "TT_Hint_Glyph",
  "TT_Vary_Apply_Glyph_Deltas",
  "T1_Parse_Glyph",
  "parse_dict",
  "T1_Parse_Glyph_And_Get_Char_String",
  "T1_Face_Done",
  "T1_Size_Done",
  "T1_Done_Blend T1_GlyphSlot_Init",
  "T1_Size_Init",
  "T1_Load_Glyph",
  "T1_Get_Advances",
  "T1_Size_Request",
  "TT_RunIns",
  "T1_Face_Init",
  "t1_parse_font_matrix",
  "parse_blend_design_positions",
  "parse_subrs",
  "parse_charstrings",
  "parse_blend_axis_types",
  "parse_encoding",
  "parse_blend_design_map",
  "parse_buildchar",
  "parse_weight_vector",
  "cid_size_init",
  "cid_slot_init",
  "cid_face_done",
  "cid_face_init",
  "parse_expansion_factor",
  "cid_slot_load_glyph[func] check if import can change state",
  "cid_load_glyph",
  "T42_GlyphSlot_Done",
  "T42_GlyphSlot_Load",
  "parse_fd_array",
  "FNT_Face_Done",
  "t42_parse_sfnts",
  "t42_parse_charstrings",
  "T42_Face_Done",
  "jpeg_abort",
  "finish_input_pass",
  "reset_input_controller",
  "T42_Face_Init",
  "jpeg_resync_to_restart",
  "start_input_pass",
  "consume_markers",
  "next_marker",
  "skip_variable",
  "FNT_Face_Init",
  "get_interesting_appn",
  "get_sof",
  "build_ycc_rgb_table",
  "read_restart_marker",
  "start_pass.1",
  "read_markers",
  "decode_mcu_AC_first",
  "decode_mcu_AC_refine",
  "start_pass",
  "process_restart",
  "decode_mcu",
  "start_pass_huff_decoder",
  "decode_mcu_DC_refine.1",
  "arith_decode",
  "jpeg_make_d_derived_tbl",
  "jpeg_fill_bit_buffer",
  "decode_mcu_sub",
  "start_output_pass",
  "decode_mcu_AC_first.1",
  "consume_data",
  "decompress_onepass",
  "decode_mcu.1",
  "process_data_crank_post",
  "process_data_simple_main",
  "process_data_context_main",
  "start_pass_main",
  "decompress_data",
  "finish_output_pass",
  "merged_2v_upsample",
  "prepare_for_output_pass",
  "post_process_1pass",
  "merged_1v_upsample",
  "start_pass_dpost",
  "post_process_prepass",
  "output_message",
  "emit_message",
  "error_exit",
  "free_pool",
  "realize_virt_arrays",
  "request_virt_sarray",
  "access_virt_barray",
  "alloc_large",
  "new_color_map_1_quant",
  "alloc_barray",
  "alloc_small",
  "access_virt_sarray",
  "start_pass_1_quant",
  "start_pass_2_quant",
  "finish_pass1",
  "create_colorindex",
  "add_audio_device",
  "SDL_OpenedAudioDeviceDisconnected",
  "SDL_PromptAssertion",
  "SDL_AudioQuit",
  "init_error_limit",
  "close_audio_device",
  "SDL_CaptureAudio",
  "SDL_RunAudio",
  "SDL_Convert_Byteswap",
  "open_audio_device",
  "SDL_PauseAudio",
  "SDL_ConvertStereoToMono",
  "SDL_FreeAudioStream",
  "SDL_AudioStreamPutInternal",
  "SDL_ConvertMonoToStereo",
  "SDL_AudioStreamClear",
  "SDL_ConvertMonoTo41",
  "SDL_ConvertMonoToQuad",
  "SDL_ConvertMonoTo61",
  "SDL_ConvertStereoTo21",
  "SDL_ConvertMonoTo51",
  "SDL_ConvertStereoTo71",
  "SDL_ConvertStereoTo61",
  "SDL_ConvertMonoTo21",
  "SDL_Convert21ToStereo",
  "SDL_ConvertMonoTo71",
  "SDL_Convert21To61",
  "SDL_Convert21ToQuad",
  "SDL_ConvertQuadToStereo",
  "SDL_Convert21To41",
  "SDL_Convert21To71",
  "SDL_ConvertQuadTo51",
  "SDL_ConvertQuadTo41",
  "SDL_ConvertQuadTo61",
  "SDL_Convert41ToStereo",
  "SDL_ConvertStereoTo51",
  "SDL_Convert41ToMono",
  "SDL_Convert41To21",
  "SDL_Convert51ToStereo",
  "SDL_Convert51ToQuad",
  "SDL_Convert41To61",
  "SDL_Convert41To71",
  "SDL_Convert51To61",
  "SDL_Convert51To41",
  "SDL_Convert61ToMono",
  "SDL_Convert51To71",
  "SDL_Convert61ToQuad",
  "SDL_Convert61To21",
  "SDL_Convert71To21",
  "SDL_Convert71ToQuad",
  "SDL_Convert71To41",
  "SDL_Convert71To51",
  "SDL_Convert71To61",
  "SDL_Convert71ToMono",
  "SDL_Convert_U8_to_F32_Scalar",
  "SDL_Convert_S8_to_F32_Scalar",
  "SDL_Convert_S16_to_F32_Scalar",
  "SDL_Convert_U16_to_F32_Scalar",
  "SDL_Convert61ToStereo",
  "SDL_Convert_F32_to_S8_Scalar",
  "SDL_Convert_F32_to_U8_Scalar",
  "SDL_Convert_F32_to_S16_Scalar",
  "SDL_Convert_F32_to_U16_Scalar",
  "SDL_GetClipboardText",
  "SDL_Convert61To71",
  "SDL_ResampleCVT",
  "SDL_NewDataQueue",
  "SDL_Convert_F32_to_S32_Scalar",
  "DISKAUDIO_CloseDevice",
  "SDL_Convert_S32_to_F32_Scalar",
  "SDL_Convert51ToMono",
  "HandleAudioProcess",
  "SDL_SetError",
  "DISKAUDIO_PlayDevice",
  "SDL_PumpEventsInternal",
  "SDL_PushEvent",
  "SDL_FilterEvents",
  "SDL_EventState",
  "SDL_FillRects",
  "SDL_PrivateAddMappingForGUID",
  "SDL_LoadVIDPIDListFromHint",
  "SDL_PrivateGameControllerAddMapping",
  "SDL_GameControllerEventWatcher",
  "SDL_GameControllerClose",
  "SDL_SetHint",
  "SDL_DelHintCallback",
  "SDL_AddHintCallback",
  "SDL_GameControllerAddMappingsFromRWZ_SDL_PrivateGetControllerMappingZ_ii",
  "SDL_JoystickClose",
  "SDL_JoystickOpen",
  "SDL_JoystickGetDeviceIndexFromInstanceID",
  "SDL_PeepEventsInternal",
  "SDL_SetKeyboardFocus",
  "SDL_LogMessageV",
  "UpdateEventsForDeviceRemoval.1",
  "SDL_calloc",
  "SDL_PrivateGetControllerMapping",
  "SDL_realloc",
  "SDL_UpdateMouseCapture",
  "SDL_SetMouseFocus",
  "SDL_UpdateMouseFocus",
  "SDL_ShowCursor",
  "SDL_SetRelativeMouseMode",
  "SDL_ListRemove",
  "SDL_WarpMouseInWindow",
  "SDL_SIMDAlloc",
  "SDL_PrivateSendMouseMotion",
  "SDL_UnRLESurface",
  "SDL_RLESurface",
  "SDL_MouseQuit",
  "SDL_SoftBlit",
  "SDL_FreeFormat",
  "SDL_AllocFormat",
  "SDL_SetPixelFormatPalette",
  "SDL_InvalidateMap",
  "SDL_GetRendererOutputSize",
  "QueueCmdSetViewport",
  "SDL_CreateRenderer",
  "SDL_MapSurface",
  "[func] check if import can change state SDL_RendererEventWatch",
  "SDL_DestroyTexture",
  "SDL_SetRenderTarget",
  "SDL_LockTexture",
  "SDL_UnlockTexture",
  "FlushRenderCommandsIfTextureNeeded",
  "[func] check if import can change state SDL_DestroyRendererSDL_GetBlendModeSrcColorFactor",
  "GLES2_SetRenderTarget",
  "GLES2_SetTextureScaleMode",
  "GLES2_UpdateTextureNV",
  "GLES2_CreateRenderer",
  "GLES2_UpdateTextureYUV",
  "SDL_UpdateTexture",
  "GLES2_UpdateTexture",
  "SDL_CreateTexture",
  "GLES2_WindowEvent",
  "GLES2_CreateTexture",
  "GLES2_BindTexture",
  "GLES2_DestroyRenderer",
  "GLES2_DestroyTexture",
  "GLES2_TexSubImage2D",
  "GLES2_RunCommandQueue",
  "GLES2_RenderReadPixels",
  "SetDrawState",
  "SW_DestroyRenderer",
  "SW_RenderPresent",
  "SW_CreateRenderer",
  "SDL_RWFromFile",
  "stdio_close",
  "stdio_size",
  "SDL_SensorClose",
  "SDL_SensorUpdate",
  "SDL_strdup",
  "SDL_CreateRGBSurfaceWithFormat",
  "SDL_FreeSurface",
  "SDL_UpperBlit",
  "SW_RunCommandQueue",
  "SDL_PrivateUpperBlitScaled",
  "EMSCRIPTEN_JoystickQuit",
  "SDL_ConvertSurface",
  "Emscripten_JoyStickDisconnected",
  "SDL_ConvertPixels",
  "Emscripten_JoyStickConnected",
  "SDL_TLSSet",
  "SDL_Emscripten_TimerHelper",
  "SDL_GetTouch",
  "SDL_AddTouch",
  "SDL_EGL_HasExtension",
  "SDL_EGL_UnloadLibrary",
  "SDL_TouchQuit",
  "SDL_SendTouch",
  "SDL_EGL_MakeCurrent",
  "SDL_EGL_DeleteContext",
  "SDL_EGL_PrivateChooseConfig",
  "SDL_EGL_GetProcAddress",
  "Emscripten_GLES_CreateContext",
  "Emscripten_FreeCursor",
  "Emscripten_CreateCursor",
  "SDL_EGL_SetSwapInterval",
  "Emscripten_HandleWheel",
  "Emscripten_DestroyWindow",
  "Emscripten_VideoInit",
  "SDL_GetDisplayBounds",
  "SDL_DestroyWindow",
  "Emscripten_DeleteDevice",
  "SDL_SetDisplayModeForDisplay",
  "SDL_SetWindowTitle",
  "SDL_GetWindowDisplayIndex",
  "SDL_FinishWindowCreation",
  "SDL_GL_MakeCurrent",
  "SDL_GetClosestDisplayModeForDisplay",
  "SDL_UpdateWindowGrab",
  "SDL_MinimizeWindow",
  "Emscripten_CreateWindow",
  "SDL_SetWindowData",
  "SDL_CreateWindow",
  "SDL_RecreateWindow",
  "SDL_UpdateFullscreenMode",
  "SDL_SetWindowMouseRect",
  "SDL_EnableScreenSaver",
  "SDL_GetWindowSurface",
  "SDL_GL_GetDrawableSize",
  "SDL_GL_DeleteContext",
  "SDL_GL_GetProcAddress",
  "SDL_GL_SwapWindow",
  "",
  "SDL_SendWindowEvent",
  "SDL_GL_GetSwapInterval",
  "SDL_ConvertPixels_SplitNV_to_UVPlanes",
  "SDL_ConvertPixels_PackUVPlanes_to_NV",
  "SDL_ConvertPixels_SwapUVPlanes",
  "fclose",
  "__overflow",
  "__toread",
  "fflush",
  "__fseeko_unlocked",
  "fread",
  "__ftello_unlocked",
  "wrapper_cmp",
  "__fwritex",
  "__vfprintf_internal",
  "__shgetc",
  "printf_core",
  "pop_arg",
  "SDL_ConvertPixels_YUV_to_RGB",
  "Z_operatorZ5C20newZ5C28unsignedZ5C20longZ5C29Z_ii__dynamic_cast",
  "operator new(unsigned long)",
  "__cxxabiv1::__si_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const",
  "__cxxabiv1::__base_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const",
  "__cxxabiv1::__base_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, void const*, void const*, int, bool) const",
  "__cxxabiv1::__base_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int, bool) const",
  "dynCall_ii",
  "dynCall_vi",
  "dynCall_vii",
  "dynCall_viii",
  "dynCall_viiiii",
  "dynCall_viiii",
  "dynCall_viiiiiiiii",
  "dynCall_iiii",
  "dynCall_iiiii",
  "dynCall_v",
  "dynCall_viiiiiii",
  "dynCall_fi",
  "dynCall_viiiiii",
  "dynCall_iiiiiiii",
  "dynCall_iiiiiii",
  "dynCall_iiiiii",
  "dynCall_viffff",
  "dynCall_viiiiiiii",
  "dynCall_viiiiiiiiiiii",
  "dynCall_viiiiiiiiii",
  "dynCall_viiiiiiiiiii",
  "dynCall_fif",
  "dynCall_vif",
  "dynCall_vifi",
  "dynCall_iiiiiiiiii",
  "dynCall_iiiiiiiiiiiiiiff",
  "dynCall_iiiiiiiii",
  "dynCall_i",
  "dynCall_vffff",
  "dynCall_vf",
  "dynCall_vff",
  "dynCall_vfi",
  "dynCall_viif",
  "dynCall_viff",
  "dynCall_vifff",
  "dynCall_iidiiii",
  "legalstub$dynCall_ji",
  "legalstub$dynCall_iiji",
  "__cxxabiv1::__class_type_info::can_catch(__cxxabiv1::__shim_type_info const*, void*&) const",
  "legalstub$dynCall_jiji",
  "byn-split-outlined-A$FT_Remove_Module",
  "dynCall_iii",
  "dynCall_iiiiiidiiff",
  "png_create_png_struct",
  "SDL_Delay",
  "Emscripten_UpdateWindowFramebuffer",
  "DefaultSaveFileManager::~DefaultSaveFileManager()",
  "DefaultSaveFileManager::~DefaultSaveFileManager().1",
  "Scumm::ScummDiskImage::open(Common::Path const&)",
  "OSystem_SDL::~OSystem_SDL().1",
  "non-virtual thunk to OSystem_SDL::~OSystem_SDL()",
  "virtual thunk to OSystem_SDL::~OSystem_SDL()",
  "OSystem_SDL::~OSystem_SDL().2",
  "non-virtual thunk to OSystem_SDL::~OSystem_SDL().1",
  "virtual thunk to OSystem_SDL::~OSystem_SDL().1",
  "OSystem_POSIX::~OSystem_POSIX()",
  "OSystem_POSIX::~OSystem_POSIX().1",
  "non-virtual thunk to OSystem_POSIX::~OSystem_POSIX()",
  "non-virtual thunk to OSystem_POSIX::~OSystem_POSIX().1",
  "virtual thunk to OSystem_POSIX::~OSystem_POSIX()",
  "virtual thunk to OSystem_POSIX::~OSystem_POSIX().1",
  "OSystem_Emscripten::~OSystem_Emscripten()",
  "OSystem_Emscripten::~OSystem_Emscripten().1",
  "non-virtual thunk to OSystem_Emscripten::~OSystem_Emscripten()",
  "non-virtual thunk to OSystem_Emscripten::~OSystem_Emscripten().1",
  "virtual thunk to OSystem_Emscripten::~OSystem_Emscripten()",
  "virtual thunk to OSystem_Emscripten::~OSystem_Emscripten().1",
  "OSystem_POSIX::init()",
  "virtual thunk to OSystem_POSIX::init()",
  "OSystem_POSIX::hasFeature(OSystem::Feature)",
  "non-virtual thunk to OSystem_POSIX::hasFeature(OSystem::Feature)",
  "virtual thunk to OSystem_POSIX::hasFeature(OSystem::Feature)",
  "virtual thunk to OSystem_SDL::initBackend()",
  "OSystem_POSIX::initBackend()",
  "virtual thunk to OSystem_POSIX::initBackend()",
  "virtual thunk to OSystem_SDL::addSysArchivesToSearchSet(Common::SearchSet&, int)",
  "non-virtual thunk to OSystem_SDL::setGraphicsMode(int, unsigned int)",
  "virtual thunk to OSystem_SDL::setGraphicsMode(int, unsigned int)",
  "SdlGraphicsManager::createOrUpdateWindow(int, int, unsigned int)",
  "virtual thunk to OSystem_POSIX::addSysArchivesToSearchSet(Common::SearchSet&, int)",
  "GUI::SaveLoadChooserSimple::close()",
  "GUI::SaveLoadChooserDialog::~SaveLoadChooserDialog().1",
  "GUI::SaveLoadChooserSimple::~SaveLoadChooserSimple()",
  "PluginManager::~PluginManager().1",
  "Base::findGameMatchingName(Common::String const&)",
  "GUI::generateEntries(Common::HashMap<Common::String, Common::ConfigManager::Domain, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::HashMap<Common::String, Common::String, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&)",
  "SurfaceSdlGraphicsManager::getDefaultScaler() const",
  "MohawkMetaEngineDetection::toDetectedGame(ADDetectedGame const&, ADDetectedGameExtraInfo*) const",
  "AdvancedMetaEngineDetection::detectGameFilebased(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, ADFileBasedFallback const*) const",
  "MainMenuDialog::~MainMenuDialog().1",
  "GUI::Debugger::preEnter()",
  "Common::Array<SaveStateDescriptor>::push_back(SaveStateDescriptor const&)",
  "void Common::sort<SaveStateDescriptor*, SaveStateDescriptorSlotComparator>(SaveStateDescriptor*, SaveStateDescriptor*, SaveStateDescriptorSlotComparator)",
  "SaveStateDescriptor::SaveStateDescriptor(MetaEngine const*, int, Common::String const&)",
  "GUI::ConsoleDialog::reflowLayout()",
  "GUI::ConsoleDialog::print(char const*)",
  "GUI::ConsoleDialog::historyScroll(int)",
  "GUI::Debugger::debugPrintf(char const*, ...)",
  "GUI::ConsoleDialog::~ConsoleDialog().1",
  "GUI::ConsoleDialog::drawDialog(GUI::DrawLayer)",
  "GUI::Debugger::debuggerInputCallback(GUI::ConsoleDialog*, char const*, void*)",
  "GUI::Debugger::cmdExecFile(int, char const**)",
  "GUI::Debugger::~Debugger().1",
  "MT32Emu::ScummVMReportHandler::onErrorControlROM()",
  "MT32Emu::ScummVMReportHandler::onErrorPCMROM()",
  "AdvancedMetaEngineDetection::cleanupPirated(Common::Array<ADDetectedGame>&) const",
  "GUI::BrowserDialog::runModal()",
  "GUI::displayErrorDialog(Common::U32String const&)",
  "GUI::SaveLoadChooserDialog::open()",
  "GUI::SaveLoadChooserSimple::open()",
  "GUI::SavenameDialog::open()",
  "GUI::ThemeBrowser::open()",
  "GUI::AboutDialog::close()",
  "GUI::SaveLoadChooserGrid::close()",
  "GUI::UnknownGameDialog::reflowLayout()",
  "GUI::Tooltip::drawDialog(GUI::DrawLayer)",
  "GUI::LauncherDialog::handleKeyDown(Common::KeyState)",
  "GUI::SaveLoadChooserDialog::handleTickle()",
  "GUI::AboutDialog::addLine(Common::U32String const&)",
  "Common::Singleton<GUI::GuiManager>::instance()",
  "GUI::ConsoleDialog::scrollToCurrent()",
  "GUI::ConsoleDialog::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)",
  "GUI::Dialog::Dialog(int, int, int, int)",
  "GUI::Dialog::Dialog(Common::String const&)",
  "GUI::LauncherDialog::createSwitchButton(Common::String const&, Common::U32String const&, Common::U32String const&, char const*, unsigned int)",
  "GUI::GuiObject::resize(int, int, int, int, bool)",
  "GUI::GuiObject::reflowLayout()",
  "GUI::OptionsDialog::setSubtitleSettingsState(bool)",
  "GUI::SaveLoadChooserGrid::handleMouseWheel(int, int, int)",
  "GUI::Widget::setEnabled(bool)",
  "GUI::StaticTextWidget::drawWidget()",
  "GUI::PicButtonWidget::setGfxFromTheme(char const*, int, bool)",
  "GUI::DropdownButtonWidget::DropdownButtonWidget(GUI::GuiObject*, Common::String const&, Common::U32String const&, Common::U32String const&, unsigned int, unsigned char, Common::U32String const&)",
  "GUI::DropdownButtonWidget::reflowLayout()",
  "GUI::PicButtonWidget::drawWidget()",
  "GUI::CheckboxWidget::CheckboxWidget(GUI::GuiObject*, int, int, int, int, Common::U32String const&, Common::U32String const&, unsigned int, unsigned char)",
  "GUI::CheckboxWidget::CheckboxWidget(GUI::GuiObject*, Common::String const&, Common::U32String const&, Common::U32String const&, unsigned int, unsigned char)",
  "GUI::RadiobuttonWidget::RadiobuttonWidget(GUI::GuiObject*, Common::String const&, GUI::RadiobuttonGroup*, int, Common::U32String const&, Common::U32String const&, unsigned char)",
  "GUI::SliderWidget::drawWidget()",
  "GUI::GraphicsWidget::setGfxFromTheme(char const*)",
  "GUI::GraphicsWidget::drawWidget()",
  "GUI::ContainerWidget::drawWidget()",
  "GUI::EditableWidget::EditableWidget(GUI::GuiObject*, Common::String const&, Common::U32String const&, unsigned int)",
  "GUI::EditableWidget::getCaretOffset() const",
  "GUI::EditTextWidget::reflowLayout()",
  "GUI::GridItemWidget::drawWidget()",
  "GUI::GridWidget::calcEntrySizes()",
  "GUI::GridWidget::scrollBarRecalc()",
  "GUI::ListWidget::findItem(int, int) const",
  "GUI::ListWidget::handleMouseMoved(int, int, int)",
  "GUI::ListWidget::drawFormattedText(Common::Rect const&, Common::U32String const&, GUI::ThemeEngine::State, Graphics::TextAlign, GUI::ThemeEngine::TextInversionState, int, bool, GUI::ThemeEngine::FontColor)",
  "GUI::ListWidget::getCaretOffset() const",
  "GUI::PopUpWidget::reflowLayout()",
  "GUI::PopUpWidget::drawWidget()",
  "GUI::ScrollBarWidget::drawWidget()",
  "GUI::TabWidget::recalc()",
  "GUI::TabWidget::TabWidget(GUI::GuiObject*, Common::String const&)",
  "GUI::TabWidget::addTab(Common::U32String const&, Common::String const&, bool)",
  "GUI::TabWidget::drawWidget()",
  "Common::RemapWidget::refreshKeymap()",
  "non-virtual thunk to GUI::GuiManager::~GuiManager()",
  "GUI::GuiManager::~GuiManager().1",
  "non-virtual thunk to GUI::GuiManager::~GuiManager().1",
  "GUI::BrowserDialog::~BrowserDialog().1",
  "GUI::LauncherSimple::~LauncherSimple()",
  "GUI::MessageDialog::MessageDialog(Common::U32String const&, Common::U32String const&, Common::U32String const&, Graphics::TextAlign, char const*, Common::U32String const&)",
  "GUI::MessageDialog::MessageDialog(Common::String const&, Common::String const&, Common::String const&, Graphics::TextAlign, char const*)",
  "GUI::MessageDialog::MessageDialog(Common::U32String const&, Common::U32String const&, Common::Array<Common::U32String> const&, Graphics::TextAlign)",
  "GUI::AboutDialog::~AboutDialog()",
  "GUI::AboutDialog::~AboutDialog().1",
  "GUI::Dialog::~Dialog()",
  "GUI::CountdownMessageDialog::~CountdownMessageDialog()",
  "GUI::CountdownMessageDialog::~CountdownMessageDialog().1",
  "GUI::ThemeBrowser::~ThemeBrowser()",
  "GUI::ThemeBrowser::~ThemeBrowser().1",
  "GUI::Tooltip::~Tooltip()",
  "GUI::Tooltip::~Tooltip().1",
  "GUI::UnknownGameDialog::~UnknownGameDialog()",
  "GUI::UnknownGameDialog::~UnknownGameDialog().1",
  "GUI::GridItemTray::~GridItemTray()",
  "non-virtual thunk to GUI::GridItemTray::~GridItemTray()",
  "non-virtual thunk to GUI::GridItemTray::~GridItemTray().1",
  "GUI::PopUpDialog::~PopUpDialog()",
  "GUI::PopUpDialog::~PopUpDialog().1",
  "GUI::OptionsDialog::OptionsDialog(Common::String const&, Common::String const&)",
  "GUI::ConfigDialog::~ConfigDialog()",
  "GUI::ConfigDialog::~ConfigDialog().1",
  "GUI::EditGameDialog::~EditGameDialog()",
  "GUI::EditGameDialog::setupGraphicsTab()",
  "non-virtual thunk to GUI::GlobalOptionsDialog::~GlobalOptionsDialog()",
  "GUI::GlobalOptionsDialog::~GlobalOptionsDialog().1",
  "non-virtual thunk to GUI::GlobalOptionsDialog::~GlobalOptionsDialog().1",
  "Common::Array<GUI::ExistingSave>::push_back(GUI::ExistingSave const&)",
  "GUI::SaveLoadChooser::runModalWithCurrentTarget()",
  "GUI::SaveLoadChooserGrid::~SaveLoadChooserGrid().1",
  "GUI::ThemeEngine::drawCaret(Common::Rect const&, bool)",
  "GUI::ThemeParser::parserCallback_language(Common::XMLParser::ParserNode*)",
  "GUI::ThemeEngine::drawButton(Common::Rect const&, Common::U32String const&, GUI::ThemeEngine::State, unsigned short)",
  "GUI::ThemeEngine::drawWidgetBackground(Common::Rect const&, GUI::ThemeEngine::WidgetBackground)",
  "GUI::ThemeEngine::drawDialogBackground(Common::Rect const&, GUI::ThemeEngine::DialogBackground)",
  "GUI::ThemeEngine::drawText(Common::Rect const&, Common::U32String const&, GUI::ThemeEngine::State, Graphics::TextAlign, GUI::ThemeEngine::TextInversionState, int, bool, GUI::ThemeEngine::FontStyle, GUI::ThemeEngine::FontColor, bool, Common::Rect const&)",
  "GUI::ThemeEngine::unloadTheme()",
  "GUI::ThemeEval::getWidgetData(Common::String const&, short&, short&, short&, short&)",
  "GUI::PopUpWidget::PopUpWidget(GUI::GuiObject*, Common::String const&, Common::U32String const&, unsigned int)",
  "GUI::ScrollContainerWidget::ScrollContainerWidget(GUI::GuiObject*, Common::String const&, Common::String const&, unsigned int)",
  "GUI::EditableWidget::~EditableWidget()",
  "GUI::PopUpWidget::~PopUpWidget()",
  "GUI::PopUpWidget::~PopUpWidget().1",
  "non-virtual thunk to GUI::PopUpWidget::~PopUpWidget()",
  "non-virtual thunk to GUI::PopUpWidget::~PopUpWidget().1",
  "GUI::ScrollBarWidget::~ScrollBarWidget()",
  "GUI::ScrollBarWidget::~ScrollBarWidget().1",
  "non-virtual thunk to GUI::ScrollBarWidget::~ScrollBarWidget()",
  "non-virtual thunk to GUI::ScrollBarWidget::~ScrollBarWidget().1",
  "GUI::ScrollContainerWidget::~ScrollContainerWidget()",
  "GUI::TabWidget::findWidget(int, int)",
  "GUI::StaticTextWidget::handleMouseEntered(int)",
  "GUI::PopUpDialog::handleMouseMoved(int, int, int)",
  "GUI::TabWidget::handleMouseMoved(int, int, int)",
  "GUI::ButtonWidget::ButtonWidget(GUI::GuiObject*, int, int, int, int, Common::U32String const&, Common::U32String const&, unsigned int, unsigned char, Common::U32String const&)",
  "GUI::ButtonWidget::ButtonWidget(GUI::GuiObject*, Common::String const&, Common::U32String const&, Common::U32String const&, unsigned int, unsigned char, Common::U32String const&)",
  "GUI::GlobalOptionsDialog::build()::$_0::operator()(GUI::StaticTextWidget*, Common::String const&, Common::U32String const&) const",
  "non-virtual thunk to GUI::PicButtonWidget::~PicButtonWidget()",
  "GUI::PicButtonWidget::~PicButtonWidget().1",
  "non-virtual thunk to GUI::PicButtonWidget::~PicButtonWidget().1",
  "GUI::GraphicsWidget::~GraphicsWidget().1",
  "GUI::ContainerWidget::~ContainerWidget().1",
  "GUI::GridWidget::~GridWidget()",
  "GUI::GridItemWidget::~GridItemWidget()",
  "GUI::GridItemWidget::~GridItemWidget().1",
  "non-virtual thunk to GUI::GridItemWidget::~GridItemWidget()",
  "non-virtual thunk to GUI::GridItemWidget::~GridItemWidget().1",
  "non-virtual thunk to GUI::DropdownButtonWidget::~DropdownButtonWidget().1",
  "GUI::EditTextWidget::setEditString(Common::U32String const&)",
  "GUI::EditableWidget::setCaretPos(int)",
  "GUI::GridWidget::setFilter(Common::U32String const&)",
  "GUI::LauncherGrid::selectTarget(Common::String const&)",
  "GUI::GroupedListWidget::groupByAttribute()",
  "GUI::LauncherSimple::selectTarget(Common::String const&)",
  "GUI::PopUpDialog::handleMouseWheel(int, int, int)",
  "GUI::ListWidget::ListWidget(GUI::Dialog*, Common::String const&, Common::U32String const&, unsigned int)",
  "GUI::TabWidget::~TabWidget().1",
  "GUI::TabWidget::handleMouseDown(int, int, int, int)",
  "GUI::TabWidget::adjustTabs(int)",
  "OSystem_SDL::createAudioCDManager()",
  "BaseBackend::initBackend()",
  "DefaultAudioCDManager::~DefaultAudioCDManager().1",
  "non-virtual thunk to DefaultEventManager::~DefaultEventManager()",
  "DefaultEventManager::~DefaultEventManager().1",
  "non-virtual thunk to DefaultEventManager::~DefaultEventManager().1",
  "Common::CompositeHardwareInputSet::~CompositeHardwareInputSet().1",
  "Common::Keymap::resetMapping(Common::Action*)",
  "Common::Keymap::loadMappings()",
  "Common::Keymapper::~Keymapper()",
  "Common::RemapWidget::~RemapWidget().1",
  "Common::RemapWidget::load()",
  "OSystem_SDL::logMessage(LogMessageType::Type, char const*)",
  "virtual thunk to OSystem_SDL::logMessage(LogMessageType::Type, char const*)",
  "SdlEventSource::handleJoystickAdded(SDL_JoyDeviceEvent const&, Common::Event&)",
  "virtual thunk to SdlGraphicsManager::saveScreenshot()",
  "OSystem_SDL::getGlobalKeymaps()",
  "virtual thunk to OSystem_SDL::getGlobalKeymaps()",
  "SurfaceSdlGraphicsManager::~SurfaceSdlGraphicsManager().1",
  "virtual thunk to SurfaceSdlGraphicsManager::~SurfaceSdlGraphicsManager()",
  "SurfaceSdlGraphicsManager::~SurfaceSdlGraphicsManager().2",
  "virtual thunk to SurfaceSdlGraphicsManager::~SurfaceSdlGraphicsManager().1",
  "virtual thunk to SurfaceSdlGraphicsManager::setFeatureState(OSystem::Feature, bool)",
  "virtual thunk to SurfaceSdlGraphicsManager::endGFXTransaction()",
  "virtual thunk to SurfaceSdlGraphicsManager::setScaler(unsigned int, int)",
  "virtual thunk to SurfaceSdlGraphicsManager::initSize(unsigned int, unsigned int, Graphics::PixelFormat const*)",
  "virtual thunk to SurfaceSdlGraphicsManager::copyRectToScreen(void const*, int, int, int, int, int)",
  "virtual thunk to SurfaceSdlGraphicsManager::lockScreen()",
  "virtual thunk to SurfaceSdlGraphicsManager::setPalette(unsigned char const*, unsigned int, unsigned int)",
  "virtual thunk to SurfaceSdlGraphicsManager::setFocusRectangle(Common::Rect const&)",
  "virtual thunk to SurfaceSdlGraphicsManager::copyRectToOverlay(void const*, int, int, int, int, int)",
  "virtual thunk to SurfaceSdlGraphicsManager::setMouseCursor(void const*, unsigned int, unsigned int, int, int, unsigned int, bool, Graphics::PixelFormat const*)",
  "virtual thunk to SurfaceSdlGraphicsManager::displayMessageOnOSD(Common::U32String const&)",
  "SdlMixerManager::~SdlMixerManager().1",
  "DefaultTimerManager::~DefaultTimerManager().1",
  "SdlTimerManager::~SdlTimerManager().1",
  "OpenGL::LibRetroPipeline::activateInternal()",
  "OpenGL::ShaderPipeline::~ShaderPipeline()",
  "OpenGL::FakePipeline::~FakePipeline()",
  "OpenGL::GLTexture::GLTexture(unsigned int, unsigned int, unsigned int)",
  "OpenGL::Texture::recreate()",
  "OpenGL::Texture::~Texture()",
  "OpenGL::TextureRGB555::~TextureRGB555()",
  "OpenGL::FakeTexture::~FakeTexture().1",
  "OpenGL::Texture::allocate(unsigned int, unsigned int)",
  "OpenGL::ScaledTexture::allocate(unsigned int, unsigned int)",
  "OpenGL::TextureCLUT8GPU::allocate(unsigned int, unsigned int)",
  "OpenGL::OpenGLGraphicsManager::copyRectToScreen(void const*, int, int, int, int, int)",
  "OpenGL::OpenGLGraphicsManager::copyRectToOverlay(void const*, int, int, int, int, int)",
  "OpenGL::OpenGLGraphicsManager::fillScreen(unsigned int)",
  "OpenGL::OpenGLGraphicsManager::clearOverlay()",
  "OpenGL::ScaledTexture::~ScaledTexture().1",
  "OpenGL::TextureCLUT8GPU::~TextureCLUT8GPU().1",
  "OpenGL::Pipeline::activateInternal()",
  "OpenGL::Framebuffer::enableBlend(OpenGL::Framebuffer::BlendMode)",
  "OpenGL::TextureTarget::~TextureTarget().1",
  "OpenGL::LibRetroTextureTarget::~LibRetroTextureTarget()",
  "OpenGL::LibRetroPipeline::~LibRetroPipeline().1",
  "OpenGLSdlGraphicsManager::~OpenGLSdlGraphicsManager()",
  "virtual thunk to OpenGLSdlGraphicsManager::~OpenGLSdlGraphicsManager()",
  "non-virtual thunk to OpenGLSdlGraphicsManager::~OpenGLSdlGraphicsManager()",
  "OpenGLSdlGraphicsManager::~OpenGLSdlGraphicsManager().1",
  "virtual thunk to OpenGLSdlGraphicsManager::~OpenGLSdlGraphicsManager().1",
  "non-virtual thunk to OpenGLSdlGraphicsManager::~OpenGLSdlGraphicsManager().1",
  "OpenGLSdlGraphicsManager::setFeatureState(OSystem::Feature, bool)",
  "OpenGLSdlGraphicsManager::updateScreen()",
  "virtual thunk to OpenGL::OpenGLGraphicsManager::handleResizeImpl(int, int)",
  "OpenGLSdlGraphicsManager::handleResizeImpl(int, int)",
  "non-virtual thunk to OpenGLSdlGraphicsManager::handleResizeImpl(int, int)",
  "virtual thunk to OpenGLSdlGraphicsManager::handleResizeImpl(int, int)",
  "virtual thunk to OpenGL::OpenGLGraphicsManager::recalculateDisplayAreas()",
  "OpenGLSdlGraphicsManager::saveScreenshot(Common::String const&) const",
  "non-virtual thunk to OpenGLSdlGraphicsManager::saveScreenshot(Common::String const&) const",
  "non-virtual thunk to OpenGLSdlGraphicsManager::notifyResize(int, int)",
  "OpenGLSdlGraphicsManager::loadVideoMode(unsigned int, unsigned int, Graphics::PixelFormat const&)",
  "non-virtual thunk to OpenGLSdlGraphicsManager::notifyEvent(Common::Event const&)",
  "OpenGL::FrameBuffer::~FrameBuffer().1",
  "OpenGLSdlGraphics3dManager::~OpenGLSdlGraphics3dManager()",
  "virtual thunk to OpenGLSdlGraphics3dManager::~OpenGLSdlGraphics3dManager()",
  "OpenGLSdlGraphics3dManager::~OpenGLSdlGraphics3dManager().1",
  "virtual thunk to OpenGLSdlGraphics3dManager::~OpenGLSdlGraphics3dManager().1",
  "OpenGLSdlGraphics3dManager::setFeatureState(OSystem::Feature, bool)",
  "virtual thunk to OpenGLSdlGraphics3dManager::setFeatureState(OSystem::Feature, bool)",
  "OpenGLSdlGraphics3dManager::endGFXTransaction()",
  "virtual thunk to OpenGLSdlGraphics3dManager::endGFXTransaction()",
  "OpenGLSdlGraphics3dManager::initSize(unsigned int, unsigned int, Graphics::PixelFormat const*)",
  "virtual thunk to OpenGLSdlGraphics3dManager::initSize(unsigned int, unsigned int, Graphics::PixelFormat const*)",
  "virtual thunk to OpenGLSdlGraphics3dManager::handleResizeImpl(int, int)",
  "virtual thunk to OpenGLSdlGraphics3dManager::updateScreen()",
  "virtual thunk to OpenGLSdlGraphics3dManager::showOverlay(bool)",
  "POSIXFilesystemNode::makeNode(Common::String const&) const",
  "POSIXFilesystemFactory::makeRootFileNode() const",
  "POSIXFilesystemFactory::makeCurrentDirectoryFileNode() const",
  "POSIXFilesystemFactory::makeFileNodePath(Common::String const&) const",
  "Image::BitmapDecoder::~BitmapDecoder().1",
  "GUI::GuiManager::setupCursor()",
  "GUI::ThemeEngine::getStringWidth(Common::U32String const&, GUI::ThemeEngine::FontStyle) const",
  "Graphics::FontManager::~FontManager().1",
  "Graphics::TTFLibrary::~TTFLibrary().1",
  "Graphics::TTFFont::assureCached(unsigned int) const",
  "Graphics::ManagedSurface::ManagedSurface(int, int, Graphics::PixelFormat const&)",
  "Graphics::ManagedSurface::blitFrom(Graphics::ManagedSurface const&, Common::Rect const&, Common::Point const&)",
  "Graphics::ManagedSurface::transBlitFrom(Graphics::ManagedSurface const&, Common::Rect const&, Common::Point const&, unsigned int, bool, unsigned int, unsigned int)",
  "OpenGL::Shader::fromStrings(Common::String const&, char const*, char const*, char const* const*, int)",
  "OpenGL::ShaderPipeline::ShaderPipeline(OpenGL::Shader*)",
  "OpenGL::ShaderSurfaceRenderer::~ShaderSurfaceRenderer()",
  "OpenGL::ShaderManager::~ShaderManager()",
  "SurfaceSdlGraphicsManager::clearOverlay()",
  "AdLibPart::noteOff(unsigned char)",
  "AdLibPercussionChannel::noteOff(unsigned char)",
  "AdLibPart::noteOn(unsigned char, unsigned char)",
  "AdLibPercussionChannel::noteOn(unsigned char, unsigned char)",
  "AdLibPart::pitchBend(short)",
  "AdLibPart::pitchBendFactor(unsigned char)",
  "AdLibPart::detune(unsigned char)",
  "AdLibPart::transpose(signed char)",
  "MidiDriver_ADLIB::setPitchBendRange(unsigned char, unsigned int)",
  "Audio::QueuingAudioStreamImpl::~QueuingAudioStreamImpl().1",
  "non-virtual thunk to OPL::EmulatedOPL::~EmulatedOPL()",
  "MidiDriver_MPU401::MidiDriver_MPU401()",
  "MidiDriver_ADLIB::~MidiDriver_ADLIB()",
  "MidiDriver_ADLIB::~MidiDriver_ADLIB().1",
  "MidiDriver_MPU401::~MidiDriver_MPU401()",
  "MidiDriver_SEQ::~MidiDriver_SEQ()",
  "MidiDriver_MT32::send(unsigned int)",
  "non-virtual thunk to MidiDriver_MT32::send(unsigned int)",
  "MidiDriver_SEQ::send(unsigned int)",
  "MidiDriver_TIMIDITY::send(unsigned int)",
  "MidiDriver_MT32::sysEx(unsigned char const*, unsigned short)",
  "MidiDriver_SEQ::sysEx(unsigned char const*, unsigned short)",
  "MidiDriver_TIMIDITY::sysEx(unsigned char const*, unsigned short)",
  "Audio::MixerImpl::~MixerImpl().1",
  "Audio::MixerImpl::stopAll()",
  "Audio::MixerImpl::stopID(int)",
  "Audio::MixerImpl::stopHandle(Audio::SoundHandle)",
  "MidiDriver_SEQ::close()",
  "MidiDriver_TIMIDITY::close()",
  "AdLibEmuMusicPlugin::getDevices() const",
  "NullMusicPlugin::getDevices() const",
  "AutoMusicPlugin::getDevices() const",
  "AmigaMusicPlugin::getDevices() const",
  "CMSMusicPlugin::getDevices() const",
  "TownsEmuMusicPlugin::getDevices() const",
  "PC98EmuMusicPlugin::getDevices() const",
  "SegaCDSoundPlugin::getDevices() const",
  "AppleIIGSMusicPlugin::getDevices() const",
  "MT32EmuMusicPlugin::getDevices() const",
  "PCSpeakerMusicPlugin::getDevices() const",
  "PCjrMusicPlugin::getDevices() const",
  "C64MusicPlugin::getDevices() const",
  "SeqMusicPlugin::getDevices() const",
  "Audio::QuickTimeAudioDecoder::~QuickTimeAudioDecoder().1",
  "Audio::QuickTimeAudioDecoder::AudioSampleDesc::~AudioSampleDesc().1",
  "OPL::DOSBox::OPL::write(int, int)",
  "non-virtual thunk to OPL::DOSBox::OPL::~OPL()",
  "OPL::DOSBox::OPL::~OPL().1",
  "non-virtual thunk to OPL::DOSBox::OPL::~OPL().1",
  "non-virtual thunk to OPL::MAME::OPL::~OPL()",
  "OPL::MAME::OPL::~OPL().1",
  "non-virtual thunk to OPL::MAME::OPL::~OPL().1",
  "OPL::MAME::OPL::reset()",
  "OPL::MAME::OPL::writeReg(int, int)",
  "non-virtual thunk to MidiDriver_MT32::~MidiDriver_MT32()",
  "MidiDriver_MT32::~MidiDriver_MT32().1",
  "non-virtual thunk to MidiDriver_MT32::~MidiDriver_MT32().1",
  "non-virtual thunk to MidiDriver_MT32::close()",
  "non-virtual thunk to MidiDriver_MT32::open()",
  "non-virtual thunk to OPL::NUKED::OPL::~OPL()",
  "OPL::NUKED::OPL::~OPL().1",
  "non-virtual thunk to OPL::NUKED::OPL::~OPL().1",
  "Common::SearchManager::SearchManager()",
  "non-virtual thunk to Common::SearchManager::clear()",
  "Common::MemcachingCaseInsensitiveArchive::~MemcachingCaseInsensitiveArchive()",
  "Common::BaseString<char>::BaseString(Common::BaseString<char> const&)",
  "Common::BaseString<char32_t>::BaseString(Common::BaseString<char32_t> const&)",
  "Common::String::operator=(Common::String const&)",
  "Common::U32String::operator=(Common::U32String const&)",
  "Common::BaseString<char>::makeUnique()",
  "Common::BaseString<char>::deleteChar(unsigned int)",
  "Common::BaseString<char>::erase(unsigned int, unsigned int)",
  "Common::BaseString<char>::clear()",
  "Common::BaseString<char>::insertChar(char, unsigned int)",
  "Common::BaseString<char>::ensureCapacity(unsigned int, bool)",
  "Common::BaseString<char>::toLowercase()",
  "Common::BaseString<char>::trim()",
  "Common::BaseString<char>::assignAppend(Common::BaseString<char> const&)",
  "Common::BaseString<char>::~BaseString()",
  "Common::BaseString<char>::assign(Common::BaseString<char>&&)",
  "Common::BaseString<char>::assignAppend(char const*)",
  "Common::BaseString<char>::assignAppend(char)",
  "Common::BaseString<char32_t>::ensureCapacity(unsigned int, bool)",
  "Common::BaseString<char32_t>::clear()",
  "Common::String::operator=(char const*)",
  "Common::U32String::operator=(Common::U32String&&)",
  "Common::ConfigManager::setAndFlush(Common::String const&, Common::String const&)",
  "DefaultSaveFileManager::getSavePath() const",
  "MT32Emu::ScummVMReportHandler::printDebug(char const*, void*)",
  "Adl::readSector_NIB(unsigned char*, unsigned int, unsigned char const*, unsigned int, unsigned int&, unsigned char, unsigned char const*, unsigned int, unsigned int)",
  "Common::AchievementsManager::unsetActiveDomain()",
  "GUI::GuiManager::addToTrash(GUI::GuiObject*, GUI::Dialog*)",
  "Common::File::open(Common::SeekableReadStream*, Common::String const&)",
  "Common::Rational::debugPrint(int, char const*) const",
  "SdlEventSource::handleJoystickRemoved(SDL_JoyDeviceEvent const&, Common::Event&)",
  "Image::pngWarning(png_struct_def*, char const*)",
  "Image::Indeo4Decoder::decodeRLETransparency(short (*) [2])",
  "Image::Indeo4Decoder::decodeTransparency()",
  "MidiDriver_BASE::midiDumpVarLength(unsigned int const&)",
  "DefaultEventManager::purgeMouseEvents()",
  "DefaultEventManager::purgeKeyboardEvents()",
  "Common::VirtualMouse::~VirtualMouse()",
  "Common::InputWatcher::stopWatching()",
  "SdlGraphicsManager::deactivateManager()",
  "Scumm::ScummDiskImage::~ScummDiskImage()",
  "Scumm::ScummDiskImage::~ScummDiskImage().1",
  "Scumm::ScummNESFile::~ScummNESFile()",
  "Scumm::ScummNESFile::~ScummNESFile().1",
  "MT32EmuMusicPlugin::checkDevice(unsigned int) const",
  "Gob::DataIO::hasFile(Common::String const&)",
  "DefaultAudioCDManager::existExtractedCDAudioFiles(unsigned int)",
  "Common::FSDirectory::FSDirectory(Common::Path const&, int, bool, bool, bool)",
  "Common::FSDirectory::~FSDirectory().1",
  "Common::FSDirectory::lookupCache(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>&, Common::String const&) const",
  "Common::MacResManager::~MacResManager()",
  "Audio::makeQueuingAudioStream(int, bool)",
  "Audio::MixerImpl::MixerImpl(unsigned int, bool, unsigned int)",
  "Common::OSDMessageQueue::OSDMessageQueue()",
  "Audio::QueuingAudioStreamImpl::endOfStream() const",
  "Audio::QueuingAudioStreamImpl::finish()",
  "Audio::QueuingAudioStreamImpl::numQueuedStreams() const",
  "Audio::MixerImpl::setReady(bool)",
  "Audio::MixerImpl::isSoundIDActive(int)",
  "Audio::MixerImpl::getSoundID(Audio::SoundHandle)",
  "Audio::MixerImpl::isSoundHandleActive(Audio::SoundHandle)",
  "Audio::MixerImpl::hasActiveChannelOfType(Audio::Mixer::SoundType)",
  "Audio::MixerImpl::isReady() const",
  "MidiDriver_MT32::setPitchBendRange(unsigned char, unsigned int)",
  "non-virtual thunk to MidiDriver_MT32::setPitchBendRange(unsigned char, unsigned int)",
  "SurfaceSdlGraphicsManager::setStretchMode(int)",
  "virtual thunk to SurfaceSdlGraphicsManager::setStretchMode(int)",
  "SurfaceSdlGraphicsManager::setAspectRatioCorrection(bool)",
  "SurfaceSdlGraphicsManager::displayActivityIconOnOSD(Graphics::Surface const*)",
  "DefaultTimerManager::removeTimerProc(void (*)(void*))",
  "non-virtual thunk to Common::OSDMessageQueue::~OSDMessageQueue()",
  "Common::OSDMessageQueue::~OSDMessageQueue().1",
  "non-virtual thunk to Common::OSDMessageQueue::~OSDMessageQueue().1",
  "non-virtual thunk to Common::OSDMessageQueue::pollEvent(Common::Event&)",
  "Common::QuickTimeParser::readSMI(Common::QuickTimeParser::Atom)",
  "virtual thunk to Common::SeekableSubReadStream::seek(long long, int)",
  "OSystem_SDL::quit()",
  "virtual thunk to OSystem_SDL::quit()",
  "OSystem_SDL::fatalError()",
  "virtual thunk to OSystem_SDL::fatalError()",
  "AdLibPart::sysEx_customInstrument(unsigned int, unsigned char const*, unsigned int)",
  "AdLibPercussionChannel::sysEx_customInstrument(unsigned int, unsigned char const*, unsigned int)",
  "OPL::Config::create(signed char, OPL::Config::OplType)",
  "OPL::MAME::OPL::read(int)",
  "OSystem_SDL::openUrl(Common::String const&)",
  "Common::ConfigManager::addDomain(Common::String const&, Common::ConfigManager::Domain const&)",
  "Common::DebugManager::addDebugChannel(unsigned int, Common::String const&, Common::String const&)",
  "Common::punycode_encodefilename(Common::U32String const&)",
  "Common::strcpy_s(char*, unsigned long, char const*)",
  "Common::vsprintf_s(char*, unsigned long, char const*, void*)",
  "scumm_strdup(char const*)",
  "OSystem::isConnectionLimited()",
  "Common::UnicodeBiDiText::UnicodeBiDiText(Common::U32String const&, Common::BiDiParagraph)",
  "Common::U32String::vformat(char32_t const*, char32_t const*, Common::U32String&, void*)",
  "Common::INIFile::hasKey(Common::String const&, Common::String const&) const",
  "Common::INIFile::getKey(Common::String const&, Common::String const&, Common::String&) const",
  "Common::INIFile::setKey(Common::String const&, Common::String const&, Common::String const&)",
  "GUI::ThemeEngine::themeConfigParseHeader(Common::String, Common::String&)",
  "GUI::ThemeParser::parseDrawStep(Common::XMLParser::ParserNode*, Graphics::DrawStep*, bool)",
  "GUI::ThemeParser::resolutionCheck(Common::String const&)",
  "GUI::ThemeParser::parserCallback_def(Common::XMLParser::ParserNode*)",
  "GUI::ThemeParser::parserCallback_widget(Common::XMLParser::ParserNode*)",
  "Common::Keymapper::addGlobalKeymap(Common::Keymap*)",
  "MidiDriver_SEQ::open()",
  "MidiDriver_TIMIDITY::open()",
  "MidiDriver_TIMIDITY::connect_to_server(char const*, char const*)",
  "MidiDriver_TIMIDITY::timidity_ctl_command(char const*, ...)",
  "MidiDriver_TIMIDITY::timidity_meta_seq(int, int, int)",
  "SdlGraphicsManager::initSizeHint(Common::Array<Graphics::Mode> const&)",
  "OpenGL::ShaderManager::query(OpenGL::ShaderManager::ShaderUsage) const",
  "OpenGL::LibRetro::PresetParser::lookUpValue(Common::String const&, unsigned int*)",
  "OpenGL::OpenGLGraphicsManager::setGraphicsMode(int, unsigned int)",
  "Image::Indeo3Decoder::decodeChunk(unsigned char*, unsigned char*, int, int, unsigned char const*, unsigned int, unsigned char const*, unsigned char const*, int)",
  "Image::Indeo4Decoder::decodePictureHeader()",
  "Image::Indeo4Decoder::decodeBandHeader(Image::Indeo::IVIBandDesc*)",
  "Image::Indeo4Decoder::decodeMbInfo(Image::Indeo::IVIBandDesc*, Image::Indeo::IVITile*)",
  "Image::Indeo5Decoder::decodePictureHeader()",
  "Image::Indeo5Decoder::decodeBandHeader(Image::Indeo::IVIBandDesc*)",
  "Image::Indeo5Decoder::decodeMbInfo(Image::Indeo::IVIBandDesc*, Image::Indeo::IVITile*)",
  "Image::Indeo::IVIHuffDesc::createHuffFromDesc(Image::Indeo::VLC*, bool) const",
  "Image::Indeo::IVIHuffTab::decodeHuffDesc(Image::Indeo::IVI45DecContext*, int, int)",
  "Image::Indeo::IVIPlaneDesc::initTiles(Image::Indeo::IVIPlaneDesc*, int, int)",
  "Image::Indeo::VLC::buildTable(int, int, Image::Indeo::VLCcode*, int)",
  "OpenGL::Shader::getAttribute(char const*)",
  "Graphics::VectorRendererSpec<unsigned short>::precalcGradient(int)",
  "OPL::EmulatedOPL::EmulatedOPL()",
  "Common::Array<unsigned char>::insert_aux(unsigned char*, unsigned char const*, unsigned char const*)",
  "Common::Array<ADDetectedGame>::push_back(ADDetectedGame const&)",
  "Common::Array<Agi::WagProperty>::insert_aux(Agi::WagProperty*, Agi::WagProperty const*, Agi::WagProperty const*)",
  "Common::Array<DetectedGame>::insert_aux(DetectedGame*, DetectedGame const*, DetectedGame const*)",
  "Common::Array<PlainGameDescriptor>::insert_aux(PlainGameDescriptor*, PlainGameDescriptor const*, PlainGameDescriptor const*)",
  "Common::Array<Glk::ChunkEntry>::insert_aux(Glk::ChunkEntry*, Glk::ChunkEntry const*, Glk::ChunkEntry const*)",
  "Common::Array<Common::String>::insert_aux(Common::String*, Common::String const*, Common::String const*)",
  "Common::Array<Gob::DataIO::Archive*>::insert_aux(Gob::DataIO::Archive**, Gob::DataIO::Archive* const*, Gob::DataIO::Archive* const*)",
  "Common::Array<unsigned int>::insert_aux(unsigned int*, unsigned int const*, unsigned int const*)",
  "Common::Array<OSystem::GraphicsMode>::insert_aux(OSystem::GraphicsMode*, OSystem::GraphicsMode const*, OSystem::GraphicsMode const*)",
  "OSystem_SDL::initSDL()",
  "OSystem_SDL::getSupportedAntiAliasingLevels() const",
  "virtual thunk to OSystem_SDL::getSupportedAntiAliasingLevels() const",
  "Common::Array<QualifiedGameDescriptor>::insert_aux(QualifiedGameDescriptor*, QualifiedGameDescriptor const*, QualifiedGameDescriptor const*)",
  "generatePreferredTarget(ADGameDescription const*, int, Common::String)",
  "Common::Array<Common::U32String>::insert_aux(Common::U32String*, Common::U32String const*, Common::U32String const*)",
  "PauseToken::operator=(PauseToken&&)",
  "GUI::ThemeEval::getVar(Common::String const&)",
  "Common::ConfigManager::removeKey(Common::String const&, Common::String const&)",
  "Common::ConfigManager::get(Common::String const&, Common::String const&) const",
  "Common::ConfigManager::getInt(Common::String const&, Common::String const&) const",
  "Common::ConfigManager::getBool(Common::String const&, Common::String const&) const",
  "Common::ConfigManager::set(Common::String const&, Common::String const&, Common::String const&)",
  "void Common::unknownKeyError<Common::String>(Common::String)",
  "Common::MemoryPool::freeUnusedPages()",
  "Common::Array<Common::QuickTimeParser::EditListEntry>::resize(unsigned int)",
  "Common::Array<Common::WinResourceID>::insert_aux(Common::WinResourceID*, Common::WinResourceID const*, Common::WinResourceID const*)",
  "Common::Array<GUI::GridItemInfo>::push_back(GUI::GridItemInfo const&)",
  "Common::Array<Common::Language>::insert_aux(Common::Language*, Common::Language const*, Common::Language const*)",
  "GUI::LangExtraFont::LangExtraFont(GUI::LangExtraFont const&)",
  "GUI::LangExtraFont::operator=(GUI::LangExtraFont const&)",
  "GUI::ThemeLayoutTabWidget::makeClone(GUI::ThemeLayout*)",
  "GUI::ThemeLayoutSpacing::makeClone(GUI::ThemeLayout*)",
  "GUI::ThemeLayoutWidget::makeClone(GUI::ThemeLayout*)",
  "Common::Array<GUI::DropdownButtonWidget::Entry>::insert_aux(GUI::DropdownButtonWidget::Entry*, GUI::DropdownButtonWidget::Entry const*, GUI::DropdownButtonWidget::Entry const*)",
  "void Common::unknownKeyError<Common::U32String>(Common::U32String)",
  "Common::Array<Common::U32String>::operator=(Common::Array<Common::U32String> const&)",
  "GUI::GroupedListWidget::startEditMode()",
  "Common::Array<GUI::ListWidget::ListData>::insert_aux(GUI::ListWidget::ListData*, GUI::ListWidget::ListData const*, GUI::ListWidget::ListData const*)",
  "GUI::ListWidget::stripGUIformatting(Common::U32String const&)",
  "Common::Array<Common::String>::reserve(unsigned int)",
  "Common::Keymap::addAction(Common::Action*)",
  "Common::Keymap::getActionDefaultMappings(Common::Action*)",
  "Common::Keymap::getActionMapping(Common::Action*) const",
  "DefaultSaveFileManager::updateSavefilesList(Common::Array<Common::String>&)",
  "WindowedGraphicsManager::convertWindowToVirtual(int, int) const",
  "WindowedGraphicsManager::convertVirtualToWindow(int, int) const",
  "SurfaceSdlGraphicsManager::grabOverlay(Graphics::Surface&) const",
  "OpenGL::LibRetro::PresetParser::parsePass(unsigned int, bool)",
  "Common::Array<OpenGL::LibRetroPipeline::Texture>::insert_aux(OpenGL::LibRetroPipeline::Texture*, OpenGL::LibRetroPipeline::Texture const*, OpenGL::LibRetroPipeline::Texture const*)",
  "OpenGL::LibRetroPipeline::Pass::Pass(OpenGL::LibRetroPipeline::Pass const&)",
  "Common::Array<OpenGL::LibRetroPipeline::Pass::TexCoordAttribute>::operator=(Common::Array<OpenGL::LibRetroPipeline::Pass::TexCoordAttribute> const&)",
  "OpenGL::TiledSurface::TiledSurface(unsigned int, unsigned int, Graphics::PixelFormat const&)",
  "Common::Array<OpenGLSdlGraphics3dManager::OpenGLPixelFormat>::insert_aux(OpenGLSdlGraphics3dManager::OpenGLPixelFormat*, OpenGLSdlGraphics3dManager::OpenGLPixelFormat const*, OpenGLSdlGraphics3dManager::OpenGLPixelFormat const*)",
  "Image::pngError(png_struct_def*, char const*)",
  "Image::BitmapRawDecoder::BitmapRawDecoder(int, int, int, bool, bool)",
  "Image::BitmapRawDecoder::getPixelFormat() const",
  "Image::Indeo::IVIPlaneDesc::initPlanes(Image::Indeo::IVIPlaneDesc*, Image::Indeo::IVIPicConfig const*, bool)",
  "Graphics::AmigaFont::getCharWidth(unsigned int) const",
  "Graphics::AmigaFont::getKerningOffset(unsigned int, unsigned int) const",
  "Graphics::AmigaFont::drawChar(Graphics::Surface*, unsigned int, int, int, unsigned int) const",
  "Common::Array<OpenGL::VertexAttrib>::insert_aux(OpenGL::VertexAttrib*, OpenGL::VertexAttrib const*, OpenGL::VertexAttrib const*)",
  "Graphics::Surface::vLine(int, int, int, unsigned int)",
  "Graphics::Surface::fillRect(Common::Rect, unsigned int)",
  "Graphics::Surface::convertToInPlace(Graphics::PixelFormat const&, unsigned char const*)",
  "Graphics::Surface::convertTo(Graphics::PixelFormat const&, unsigned char const*, int, unsigned char const*, int, Graphics::DitherMethod) const",
  "Graphics::VectorRenderer::stepGetPositions(Graphics::DrawStep const&, Common::Rect const&, unsigned short&, unsigned short&, unsigned short&, unsigned short&)",
  "Common::AchievementsManager::getCurrentLang() const",
  "Common::Singleton<Common::MainTranslationManager>::instance()",
  "generateUnknownGameReport(Common::Array<DetectedGame> const&, bool, bool, unsigned int)",
  "SaveStateDescriptor::isAutosave() const",
  "GUI::GuiManager::setLanguageRTL()",
  "GUI::GuiManager::getKeymap() const",
  "Common::KeyboardHardwareInputSet::findHardwareInput(Common::String const&) const",
  "Common::KeyboardHardwareInputSet::findHardwareInput(Common::Event const&) const",
  "Common::MouseHardwareInputSet::findHardwareInput(Common::String const&) const",
  "Common::MouseHardwareInputSet::findHardwareInput(Common::Event const&) const",
  "Common::JoystickHardwareInputSet::findHardwareInput(Common::String const&) const",
  "Common::JoystickHardwareInputSet::findHardwareInput(Common::Event const&) const",
  "Common::GzioReadStream::read(void*, unsigned int)",
  "Common::makeZipArchive(Common::SeekableReadStream*)",
  "Common::ZipArchive::~ZipArchive().1",
  "Common::GZipWriteStream::~GZipWriteStream().1",
  "Common::QuickTimeParser::readMOOV(Common::QuickTimeParser::Atom)",
  "Common::QuickTimeParser::readTRAK(Common::QuickTimeParser::Atom)",
  "Common::QuickTimeParser::init()",
  "Common::NEResources::~NEResources().1",
  "Common::PEResources::~PEResources()",
  "GUI::MetadataParser::~MetadataParser()",
  "GUI::ThemeParser::~ThemeParser()",
  "GUI::ThemeParser::parserCallback_defaults(Common::XMLParser::ParserNode*)",
  "GUI::ThemeParser::parserCallback_text_color(Common::XMLParser::ParserNode*)",
  "GUI::ThemeParser::parserCallback_cursor(Common::XMLParser::ParserNode*)",
  "GUI::ThemeParser::parserCallback_text(Common::XMLParser::ParserNode*)",
  "GUI::ThemeParser::parserCallback_color(Common::XMLParser::ParserNode*)",
  "GUI::ThemeParser::parserCallback_drawstep(Common::XMLParser::ParserNode*)",
  "GUI::ThemeParser::parserCallback_drawdata(Common::XMLParser::ParserNode*)",
  "GUI::ThemeParser::parserCallback_layout(Common::XMLParser::ParserNode*)",
  "MT32Emu::PartialManager::produceOutput(int, short*, short*, unsigned int)",
  "MT32Emu::PartialManager::produceOutput(int, float*, float*, unsigned int)",
  "MT32Emu::Part::allNotesOff()",
  "MT32Emu::Part::stopNote(unsigned int)",
  "MT32Emu::Synth::refreshSystemChanAssign(unsigned char, unsigned char)",
  "MT32Emu::Part::reset()",
  "MT32Emu::Part::setHoldPedal(bool)",
  "MT32Emu::Part::resetAllControllers()",
  "MT32Emu::Part::noteOn(unsigned int, unsigned int)",
  "MT32Emu::BReverbModelImpl<short>::~BReverbModelImpl()",
  "MT32Emu::BReverbModelImpl<short>::~BReverbModelImpl().1",
  "MT32Emu::BReverbModelImpl<float>::~BReverbModelImpl()",
  "MT32Emu::BReverbModelImpl<float>::~BReverbModelImpl().1",
  "mt32emu_add_rom_data",
  "MT32Emu::ROMImage::freeROMImage(MT32Emu::ROMImage const*)",
  "non-virtual thunk to MT32Emu::AccurateLowPassFilter::process(float)",
  "MT32Emu::Synth::initTimbres(unsigned short, unsigned short, unsigned short, unsigned short, bool)",
  "MT32Emu::Synth::playSysexWithoutFraming(unsigned char const*, unsigned int)",
  "MT32Emu::DefaultMidiStreamParser::printDebug(char const*)",
  "non-virtual thunk to MT32Emu::DefaultMidiStreamParser::printDebug(char const*)",
  "MT32Emu::TVA::handleInterrupt()",
  "MT32Emu::PartialManager::allocPartial(int)",
  "MT32Emu::RhythmPart::setTimbre(MT32Emu::TimbreParam*)",
  "MT32Emu::RhythmPart::getAbsTimbreNum() const",
  "MT32Emu::Synth::playMsg(unsigned int)",
  "MT32Emu::Synth::playSysex(unsigned char const*, unsigned int)",
  "mt32emu_write_sysex",
  "MT32Emu::RendererImpl<short>::render(short*, unsigned int)",
  "MT32Emu::RendererImpl<short>::render(float*, unsigned int)",
  "MT32Emu::RendererImpl<short>::renderStreams(MT32Emu::DACOutputStreams<short> const&, unsigned int)",
  "MT32Emu::RendererImpl<short>::renderStreams(MT32Emu::DACOutputStreams<float> const&, unsigned int)",
  "MT32Emu::RendererImpl<float>::render(short*, unsigned int)",
  "MT32Emu::RendererImpl<float>::render(float*, unsigned int)",
  "MT32Emu::RendererImpl<float>::renderStreams(MT32Emu::DACOutputStreams<short> const&, unsigned int)",
  "MT32Emu::RendererImpl<float>::renderStreams(MT32Emu::DACOutputStreams<float> const&, unsigned int)",
  "MT32Emu::SynthWrapper::getOutputSamples(float*, unsigned int)",
  "png_check_IHDR",
  "png_combine_row",
  "png_benign_error",
  "png_chunk_error",
  "png_app_warning",
  "png_app_error",
  "png_chunk_report",
  "png_default_read_data",
  "png_read_chunk_header",
  "png_handle_IHDR",
  "png_read_IDAT_data",
  "png_read_start_row",
  "png_default_write_data",
  "png_write_complete_chunk",
  "png_compress_IDAT",
  "png_write_tEXt",
  "png_write_zTXt",
  "png_write_iTXt",
  "png_destroy_read_struct",
  "png_destroy_write_struct",
  "png_zfree",
  "png_destroy_info_struct",
  "png_free_data",
  "png_colorspace_sync",
  "png_destroy_gamma_table",
  "png_decompress_chunk",
  "png_cache_unknown_chunk",
  "png_set_text_2",
  "png_build_16bit_table",
  "png_create_info_struct",
  "png_text_compress",
  "png_zalloc",
  "png_crc_finish",
  "png_inflate_read",
  "png_write_eXIf",
  "png_deflate_claim",
  "png_inflate_claim",
  "png_inflate",
  "af_property_set",
  "af_property_get",
  "cf2_builder_lineTo",
  "cf2_builder_cubeTo",
  "cff_builder_start_point",
  "pfr_glyph_load_rec",
  "t1_builder_check_points",
  "t1_builder_add_point1",
  "t1_builder_add_contour",
  "t1_builder_start_point",
  "TT_Load_Simple_Glyph",
  "cff_subfont_load",
  "cf2_decoder_parse_charstrings",
  "cf2_glyphpath_moveTo",
  "cf2_doFlex",
  "_bdf_parse_properties",
  "BDF_Glyph_Load",
  "PCF_Glyph_Load",
  "pfr_slot_load",
  "T42_GlyphSlot_Init",
  "T42_Size_Init",
  "Graphics::TTFFont::~TTFFont()",
  "open_face_PS_from_sfnt_stream",
  "T42_Size_Done",
  "T42_Size_Select",
  "T42_Size_Request",
  "Graphics::TTFLibrary::TTFLibrary()",
  "t1_decoder_init",
  "cff_index_access_element",
  "ft_gzip_check_header",
  "ft_lzw_stream_io",
  "ft_lzwstate_io",
  "pfr_face_get_kerning",
  "tt_face_goto_table",
  "tt_face_load_font_dir",
  "tt_face_get_metrics",
  "tt_face_find_bdf_prop",
  "TT_Access_Glyph_Frame",
  "check_type1_format",
  "fnt_font_load",
  "raccess_guess_apple_generic",
  "pcf_get_accel",
  "tt_face_load_any",
  "ft_lzwstate_get_code",
  "FT_Stream_ExtractFrame",
  "cff_index_get_name",
  "tt_face_free_sbit",
  "TT_Forget_Glyph_Frame",
  "pcf_get_metric",
  "raccess_make_file_name",
  "raccess_guess_darwin_newvfs",
  "raccess_guess_darwin_hfsplus",
  "ft_gzip_alloc",
  "pfr_aux_name_load",
  "pfr_extra_item_load_font_id",
  "afm_parser_init",
  "psh_globals_new",
  "ft_black_new",
  "T1_Get_MM_Var",
  "t1_allocate_blend",
  "af_glyph_hints_reload",
  "af_latin_hints_compute_segments",
  "af_axis_hints_new_edge",
  "FT_GlyphLoader_CheckSubGlyphs",
  "cf2_arrstack_push",
  "_bdf_list_split",
  "ft_var_readpackedpoints",
  "pfr_extra_item_load_bitmap_info",
  "pfr_extra_item_load_stem_snaps",
  "psh_hint_table_init",
  "ps_hints_t1reset",
  "ps_hints_t1stem3",
  "ps_dimension_end",
  "ps_dimension_add_t1stem",
  "ps_dimension_set_mask_bits",
  "tt_cmap14_variants",
  "tt_cmap14_char_variants",
  "tt_cmap14_variant_chars",
  "tt_cmap14_get_def_chars",
  "tt_name_entry_ascii_from_other",
  "tt_name_entry_ascii_from_utf16",
  "tt_slot_init",
  "TT_Load_Context",
  "Update_Max",
  "FNT_Load_Glyph",
  "FT_Bitmap_Convert",
  "ft_gzip_stream_io",
  "ps_parser_load_field_table",
  "ps_hinter_done",
  "ft_black_render",
  "Conic_To",
  "Cubic_To",
  "tt_sbit_decoder_load_compound",
  "sfnt_get_glyph_name",
  "sfnt_get_name_index",
  "ft_smooth_render",
  "ft_smooth_render_lcd",
  "ft_smooth_render_lcd_v",
  "tt_size_done",
  "decode_mcu_DC_refine",
  "self_destruct",
  "SDL_OpenAudio",
  "SDL_AddAudioDevice",
  "SDL_AudioDetectDevices_Default",
  "SDL_CloseAudio",
  "SdlMixerManager::startAudio()",
  "SdlMixerManager::resumeAudio()",
  "SDL_AudioStreamPut",
  "SDL_ResampleCVT_c1",
  "SDL_ResampleCVT_c2",
  "SDL_ResampleCVT_c4",
  "SDL_ResampleCVT_c6",
  "SDL_ResampleCVT_c8",
  "SDL_BufferQueueFillCallback",
  "SDL_BuildAudioCVT",
  "SDL_AddAudioCVTFilter",
  "SDL_AudioStreamGet",
  "EMSCRIPTENAUDIO_Init",
  "EMSCRIPTENAUDIO_OpenDevice",
  "SDL_Error",
  "SDL_FillRect",
  "SDL_PrivateLoadButtonMapping",
  "SDL_PrivateGameControllerParseElement",
  "SDL_AddDollarGesture",
  "dollarNormalize",
  "SDL_JoystickGetAxis",
  "SDL_JoystickGetHat",
  "SDL_JoystickGetButton",
  "SDL_JoystickName",
  "SDL_PixelFormatEnumToMasks",
  "SDL_IntersectRect",
  "SDL_IntersectRectAndLine",
  "SW_CreateTexture",
  "SW_GetOutputSize",
  "SW_RenderReadPixels",
  "stdio_seek",
  "SDL_UpperSoftStretch",
  "SDL_SetSurfacePalette",
  "SDL_CreateRGBSurface",
  "SDL_CreateRGBSurfaceFrom",
  "SDL_SetColorKey",
  "SDL_GetColorKey",
  "EMSCRIPTEN_JoystickInit",
  "EMSCRIPTEN_JoystickOpen",
  "SDL_EGL_GetSwapInterval",
  "SDL_GetCurrentVideoDriver",
  "SDL_GetDesktopDisplayMode",
  "SDL_GetWindowDisplayMode",
  "SDL_SetWindowFullscreen",
  "SDL_SetWindowGrab",
  "SDL_GetWindowID",
  "SDL_GetWindowFlags",
  "SDL_GetWindowPosition",
  "SDL_GetWindowSize",
  "SDL_GetWindowGrab",
  "SDL_GL_SetAttribute",
  "SDL_GL_GetCurrentContext",
  "GetYUVPlanes",
  "SDL_ConvertPixels_ARGB8888_to_YUV",
  "SDL_PollSentinelChanged",
  "SDL_PrivateGameControllerButton",
  "ResetOutput",
  "SDL_PrivateJoystickAxis",
  "SDL_PrivateJoystickButton",
  "SDL_JoystickEventState",
  "SDL_SendKeyboardKeyInternal",
  "SDL_SendMouseButton",
  "SDL_SendTouchMotion",
  "Emscripten_HandleMouseButton",
  "Emscripten_HandleMouseFocus",
  "Emscripten_HandleFocus",
  "Emscripten_HandleTouch",
  "Emscripten_HandleKey",
  "Emscripten_HandleKeyPress",
  "SDL_PeepEvents",
  "SDL_SendAppEvent",
  "SDL_GameControllerIgnoreDevicesChanged",
  "SDL_GameControllerIgnoreDevicesExceptChanged",
  "SDL_IsGameController",
  "SdlEventSource::~SdlEventSource()",
  "Emscripten_CreateDevice",
  "debug_print",
  "SDL_Log",
  "SDL_LogCritical",
  "Map1to1",
  "QueueCmdSetClipRect",
  "SDL_CreateMutex",
  "SDL_AddEventWatch",
  "SDL_AllocateRenderVertices",
  "SDL_MouseAutoCaptureChanged",
  "SDL_SendMouseMotion",
  "SdlWindow::lockMouse(bool)",
  "SdlGraphicsManager::showSystemMouseCursor(bool)",
  "OpenGLSdlGraphics3dManager::showMouse(bool)",
  "SdlWindow::warpMouseInWindow(int, int)",
  "SDL_UnlockSurface",
  "SDL_LockSurface",
  "SDL_ConvertSurfaceFormat",
  "SDL_SetSurfaceAlphaMod",
  "byn-split-outlined-A$SDL_SetSurfaceBlendMode",
  "byn-split-outlined-A$SDL_SetSurfaceRLE",
  "byn-split-outlined-A$SDL_SetSurfaceColorMod",
  "SurfaceSdlGraphicsManager::unloadGFXMode()",
  "GLES2_UnlockTexture",
  "SDLgfx_rotateSurface",
  "SW_DestroyTexture",
  "Emscripten_CreateWindowFramebuffer",
  "Emscripten_DestroyWindowFramebuffer",
  "SDL_SW_CopyYUVToRGB",
  "SDL_MouseTouchEventsChanged",
  "Emscripten_GLES_MakeCurrent",
  "SdlWindow::~SdlWindow()",
  "SdlWindow::destroyWindow()",
  "Emscripten_HandleFullscreenChange",
  "SdlWindow::getDesktopResolution()",
  "SdlWindow::getDisplayIndex() const",
  "SdlWindow::setWindowCaption(Common::String const&)",
  "SDL_OnWindowShown",
  "SdlWindow::iconifyWindow()",
  "SdlWindow::setMouseRect(Common::Rect const&)",
  "OSystem_SDL::engineDone()",
  "virtual thunk to OSystem_SDL::engineDone()",
  "OSystem_SDL::getOpenGLProcAddress(char const*) const",
  "GLES2_GetOutputSize",
  "SdlWindow::getSdlDpiScalingFactor() const",
  "GLES2_SetVSync",
  "OpenGLSdlGraphicsManager::getFeatureState(OSystem::Feature) const",
  "OpenGLSdlGraphics3dManager::getFeatureState(OSystem::Feature) const",
  "virtual thunk to OpenGLSdlGraphics3dManager::getFeatureState(OSystem::Feature) const",
  "GLES2_RenderPresent",
  "OpenGLSdlGraphicsManager::refreshScreen()",
  "Emscripten_HandleCanvasResize",
  "Emscripten_HandleResize",
  "Emscripten_HandleVisibilityChange",
  "ft_ansi_stream_close",
  "StdioStream::~StdioStream()",
  "StdioStream::~StdioStream().1",
  "non-virtual thunk to StdioStream::~StdioStream()",
  "StdioStream::~StdioStream().2",
  "non-virtual thunk to StdioStream::~StdioStream().1",
  "png_default_flush",
  "StdioStream::flush()",
  "non-virtual thunk to StdioStream::flush()",
  "do_putc.1",
  "puts",
  "SDL_sscanf",
  "ft_ansi_stream_io",
  "stdio_read",
  "StdioStream::read(void*, unsigned int)",
  "__fseeko",
  "__ftello",
  "fwrite",
  "out",
  "sift",
  "trinkle",
  "__floatscan",
  "scanexp",
  "vfprintf",
  "vfiprintf",
  "Graphics::YUVToRGBManager::getLookup(Graphics::PixelFormat, Graphics::YUVToRGBManager::LuminanceScale, bool)",
  "DotMatrixPlugin::createInstance(Graphics::PixelFormat const&) const",
  "SAIPlugin::createInstance(Graphics::PixelFormat const&) const",
  "SuperSAIPlugin::createInstance(Graphics::PixelFormat const&) const",
  "SuperEaglePlugin::createInstance(Graphics::PixelFormat const&) const",
  "PMPlugin::createInstance(Graphics::PixelFormat const&) const",
  "AdvMamePlugin::createInstance(Graphics::PixelFormat const&) const",
  "TVPlugin::createInstance(Graphics::PixelFormat const&) const",
  "HQPlugin::createInstance(Graphics::PixelFormat const&) const",
  "EdgePlugin::createInstance(Graphics::PixelFormat const&) const",
  "NullMusicPlugin::createInstance(MidiDriver**, unsigned int) const",
  "Audio::makeALawStream(Common::SeekableReadStream*, DisposeAfterUse::Flag, int, int)",
  "Audio::makeMuLawStream(Common::SeekableReadStream*, DisposeAfterUse::Flag, int, int)",
  "Common::HashMap<Common::String, Common::SharedArchiveContents, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing(Common::String const&)",
  "Common::BaseString<char>::BaseString(char const*)",
  "Common::BaseString<char>::BaseString(char const*, unsigned int)",
  "Common::BaseString<char>::BaseString(char const*, char const*)",
  "MT32Emu::DynamicSysexDataStorage::allocate(unsigned int)",
  "SRCTools::SincResampler::createSincResampler(double, double, double, double, double, unsigned int)",
  "SRCTools::IIRResampler::Constants::Constants(unsigned int, float, SRCTools::IIRSection const*, SRCTools::IIRResampler::Quality)",
  "AdvancedMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const",
  "Common::HashMap<Common::String, FileProperties, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing(Common::String const&)",
  "Common::HashMap<Common::String, FileProperties, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::assign(Common::HashMap<Common::String, FileProperties, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&)",
  "AgiMetaEngineDetection::parseAndCustomizeGuiOptions(Common::String const&, Common::String const&) const",
  "Common::HashMap<Common::String, int, Common::Hash<Common::String>, Common::EqualTo<Common::String>>::expandStorage(unsigned int)",
  "Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::expandStorage(unsigned int)",
  "Common::HashMap<Common::String, Common::String, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::assign(Common::HashMap<Common::String, Common::String, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&)",
  "Common::HashMap<Common::String, bool, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::expandStorage(unsigned int)",
  "Common::HashMap<Common::String, Common::String, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing(Common::String const&)",
  "MD5CacheManager::MD5CacheManager()",
  "Glk::Blorb::listMembers(Common::List<Common::SharedPtr<Common::ArchiveMember>>&) const",
  "DetectedGame::DetectedGame(Common::String const&, Common::String const&, Common::String const&, Common::Language, Common::Platform, Common::String const&, bool)",
  "Common::HashMap<Common::String, Gob::DataIO::File, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::expandStorage(unsigned int)",
  "MadeMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const",
  "Common::AchievementsManager::AchievementsManager()",
  "ScummMetaEngineDetection::parseAndCustomizeGuiOptions(Common::String const&, Common::String const&) const",
  "Common::HashMap<Common::String, SizeMD5, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing(Common::String const&)",
  "OSystem_SDL::getHardwareInputSet()",
  "OSystem_SDL::createMutex()",
  "OSystem_SDL::getDefaultIconsPath()",
  "OSystem_SDL::getScreenshotsPath()",
  "Common::Singleton<Common::ConfigManager>::instance()",
  "Base::createTemporaryTarget(Common::String const&, Common::String const&)",
  "PluginManager::instance()",
  "PluginManager::PluginManager()",
  "EngineManager::getPlugins(PluginType) const",
  "Common::HashMap<Common::String, Common::String, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::clear(bool)",
  "Common::HashMap<Common::String, long long, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::clear(bool)",
  "EngineManager::generateUniqueDomain(Common::String)",
  "EngineManager::createTargetForGame(DetectedGame const&)",
  "MusicManager::getPlugins() const",
  "ScalerManager::getPlugins() const",
  "StaticPluginProvider::getPlugins()",
  "Common::BaseString<char32_t>::BaseString(char32_t const*)",
  "Common::BaseString<char32_t>::BaseString(char32_t const*, unsigned int)",
  "AdvancedMetaEngineDetection::AdvancedMetaEngineDetection(void const*, unsigned int, PlainGameDescriptor const*)",
  "FileMapArchive::listMembers(Common::List<Common::SharedPtr<Common::ArchiveMember>>&) const",
  "FileMapArchive::getMember(Common::Path const&) const",
  "Common::BaseString<char32_t>::BaseString(char32_t const*, char32_t const*)",
  "Common::INIFile::Section::Section(Common::INIFile::Section const&)",
  "Common::HashMap<Common::String, Common::Array<Common::AchievementDescription>, Common::Hash<Common::String>, Common::EqualTo<Common::String>>::lookupAndCreateIfMissing(Common::String const&)",
  "DetectedGame::DetectedGame()",
  "GUI::Debugger::cmdDebugFlagsList(int, char const**)",
  "GUI::Debugger::cmdDebugFlagEnable(int, char const**)",
  "GUI::Debugger::cmdDebugFlagDisable(int, char const**)",
  "Common::HashMap<Common::String, Common::SharedPtr<Common::Functor2<int, char const**, bool>>, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing(Common::String const&)",
  "GUI::LauncherFilterMatcher(void*, int, Common::U32String const&, Common::U32String const&)",
  "Common::ConfigManager::ConfigManager()",
  "Common::ConfigManager::Domain::Domain()",
  "Common::HashMap<Common::String, Common::ConfigManager::Domain, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing(Common::String const&)",
  "Common::DebugManager::DebugManager()",
  "Common::HashMap<Common::String, Common::DebugManager::DebugChannel, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::expandStorage(unsigned int)",
  "Common::EventDispatcher::registerSource(Common::EventSource*, bool)",
  "Common::EventDispatcher::registerObserver(Common::EventObserver*, unsigned int, bool, bool)",
  "Common::FSNode::FSNode(AbstractFSNode*)",
  "Common::FSDirectory::FSDirectory(Common::FSNode const&, int, bool, bool, bool)",
  "Common::normalizePath(Common::String const&, char)",
  "Common::ZipArchive::ZipArchive(void*)",
  "Common::ZipArchive::listMembers(Common::List<Common::SharedPtr<Common::ArchiveMember>>&) const",
  "Common::WinResources::VersionInfo::VersionInfo()",
  "Common::HashMap<Common::String, Common::U32String, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing(Common::String const&)",
  "Common::HashMap<Common::WinResourceID, Common::HashMap<Common::WinResourceID, Common::PEResources::Resource, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>::HashMap()",
  "Common::HashMap<Common::WinResourceID, Common::HashMap<Common::WinResourceID, Common::HashMap<Common::WinResourceID, Common::PEResources::Resource, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>::lookupAndCreateIfMissing(Common::WinResourceID const&)",
  "Common::HashMap<Common::WinResourceID, Common::HashMap<Common::WinResourceID, Common::PEResources::Resource, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>::lookupAndCreateIfMissing(Common::WinResourceID const&)",
  "Common::HashMap<Common::WinResourceID, Common::PEResources::Resource, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>::lookupAndCreateIfMissing(Common::WinResourceID const&)",
  "MT32Emu::BReverbModel::createBReverbModel(MT32Emu::ReverbMode, bool, MT32Emu::RendererType)",
  "Common::HashMap<Common::String, GUI::MetadataGame, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing(Common::String const&)",
  "GUI::MetadataParser::closedKeyCallback(Common::XMLParser::ParserNode*)",
  "GUI::MetadataParser::buildLayout()",
  "GUI::GlobalOptionsDialog::apply()::$_0::operator()(GUI::StaticTextWidget*, Common::String const&, Common::U32String const&) const",
  "GUI::ThemeEngine::addDirtyRect(Common::Rect)",
  "GUI::ThemeEval::addLayout(GUI::ThemeLayout::LayoutType, int, GUI::ThemeLayout::ItemAlign)",
  "GUI::ThemeParser::cleanup()",
  "GUI::ThemeParser::buildLayout()",
  "GUI::scaleGfx(Graphics::ManagedSurface const*, int, int, bool)",
  "Common::HashMap<Common::U32String, int, Common::Hash<Common::U32String>, Common::EqualTo<Common::U32String>>::lookupAndCreateIfMissing(Common::U32String const&)",
  "Common::HashMap<int, Common::Array<int>, Common::Hash<int>, Common::EqualTo<int>>::lookupAndCreateIfMissing(int const&)",
  "Common::HashMap<int, Graphics::ManagedSurface const*, Common::Hash<int>, Common::EqualTo<int>>::expandStorage(unsigned int)",
  "DefaultEventManager::pushEvent(Common::Event const&)",
  "Common::List<Common::Event>::operator=(Common::List<Common::Event> const&)",
  "DefaultEventManager::notifyEvent(Common::Event const&)",
  "non-virtual thunk to DefaultEventManager::notifyEvent(Common::Event const&)",
  "Common::Keymap::Keymap(Common::Keymap::KeymapType, Common::String const&, Common::U32String const&)",
  "Common::HashMap<Common::HardwareInput, Common::Array<Common::Action*>, Common::HardwareInput_Hash, Common::HardwareInput_EqualTo>::lookupAndCreateIfMissing(Common::HardwareInput const&)",
  "Common::HashMap<Common::Keymap*, Common::RemapWidget::KeymapTitleRow, Common::Hash<Common::Keymap*>, Common::EqualTo<Common::Keymap*>>::lookupAndCreateIfMissing(Common::Keymap* const&)",
  "Common::VirtualMouse::handleAxisMotion(short, short)",
  "SeqMusicPlugin::createInstance(MidiDriver**, unsigned int) const",
  "TimidityMusicPlugin::createInstance(MidiDriver**, unsigned int) const",
  "DefaultSaveFileManager::DefaultSaveFileManager()",
  "SdlGraphicsManager::SdlGraphicsManager(SdlEventSource*, SdlWindow*)",
  "SdlGraphicsManager::defaultGraphicsModeConfig() const",
  "SurfaceSdlGraphicsManager::getSupportedFormats() const",
  "virtual thunk to SurfaceSdlGraphicsManager::getSupportedFormats() const",
  "SdlMixerManager::getAudioSpec(unsigned int)",
  "OpenGL::CLUT8LookUpPipeline::CLUT8LookUpPipeline()",
  "OpenGL::FakeTexture::FakeTexture(unsigned int, unsigned int, unsigned int, Graphics::PixelFormat const&, Graphics::PixelFormat const&)",
  "OpenGL::ScaledTexture::ScaledTexture(unsigned int, unsigned int, unsigned int, Graphics::PixelFormat const&, Graphics::PixelFormat const&)",
  "OpenGL::TextureTarget::TextureTarget()",
  "OpenGL::OpenGLGraphicsManager::hasFeature(OSystem::Feature) const",
  "OpenGL::OpenGLGraphicsManager::getSupportedFormats() const",
  "OpenGL::OpenGLGraphicsManager::getGLPixelFormat(Graphics::PixelFormat const&, unsigned int&, unsigned int&, unsigned int&) const",
  "OpenGL::OpenGLGraphicsManager::getFontOSD() const",
  "OpenGLSdlGraphicsManager::OpenGLSdlGraphicsManager(SdlEventSource*, SdlWindow*)",
  "POSIXFilesystemNode::getChildren(Common::Array<AbstractFSNode*>&, Common::FSNode::ListMode, bool) const",
  "PosixIoStream::makeFromPath(Common::String const&, bool)",
  "Common::Singleton<Graphics::YUVToRGBManager>::instance()",
  "Image::XanDecoder::convertYUVtoRGBSurface()",
  "Graphics::scaleBlit(unsigned char*, unsigned char const*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, Graphics::PixelFormat const&)",
  "Graphics::CursorManager::Cursor::Cursor(void const*, unsigned int, unsigned int, int, int, unsigned int, bool, Graphics::PixelFormat const*)",
  "Graphics::FontManager::FontManager()",
  "Graphics::TTFFont::TTFFont()",
  "Common::HashMap<unsigned int, Graphics::TTFFont::Glyph, Common::Hash<unsigned int>, Common::EqualTo<unsigned int>>::lookupAndCreateIfMissing(unsigned int const&)",
  "SourceScaler::setSource(unsigned char const*, unsigned int, int, int, int)",
  "NormalPlugin::createInstance(Graphics::PixelFormat const&) const",
  "Graphics::Surface::flipVertical(Common::Rect const&)",
  "Graphics::Surface::scale(short, short, bool) const",
  "__cxxabiv1::__vmi_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const",
  "__cxxabiv1::__vmi_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int, bool) const",
  "__cxxabiv1::__vmi_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, void const*, void const*, int, bool) const",
  "DISKAUDIO_WaitDevice",
  "DUMMYAUDIO_CaptureFromDevice",
  "SDL_AtomicLock",
  "OSystem_SDL::delayMillis(unsigned int)",
  "OSystem_Emscripten::hasFeature(OSystem::Feature)",
  "non-virtual thunk to OSystem_Emscripten::hasFeature(OSystem::Feature)",
  "virtual thunk to OSystem_Emscripten::hasFeature(OSystem::Feature)",
  "AsylumMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const",
  "CryOmni3D::CryOmni3DMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const",
  "MohawkMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const",
  "ToonMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const",
  "ToucheMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const",
  "GUI::Debugger::cmdHelp(int, char const**)",
  "GUI::Debugger::cmdDebugLevel(int, char const**)",
  "GUI::OptionsDialog::setVolumeSettingsState(bool)",
  "GUI::GridItemTray::reflowLayout()",
  "GUI::EditTextWidget::~EditTextWidget()",
  "GUI::DomainEditTextWidget::~DomainEditTextWidget()",
  "non-virtual thunk to GUI::DomainEditTextWidget::~DomainEditTextWidget()",
  "non-virtual thunk to GUI::DomainEditTextWidget::~DomainEditTextWidget().1",
  "non-virtual thunk to GUI::EditableWidget::~EditableWidget()",
  "GUI::ListWidget::~ListWidget()",
  "non-virtual thunk to GUI::ScrollContainerWidget::~ScrollContainerWidget()",
  "GUI::ScrollContainerWidget::~ScrollContainerWidget().1",
  "non-virtual thunk to GUI::ScrollContainerWidget::~ScrollContainerWidget().1",
  "GUI::PicButtonWidget::PicButtonWidget(GUI::GuiObject*, int, int, int, int, Common::U32String const&, unsigned int, unsigned char)",
  "GUI::PicButtonWidget::PicButtonWidget(GUI::GuiObject*, Common::String const&, Common::U32String const&, unsigned int, unsigned char)",
  "non-virtual thunk to GUI::GridWidget::~GridWidget()",
  "GUI::GridWidget::~GridWidget().1",
  "non-virtual thunk to GUI::GridWidget::~GridWidget().1",
  "OSystem_POSIX::createAudioCDManager()",
  "Common::Keymapper::~Keymapper().1",
  "OpenGL::ShaderPipeline::~ShaderPipeline().1",
  "OpenGL::CLUT8LookUpPipeline::~CLUT8LookUpPipeline()",
  "OpenGL::Texture::~Texture().1",
  "OpenGL::FakeTexture::~FakeTexture()",
  "Graphics::TTFFont::getCharWidth(unsigned int) const",
  "Graphics::TTFFont::getBoundingBox(unsigned int) const",
  "Graphics::TTFFont::drawChar(Graphics::Surface*, unsigned int, int, int, unsigned int, unsigned int const*) const",
  "Graphics::VectorRendererSpec<unsigned short>::blitKeyBitmap(Graphics::ManagedSurface const*, Common::Point const&, bool)",
  "Graphics::VectorRendererSpec<unsigned int>::blitKeyBitmap(Graphics::ManagedSurface const*, Common::Point const&, bool)",
  "OpenGL::ShaderSurfaceRenderer::~ShaderSurfaceRenderer().1",
  "OpenGL::ShaderManager::~ShaderManager().1",
  "virtual thunk to SurfaceSdlGraphicsManager::clearOverlay()",
  "non-virtual thunk to MidiDriver_MT32::sysEx(unsigned char const*, unsigned short)",
  "MusicDevice::getCompleteId()",
  "MusicDevice::getHandle()",
  "Common::GenericArchiveMember::GenericArchiveMember(Common::String const&, Common::Archive const*)",
  "Common::GenericArchiveMember::getName() const",
  "Common::String::String(Common::String const&)",
  "Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing(Common::String const&)",
  "DetectedGame::DetectedGame(DetectedGame const&)",
  "Common::HashMap<Common::String, int, Common::Hash<Common::String>, Common::EqualTo<Common::String>>::lookupAndCreateIfMissing(Common::String const&)",
  "Agi::WagFileParser::addPropFromIni(Common::INIFile*, Common::String, Common::String, Agi::WagProperty::WagPropertyCode)",
  "Common::HashMap<Common::String, bool, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing(Common::String const&)",
  "void Common::sort<Common::String*, Common::Less<Common::String>>(Common::String*, Common::String*, Common::Less<Common::String>)",
  "Common::HashMap<Common::String, Scumm::DetectorDesc, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing(Common::String const&)",
  "Common::HashMap<Common::String, int, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing(Common::String const&)",
  "Common::ConfigManager::addGameDomain(Common::String const&)",
  "void Common::sort<Common::ListInternal::Iterator<Common::DebugManager::DebugChannel>, Common::(anonymous namespace)::DebugLevelComperator>(Common::ListInternal::Iterator<Common::DebugManager::DebugChannel>, Common::ListInternal::Iterator<Common::DebugManager::DebugChannel>, Common::(anonymous namespace)::DebugLevelComperator)",
  "void Common::sort<Common::ListInternal::Iterator<Common::String>, Common::Less<Common::String>>(Common::ListInternal::Iterator<Common::String>, Common::ListInternal::Iterator<Common::String>, Common::Less<Common::String>)",
  "Common::operator+(Common::String const&, char)",
  "Common::operator+(Common::String const&, Common::String const&)",
  "Common::operator+(Common::String const&, char const*)",
  "Common::StringTokenizer::StringTokenizer(Common::String const&, Common::String const&)",
  "Common::U32StringTokenizer::U32StringTokenizer(Common::U32String const&, Common::String const&)",
  "Common::TranslationManager::findMatchingLanguage(Common::String const&)",
  "Common::TranslationManager::getCurrentLanguage() const",
  "Common::WinResourceID::toString() const",
  "Common::NEResources::getIDList(Common::WinResourceID const&) const",
  "Common::WinResourceID::WinResourceID(Common::WinResourceID const&)",
  "Common::HashMap<Common::String, Common::PEResources::Section, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing(Common::String const&)",
  "Common::PEResources::getIDList(Common::WinResourceID const&) const",
  "Common::PEResources::getLangList(Common::WinResourceID const&, Common::WinResourceID const&) const",
  "void SWAP<GUI::LauncherEntry>(GUI::LauncherEntry&, GUI::LauncherEntry&)",
  "GUI::GridItemInfo* Common::uninitialized_copy<GUI::GridItemInfo*, GUI::GridItemInfo>(GUI::GridItemInfo*, GUI::GridItemInfo*, GUI::GridItemInfo*)",
  "GUI::GuiObject::GuiObject(Common::String const&)",
  "GUI::ExistingSave* Common::uninitialized_copy<GUI::ExistingSave*, GUI::ExistingSave>(GUI::ExistingSave*, GUI::ExistingSave*, GUI::ExistingSave*)",
  "Common::HashMap<Common::String, GUI::ThemeParser::PaletteColor, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing(Common::String const&)",
  "DefaultAudioCDManager::fillPotentialTrackNames(Common::Array<Common::String>&, int) const",
  "Common::ArtificialEventSource::pollEvent(Common::Event&)",
  "Common::Action::addDefaultInputMapping(Common::String const&)",
  "void Common::sort<Common::HardwareInput*, Common::HardwareInputTypeIdComparator>(Common::HardwareInput*, Common::HardwareInput*, Common::HardwareInputTypeIdComparator)",
  "Common::SaveFileManager::getError()",
  "Common::SaveFileManager::getErrorDesc()",
  "POSIXFilesystemNode::getName() const",
  "POSIXFilesystemNode::getPath() const",
  "Graphics::FontManager::getFontByName(Common::String const&) const",
  "OSystem::getTextFromClipboard()",
  "Common::TranslationManager::getTranslation(char const*, char const*) const",
  "void Common::sort<Common::TLanguage*, Common::Less<Common::TLanguage>>(Common::TLanguage*, Common::TLanguage*, Common::Less<Common::TLanguage>)",
  "Common::U32String::operator+=(Common::U32String const&)",
  "Common::operator+(Common::U32String const&, Common::U32String const&)",
  "GUI::SaveLoadChooser::SaveLoadChooser(Common::U32String const&, Common::U32String const&, bool)",
  "GUI::SaveLoadChooserSimple::getResultString() const",
  "GUI::SaveLoadChooserGrid::getResultString() const",
  "GUI::DropdownButtonWidget::appendEntry(Common::U32String const&, unsigned int)",
  "void Common::sort<Common::U32String*, Common::Less<Common::U32String>>(Common::U32String*, Common::U32String*, Common::Less<Common::U32String>)",
  "Common::U32String::U32String(Common::U32String const&)",
  "void Common::sort<Common::U32String*, GUI::GroupedListWidget::sortGroups()::$_0>(Common::U32String*, Common::U32String*, GUI::GroupedListWidget::sortGroups()::$_0)",
  "GUI::PopUpWidget::appendEntry(Common::U32String const&, unsigned int)",
  "GUI::PopUpWidget::appendEntry(Common::String const&, unsigned int)",
  "Common::Action::Action(char const*, Common::U32String const&)",
  "MusicDevice::getCompleteName()",
  "DetectedGame* Common::copy<DetectedGame const*, DetectedGame*>(DetectedGame const*, DetectedGame const*, DetectedGame*)",
  "Glk::GlkDetectedGame::GlkDetectedGame(char const*, char const*, Common::String const&, GameSupportLevel)",
  "Glk::GlkDetectedGame::GlkDetectedGame(char const*, char const*, char const*, Common::String const&, Common::Language, GameSupportLevel)",
  "Glk::GlkDetectedGame::GlkDetectedGame(char const*, char const*, Common::String const&, Common::String const&, unsigned long, GameSupportLevel)",
  "OSystem_POSIX::getDefaultConfigFileName()",
  "DetectedGame::setGUIOptions(Common::String const&)",
  "Common::ConfigManager::set(Common::String const&, Common::String const&)",
  "Common::ConfigManager::registerDefault(Common::String const&, Common::String const&)",
  "Common::ConfigManager::registerDefault(Common::String const&, char const*)",
  "Common::ConfigManager::registerDefault(Common::String const&, int)",
  "Common::ConfigManager::registerDefault(Common::String const&, bool)",
  "Common::ConfigManager::setActiveDomain(Common::String const&)",
  "Common::Path::Path(Common::Path const&)",
  "Common::Path::Path(Common::String const&, char)",
  "Common::Path::operator=(Common::Path const&)",
  "Common::WinResourceID::operator=(Common::String const&)",
  "GUI::GridItemInfo* Common::copy<GUI::GridItemInfo const*, GUI::GridItemInfo*>(GUI::GridItemInfo const*, GUI::GridItemInfo const*, GUI::GridItemInfo*)",
  "void SWAP<DetectedGame>(DetectedGame&, DetectedGame&)",
  "OpenGL::LibRetro::PresetParser::lookUpValue(Common::String const&, Common::String*)",
  "Common::Keymapper::getMappedActions(Common::Event const&, Common::Array<Common::Action*>&, Common::Keymap::KeymapType) const",
  "Common::SaveFileManager::setError(Common::Error, Common::String const&)",
  "OpenGL::OpenGLGraphicsManager::setShader(Common::String const&)",
  "OpenGL::OpenGLGraphicsManager::beginGFXTransaction()",
  "Posix::assureDirectoryExists(Common::String const&, char const*)",
  "OSystem::setTextInClipboard(Common::U32String const&)",
  "GUI::GridWidget::setGroupHeaderFormat(Common::U32String const&, Common::U32String const&)",
  "GUI::GroupedListWidget::setGroupHeaderFormat(Common::U32String const&, Common::U32String const&)",
  "OpenGL::OpenGLGraphicsManager::displayMessageOnOSD(Common::U32String const&)",
  "GUI::Debugger::debuggerCompletionCallback(GUI::ConsoleDialog*, char const*, Common::String&, void*)",
  "Common::BaseString<char>::deleteLastChar()",
  "Common::ConfigManager::removeGameDomain(Common::String const&)",
  "Common::Path::Path(char const*, char)",
  "GUI::ThemeParser::closedKeyCallback(Common::XMLParser::ParserNode*)",
  "Common::SaveFileManager::clearError()",
  "Common::String::vformat(char const*, void*)",
  "Common::convertFromU32String(Common::U32String const&, Common::CodePage)",
  "Common::String::operator+=(Common::String const&)",
  "Common::operator+(char const*, Common::String const&)",
  "Common::toPrintable(Common::String const&, bool)",
  "Common::MemcachingCaseInsensitiveArchive::translatePath(Common::Path const&) const",
  "Common::GenericArchiveMember::~GenericArchiveMember()",
  "Common::GenericArchiveMember::~GenericArchiveMember().1",
  "AdvancedMetaEngineDetection::~AdvancedMetaEngineDetection()",
  "Common::HashMap<Common::String, Common::String, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::erase(Common::String const&)",
  "Common::Array<ADDetectedGame>::freeStorage(ADDetectedGame*, unsigned int)",
  "Common::HashMap<Common::String, FileProperties, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::operator=(Common::HashMap<Common::String, FileProperties, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&)",
  "AgiMetaEngineDetection::~AgiMetaEngineDetection()",
  "AgiMetaEngineDetection::~AgiMetaEngineDetection().1",
  "DetectedGame::~DetectedGame()",
  "AGSMetaEngineDetection::~AGSMetaEngineDetection()",
  "AGSMetaEngineDetection::~AGSMetaEngineDetection().1",
  "Common::HashMap<Common::String, Common::String, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::operator=(Common::HashMap<Common::String, Common::String, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&)",
  "DirectorMetaEngineDetection::~DirectorMetaEngineDetection()",
  "DirectorMetaEngineDetection::~DirectorMetaEngineDetection().1",
  "Glk::Comprehend::ComprehendMetaEngine::findGame(char const*)",
  "Glk::Blorb::hasFile(Common::Path const&) const",
  "OSystem_SDL::setWindowCaption(Common::U32String const&)",
  "virtual thunk to OSystem_SDL::setWindowCaption(Common::U32String const&)",
  "OSystem_SDL::getSystemLanguage() const",
  "OSystem_POSIX::getDefaultIconsPath()",
  "OSystem_POSIX::getDefaultLogFileName()",
  "Common::List<Common::String>::pop_front()",
  "QualifiedGameDescriptor::~QualifiedGameDescriptor()",
  "Common::List<Common::String>::~List()",
  "MD5CacheManager::~MD5CacheManager()",
  "AdvancedMetaEngineDetection::isEntryGrayListed(ADGameDescription const*) const",
  "FileMapArchive::hasFile(Common::Path const&) const",
  "Common::List<Common::INIFile::Section>::clear()",
  "Common::HashMap<Common::String, Common::Array<Common::AchievementDescription>, Common::Hash<Common::String>, Common::EqualTo<Common::String>>::freeNode(Common::HashMap<Common::String, Common::Array<Common::AchievementDescription>, Common::Hash<Common::String>, Common::EqualTo<Common::String>>::Node*)",
  "Common::AchievementsManager::~AchievementsManager()",
  "Common::AchievementsManager::isAchieved(Common::String const&) const",
  "Common::AchievementsManager::getAchievementCount() const",
  "Common::AchievementsManager::getAchievementDescription(unsigned short) const",
  "ChainedGamesManager::~ChainedGamesManager()",
  "ChainedGamesManager::~ChainedGamesManager().1",
  "Common::HashMap<Common::String, Common::ConfigManager::Domain, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::erase(Common::String const&)",
  "Common::ConfigManager::setInt(Common::String const&, int, Common::String const&)",
  "Common::ConfigManager::setBool(Common::String const&, bool, Common::String const&)",
  "Common::ConfigManager::~ConfigManager()",
  "Common::DebugManager::addAllDebugChannels(DebugChannelDef const*)",
  "Common::DebugManager::removeAllDebugChannels()",
  "Common::HashMap<Common::String, Common::DebugManager::DebugChannel, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::~HashMap()",
  "Common::Error::Error(Common::ErrorCode, Common::String const&)",
  "Common::parseGameGUIOptions(Common::String const&)",
  "Common::getGameGUIOptionsDescriptionLanguage(Common::Language)",
  "Common::String::String(Common::U32String const&, Common::CodePage)",
  "Common::String::format(char const*, ...)",
  "Common::TranslationManager::~TranslationManager()",
  "Common::UnicodeBiDiText::~UnicodeBiDiText()",
  "Common::U32String::format(char const*, ...)",
  "unzLocateFile(void*, char const*, int)",
  "Common::ZipArchive::hasFile(Common::Path const&) const",
  "Common::HashMap<Common::WinResourceID, Common::HashMap<Common::WinResourceID, Common::String, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>::getVal(Common::WinResourceID const&) const",
  "Common::HashMap<Common::WinResourceID, Common::HashMap<Common::WinResourceID, Common::PEResources::Resource, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>::~HashMap()",
  "Common::HashMap<Common::WinResourceID, Common::HashMap<Common::WinResourceID, Common::HashMap<Common::WinResourceID, Common::PEResources::Resource, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>::getVal(Common::WinResourceID const&) const",
  "Common::HashMap<Common::WinResourceID, Common::HashMap<Common::WinResourceID, Common::PEResources::Resource, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>::getVal(Common::WinResourceID const&) const",
  "Common::ObjectPool<Common::XMLParser::ParserNode, 8ul>::deleteChunk(Common::XMLParser::ParserNode*)",
  "Common::HashMap<Common::String, Common::Array<Common::String>, Common::Hash<Common::String>, Common::EqualTo<Common::String>>::~HashMap()",
  "Common::Array<GUI::GridItemInfo>::freeStorage(GUI::GridItemInfo*, unsigned int)",
  "Common::XMLParser::XMLKeyLayout::~XMLKeyLayout()",
  "Common::ConfigManager::Domain::~Domain()",
  "Common::Array<GUI::LangExtraFont>::freeStorage(GUI::LangExtraFont*, unsigned int)",
  "GUI::ThemeParser::parserCallback_font(Common::XMLParser::ParserNode*)",
  "GUI::UnknownGameDialog::encodeUrlString(Common::String const&)",
  "GUI::StaticTextWidget::setValue(int)",
  "GUI::GroupedListWidget::~GroupedListWidget()",
  "GUI::PopUpWidget::clearEntries()",
  "Common::ArtificialEventSource::~ArtificialEventSource()",
  "Common::ArtificialEventSource::~ArtificialEventSource().1",
  "Common::Keymap::~Keymap()",
  "Common::Keymap::unregisterMapping(Common::Action*)",
  "Common::KeymapperDefaultBindings::findDefaultBinding(Common::String, Common::String) const",
  "Common::DelayedEventSource::~DelayedEventSource()",
  "Common::DelayedEventSource::~DelayedEventSource().1",
  "Common::InputWatcher::~InputWatcher()",
  "Common::InputWatcher::~InputWatcher().1",
  "Common::SaveFileManager::~SaveFileManager()",
  "OpenGL::LibRetro::PresetParser::lookUpValue(Common::String const&, float*)",
  "OpenGL::LibRetro::PresetParser::lookUpValue(Common::String const&, bool*)",
  "OpenGL::LibRetro::PresetParser::lookUpValue(Common::String const&, OpenGL::LibRetro::FilteringMode*, OpenGL::LibRetro::FilteringMode)",
  "OpenGL::LibRetro::PresetParser::lookUpValue(Common::String const&, OpenGL::LibRetro::ScaleType*, OpenGL::LibRetro::ScaleType)",
  "OpenGL::LibRetro::PresetParser::lookUpValue(Common::String const&, OpenGL::WrapMode*, OpenGL::WrapMode)",
  "POSIXFilesystemNode::~POSIXFilesystemNode()",
  "POSIXFilesystemNode::~POSIXFilesystemNode().1",
  "Common::BasePtrTrackerImpl<Common::HashMap<Common::String, int, Common::Hash<Common::String>, Common::EqualTo<Common::String>>>::destructObject()",
  "Common::String::operator=(Common::String&&)",
  "Common::String::operator+=(char const*)",
  "Common::String::operator+=(char)",
  "Common::tag2string(unsigned int, bool)",
  "Common::BaseString<char32_t>::makeUnique()",
  "Common::BaseString<char32_t>::deleteChar(unsigned int)",
  "Common::BaseString<char32_t>::deleteLastChar()",
  "Common::BaseString<char32_t>::insertChar(char32_t, unsigned int)",
  "Common::BaseString<char32_t>::insertString(Common::BaseString<char32_t> const&, unsigned int)",
  "Common::BaseString<char32_t>::toLowercase()",
  "Common::U32String::decodeInternal(char const*, unsigned int, Common::CodePage)",
  "Common::U32String::operator+=(char32_t)",
  "Common::U32String::operator=(Common::String const&)",
  "Common::U32String::operator=(char const*)",
  "Common::XMLParser::loadStream(Common::SeekableReadStream*)",
  "OpenGL::LibRetro::PresetParser::lookUpValueScale(Common::String const&, float*, unsigned int*, OpenGL::LibRetro::ScaleType)",
  "non-virtual thunk to Common::VirtualMouse::~VirtualMouse()",
  "Common::VirtualMouse::~VirtualMouse().1",
  "non-virtual thunk to Common::VirtualMouse::~VirtualMouse().1",
  "virtual thunk to SurfaceSdlGraphicsManager::displayActivityIconOnOSD(Graphics::Surface const*)",
  "Common::convertBiDiU32String(Common::U32String const&, Common::BiDiParagraph)",
  "Common::U32String::formatInternal(Common::U32String const*, ...)",
  "virtual thunk to SdlGraphicsManager::initSizeHint(Common::Array<Graphics::Mode> const&)",
  "OpenGL::Shader::enableVertexAttribute(char const*, int, unsigned int, unsigned char, int, void const*)",
  "OpenGL::Shader::enableVertexAttribute(char const*, unsigned int, int, unsigned int, unsigned char, int, unsigned int)",
  "Graphics::VectorRendererSpec<unsigned short>::fillSurface()",
  "Graphics::VectorRendererSpec<unsigned short>::drawInteriorRoundedSquareAlg(int, int, int, int, int, unsigned short, Graphics::VectorRenderer::FillMode)",
  "Graphics::VectorRendererSpec<unsigned short>::drawInteriorRoundedSquareAlgClip(int, int, int, int, int, unsigned short, Graphics::VectorRenderer::FillMode)",
  "Graphics::VectorRendererSpec<unsigned short>::drawTabAlg(int, int, int, int, int, unsigned short, Graphics::VectorRenderer::FillMode, int, int)",
  "Graphics::VectorRendererSpec<unsigned short>::drawTabAlgClip(int, int, int, int, int, unsigned short, Graphics::VectorRenderer::FillMode, int, int)",
  "Graphics::VectorRendererAA<unsigned short>::drawTabAlg(int, int, int, int, int, unsigned short, Graphics::VectorRenderer::FillMode, int, int)",
  "DetectionResults::listRecognizedGames() const",
  "generateUnknownGameReport(DetectedGame const&, bool, bool, unsigned int)",
  "GlkMetaEngineDetection::getSupportedGames() const",
  "ScummMetaEngineDetection::getSupportedGames() const",
  "SkyMetaEngineDetection::getSupportedGames() const",
  "AdvancedMetaEngineDetection::getSupportedGames() const",
  "Common::MemoryPool::allocChunk()",
  "GUI::GridWidget::calcVisibleEntries()",
  "Common::CompositeHardwareInputSet::addHardwareInputSet(Common::HardwareInputSet*)",
  "Common::Array<Common::Action*>::push_back(Common::Array<Common::Action*> const&)",
  "Graphics::VectorRendererSpec<unsigned int>::precalcGradient(int)",
  "GUI::ThemeEngine::getImageSurface(Common::String const&) const",
  "Common::ConfigManager::getDomain(Common::String const&) const",
  "Common::ConfigManager::get(Common::String const&) const",
  "Graphics::FontManager::getFontByUsage(Graphics::FontManager::FontUsage) const",
  "SdlGraphicsManager::setSystemMousePosition(int, int)",
  "virtual thunk to SdlGraphicsManager::setSystemMousePosition(int, int)",
  "virtual thunk to SurfaceSdlGraphicsManager::grabOverlay(Graphics::Surface&) const",
  "OpenGL::TiledSurface::fill(unsigned int)",
  "DetectionResults::generateUnknownGameReport(bool, unsigned int) const",
  "Common::PEResources::~PEResources().1",
  "GUI::MetadataParser::~MetadataParser().1",
  "GUI::ThemeParser::~ThemeParser().1",
  "MT32Emu::RhythmPart::noteOff(unsigned int)",
  "MT32Emu::Part::noteOff(unsigned int)",
  "mt32emu_play_msg",
  "png_get_IHDR",
  "png_set_IHDR",
  "png_colorspace_set_sRGB",
  "png_chunk_benign_error",
  "png_handle_IEND",
  "png_set_expand",
  "png_icc_profile_error",
  "png_read_finish_row",
  "png_write_chunk",
  "png_write_tIME",
  "png_write_finish_row",
  "Graphics::TTFFont::~TTFFont().1",
  "pfr_get_kerning",
  "sfnt_get_charset_id",
  "raccess_guess_apple_double",
  "raccess_guess_apple_single",
  "raccess_guess_vfat",
  "raccess_guess_linux_cap",
  "af_dummy_hints_apply",
  "af_latin_hints_apply",
  "af_cjk_hints_apply",
  "af_latin_hints_detect_features",
  "af_cjk_hints_detect_features",
  "TT_Load_Composite_Glyph",
  "cf2_doStems",
  "cf2_hintmap_build",
  "ps_hints_close",
  "t1_hints_stem",
  "t2_hints_stems",
  "ps_hints_t2counter",
  "ps_hints_t2mask",
  "DISKAUDIO_DetectDevices",
  "SdlMixerManager::suspendAudio()",
  "SDL_AudioOpenDevice_Default",
  "SDL_BlendPoint_RGB",
  "SDL_BlendPoint_RGBA",
  "SDL_BlendFillRect_RGB",
  "SDL_BlendFillRect_RGBA",
  "stdio_write",
  "EMSCRIPTEN_JoystickRumble",
  "EMSCRIPTEN_JoystickSetLED",
  "Emscripten_WarpMouse",
  "SDL_GameControllerGetAxis",
  "SDL_InitFormat",
  "SDL_SetClipRect",
  "SDL_SoftStretch",
  "SDL_SoftStretchLinear",
  "EMSCRIPTEN_JoystickUpdate",
  "SDL_AutoUpdateJoysticksChanged",
  "SDL_ResetKeyboard",
  "SDL_ReleaseAutoReleaseKeys",
  "SDL_SendPendingSignalEvents",
  "Emscripten_HandleBeforeUnload",
  "SdlEventSource::~SdlEventSource().1",
  "GLES2_QueueGeometry",
  "GLES2_QueueDrawLines",
  "GLES2_QueueDrawPoints",
  "SW_QueueGeometry",
  "SW_QueueCopyEx",
  "SW_QueueCopy",
  "SW_QueueFillRects",
  "SW_QueueDrawPoints",
  "Emscripten_HandleMouseMove",
  "SdlGraphicsManager::lockMouse(bool)",
  "virtual thunk to SdlGraphicsManager::lockMouse(bool)",
  "SDL_RLEBlit",
  "SDL_RLEAlphaBlit",
  "SW_UpdateTexture",
  "SdlWindow::~SdlWindow().1",
  "SdlGraphicsManager::notifyActiveAreaChanged()",
  "virtual thunk to SdlGraphicsManager::notifyActiveAreaChanged()",
  "PosixIoStream::~PosixIoStream()",
  "PosixIoStream::~PosixIoStream().1",
  "non-virtual thunk to PosixIoStream::~PosixIoStream()",
  "non-virtual thunk to PosixIoStream::~PosixIoStream().1",
  "MT32Emu::ReportHandler::printDebug(char const*, void*)",
  "nsvg__parseColor(char const*)",
  "fseek",
  "StdioStream::size() const",
  "non-virtual thunk to StdioStream::size() const",
  "StdioStream::seek(long long, int)",
  "non-virtual thunk to StdioStream::seek(long long, int)",
  "StdioStream::pos() const",
  "non-virtual thunk to StdioStream::pos() const",
  "fputs",
  "StdioStream::write(void const*, unsigned int)",
  "non-virtual thunk to StdioStream::write(void const*, unsigned int)",
  "pad",
  "fmt_fp",
  "qsort",
  "strtod",
  "vsnprintf",
  "fiprintf",
  "iprintf",
  "siprintf",
  "Graphics::YUVToRGBManager::convert410(Graphics::Surface*, Graphics::YUVToRGBManager::LuminanceScale, unsigned char const*, unsigned char const*, unsigned char const*, int, int, int, int)",
  "SdlWindow::SdlWindow()",
  "Common::String::String(char const*)",
  "QualifiedGameDescriptor::QualifiedGameDescriptor(char const*, PlainGameDescriptor const&)",
  "Common::Error::Error(Common::ErrorCode)",
  "Common::String::substr(unsigned long, unsigned long) const",
  "OSystem::getDefaultConfigFileName()",
  "OSystem::getSystemLanguage() const",
  "Graphics::Font::getFontName() const",
  "Graphics::TTFFont::getFontName() const",
  "Common::StringTokenizer::nextToken()",
  "SRCTools::IIR2xDecimator::IIR2xDecimator(SRCTools::IIRResampler::Quality)",
  "Common::HashMap<Common::String, Common::String, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::operator[](Common::String const&)",
  "virtual thunk to OSystem_SDL::getHardwareInputSet()",
  "Common::U32String::substr(unsigned long, unsigned long) const",
  "Common::U32StringTokenizer::nextToken()",
  "Common::ConfigManager::getDomain(Common::String const&)",
  "SdlGraphicsManager::activateManager()",
  "Common::HashMap<int, Graphics::ManagedSurface const*, Common::Hash<int>, Common::EqualTo<int>>::lookupAndCreateIfMissing(int const&)",
  "Common::VirtualMouse::notifyEvent(Common::Event const&)",
  "OpenGLSdlGraphicsManager::hasFeature(OSystem::Feature) const",
  "GUI::ListWidget::~ListWidget().1",
  "non-virtual thunk to GUI::ListWidget::~ListWidget()",
  "non-virtual thunk to GUI::ListWidget::~ListWidget().1",
  "Graphics::TTFFont::drawChar(Graphics::Surface*, unsigned int, int, int, unsigned int) const",
  "GUI::ThemeEval::getVar(Common::String const&, int)",
  "void Common::sort<GUI::LauncherEntry*, GUI::LauncherEntryComparator>(GUI::LauncherEntry*, GUI::LauncherEntry*, GUI::LauncherEntryComparator)",
  "Common::TranslationManager::getTranslation(char const*) const",
  "Common::TranslationManager::getTranslation(Common::String const&) const",
  "Common::TranslationManager::getTranslation(Common::String const&, Common::String const&) const",
  "virtual thunk to OSystem_POSIX::getDefaultConfigFileName()",
  "Common::Path::append(char const*, char) const",
  "void Common::sort<DetectedGame*, GUI::GameTargetLess>(DetectedGame*, DetectedGame*, GUI::GameTargetLess)",
  "void Common::sort<DetectedGame*, GUI::GameDescLess>(DetectedGame*, DetectedGame*, GUI::GameDescLess)",
  "DetectedGame::appendGUIOptions(Common::String const&)",
  "AccessMetaEngineDetection::~AccessMetaEngineDetection()",
  "GlkMetaEngineDetection::findGame(char const*) const",
  "virtual thunk to OSystem_SDL::getSystemLanguage() const",
  "MD5CacheManager::~MD5CacheManager().1",
  "Common::AchievementsManager::~AchievementsManager().1",
  "Common::ConfigManager::~ConfigManager().1",
  "Common::DebugManager::~DebugManager()",
  "Common::DebugManager::~DebugManager().1",
  "MetaEngineDetection::parseAndCustomizeGuiOptions(Common::String const&, Common::String const&) const",
  "Common::MainTranslationManager::~MainTranslationManager()",
  "Common::MainTranslationManager::~MainTranslationManager().1",
  "GUI::MetadataParser::CustomXMLKeyLayout::~CustomXMLKeyLayout()",
  "GUI::GroupedListWidget::~GroupedListWidget().1",
  "non-virtual thunk to GUI::GroupedListWidget::~GroupedListWidget()",
  "non-virtual thunk to GUI::GroupedListWidget::~GroupedListWidget().1",
  "MidiDriver::musicType2GUIO(unsigned int)",
  "Common::Path::toString(char) const",
  "Common::String::decode(Common::CodePage) const",
  "Common::U32String::U32String(char const*, Common::CodePage)",
  "Common::U32String::U32String(Common::String const&, Common::CodePage)",
  "GUI::ListWidget::escapeString(Common::U32String const&)",
  "Graphics::VectorRendererAA<unsigned int>::drawTabAlg(int, int, int, int, int, unsigned int, Graphics::VectorRenderer::FillMode, int, int)",
  "Graphics::VectorRendererSpec<unsigned int>::fillSurface()",
  "Graphics::VectorRendererSpec<unsigned int>::drawInteriorRoundedSquareAlg(int, int, int, int, int, unsigned int, Graphics::VectorRenderer::FillMode)",
  "Graphics::VectorRendererSpec<unsigned int>::drawInteriorRoundedSquareAlgClip(int, int, int, int, int, unsigned int, Graphics::VectorRenderer::FillMode)",
  "Graphics::VectorRendererSpec<unsigned int>::drawTabAlg(int, int, int, int, int, unsigned int, Graphics::VectorRenderer::FillMode, int, int)",
  "Graphics::VectorRendererSpec<unsigned int>::drawTabAlgClip(int, int, int, int, int, unsigned int, Graphics::VectorRenderer::FillMode, int, int)",
  "Common::ConfigManager::hasKey(Common::String const&, Common::String const&) const",
  "OpenGLSdlGraphics3dManager::clearOverlay()",
  "virtual thunk to OpenGLSdlGraphics3dManager::clearOverlay()",
  "af_indic_hints_apply",
  "nsvg__parseAttr(NSVGparser*, char const*, char const*)",
  "PosixIoStream::size() const",
  "non-virtual thunk to PosixIoStream::size() const",
  "SDL_qsort",
  "atof",
  "SDL_snprintf",
  "SDL_vsnprintf",
  "__dl_seterr",
  "snprintf",
  "Base::usage(char const*, ...)",
  "SDL_LogOutput",
  "MT32Emu::ReportHandler::showLCDMessage(char const*)",
  "format_message",
  "TownsEmuMusicPlugin::createInstance(MidiDriver**, unsigned int) const",
  "non-virtual thunk to Common::VirtualMouse::notifyEvent(Common::Event const&)",
  "Common::ZipArchive::translatePath(Common::Path const&) const",
  "GUI::ListWidget::getThemeColor(GUI::ThemeEngine::FontColor)",
  "POSIXFilesystemNode::getDisplayName() const",
  "nsvg__startElement(void*, char const*, char const**)",
  "nsvg__parseGradient(NSVGparser*, char const**, char)",
  "nsvg__parseGradientStop(NSVGparser*, char const**)",
  "nsvg__parseAttribs(NSVGparser*, char const**)",
  "nsvg__parsePoly(NSVGparser*, char const**, int)",
  "SDL_MouseNormalSpeedScaleChanged",
  "SDL_MouseRelativeSpeedScaleChanged",
  "SDL_PrivateAppendToMappingString",
  "GuessControllerType",
  "SDL_UnloadObject"
]