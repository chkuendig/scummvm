# -------- Generated by configure -----------

SAVED_CONFIGFLAGS       := --host=wasm32-unknown-emscripten --build=wasm32-unknown-emscripten --enable-verbose-build --disable-all-engines --enable-plugins --default-dynamic --enable-engine=testbed --with-vorbis-prefix=/Users/kuendig/Projects/personal_projects/scummvm/scummvm/dists/emscripten/libs/build/ --with-theoradec-prefix=/Users/kuendig/Projects/personal_projects/scummvm/scummvm/dists/emscripten/libs/build/ --with-faad-prefix=/Users/kuendig/Projects/personal_projects/scummvm/scummvm/dists/emscripten/libs/build/ --with-mad-prefix=/Users/kuendig/Projects/personal_projects/scummvm/scummvm/dists/emscripten/libs/build/ --with-mpeg2-prefix=/Users/kuendig/Projects/personal_projects/scummvm/scummvm/dists/emscripten/libs/build/ --with-a52-prefix=/Users/kuendig/Projects/personal_projects/scummvm/scummvm/dists/emscripten/libs/build/
SAVED_AR                := /Users/kuendig/Projects/personal_projects/scummvm/scummvm/dists/emscripten/emsdk-3.1.28/upstream/emscripten/emar
SAVED_AS                := 
SAVED_ASFLAGS           := 
SAVED_CPPFLAGS          := 
SAVED_CXX               := /Users/kuendig/Projects/personal_projects/scummvm/scummvm/dists/emscripten/emsdk-3.1.28/upstream/emscripten/em++
SAVED_CXXFLAGS          := 
SAVED_DWP               := 
SAVED_LD                := /Users/kuendig/Projects/personal_projects/scummvm/scummvm/dists/emscripten/emsdk-3.1.28/upstream/emscripten/emcc
SAVED_LDFLAGS           := 
SAVED_PKG_CONFIG_LIBDIR := /Users/kuendig/Projects/personal_projects/scummvm/scummvm/dists/emscripten/emsdk-3.1.28/upstream/emscripten/cache/sysroot/local/lib/pkgconfig:/Users/kuendig/Projects/personal_projects/scummvm/scummvm/dists/emscripten/emsdk-3.1.28/upstream/emscripten/cache/sysroot/lib/pkgconfig
SAVED_RANLIB            := /Users/kuendig/Projects/personal_projects/scummvm/scummvm/dists/emscripten/emsdk-3.1.28/upstream/emscripten/emranlib
SAVED_SDL_CONFIG        := 
SAVED_STRIP             := 
SAVED_WINDRES           := 
SAVED_WINDRESFLAGS      := 

CXX := em++
CXXFLAGS :=   -W -Wno-unused-parameter -Wno-empty-body -fno-operator-names -std=c++11 -pedantic -g -Wglobal-constructors -Wno-undefined-var-template -Wno-pragma-pack -Wno-address-of-packed-member -O3 -Wuninitialized -fPIC -I/Users/kuendig/Projects/personal_projects/scummvm/scummvm/dists/emscripten/emsdk-3.1.28/upstream/emscripten/cache/sysroot/include/freetype2/
LD := em++
LIBS += -sUSE_SDL=2 -lm -L/Users/kuendig/Projects/personal_projects/scummvm/scummvm/dists/emscripten/libs/build//lib -lvorbisfile -lvorbis -L/Users/kuendig/Projects/personal_projects/scummvm/scummvm/dists/emscripten/libs/build//lib -lmad -L/Users/kuendig/Projects/personal_projects/scummvm/scummvm/dists/emscripten/libs/build//lib -ltheoradec -L/Users/kuendig/Projects/personal_projects/scummvm/scummvm/dists/emscripten/libs/build//lib -lfaad  -L/Users/kuendig/Projects/personal_projects/scummvm/scummvm/dists/emscripten/libs/build//lib -lmpeg2 -L/Users/kuendig/Projects/personal_projects/scummvm/scummvm/dists/emscripten/libs/build//lib -la52
RANLIB := emranlib
STRIP := strip
AR := emar cr
AS := as
ASFLAGS := 
DWP := dwp
WINDRES := windres
LDD := ldd
WINDRESFLAGS := 
STAGINGPATH=staging
AMIGAOSPATH=install
MORPHOSPATH=PROGDIR:
STATICLIBPATH=
XCODETOOLSPATH=
SPARKLEPATH=
SDLCONFIG=/Users/kuendig/Projects/personal_projects/scummvm/scummvm/dists/emscripten/emsdk-3.1.28/upstream/emscripten/cache/sysroot/bin/sdl2-config

ABI := 

BACKEND := sdl
MODULES += backends/platform/sdl
MODULE_DIRS += 
EXEPRE := 
EXEEXT := .html
NASM := 
NASMFLAGS := 
PANDOC := pandoc
CURL := curl
PANDOCFORMAT := plain
PANDOCEXT := 
MANUALVERSION := latest
ZLIB_LIBS := -lz
ZLIB_CFLAGS := 

prefix = /usr/local
exec_prefix = ${prefix}
bindir = ${exec_prefix}/bin
libdir = ${exec_prefix}/lib
datarootdir = ${prefix}/share
datadir = /data
mandir = ${datarootdir}/man
docdir = ${datarootdir}/doc/scummvm


HAVE_CLANG = 1
HAVE_GCC = 1
CXX_UPDATE_DEP_FLAG = -MMD -MF "$(*D)/$(DEPDIR)/$(*F).d" -MQ "$@" -MP
EMSCRIPTEN = 1
SDL_BACKEND = 1
USE_SDL2 = 1
POSIX = 1
VERBOSE_BUILD = 1
# USE_ELF_LOADER = 1
DYNAMIC_MODULES = 1
PLUGIN_PREFIX := lib
PLUGIN_SUFFIX := .so
DETECTION_STATIC = 1
DETECTION_FULL = 1
USE_MT32EMU = 1
USE_LUA = 1
# DISABLE_NUKED_OPL = 1
USE_RGB_COLOR = 1
USE_HIGHRES = 1
USE_SAVEGAME_TIMESTAMP = 1
USE_SCALERS = 1
USE_HQ_SCALERS = 1
USE_EDGE_SCALERS = 1
USE_ASPECT = 1
USE_OGG = 1
USE_VORBIS = 1
# USE_TREMOR = 1
# ENABLE_OPL2LPT = 1
# USE_RETROWAVE = 1
# USE_FLAC = 1
USE_MAD = 1
# USE_ALSA = 1
USE_JPEG = 1
USE_PNG = 1
# USE_GIF = 1
USE_THEORADEC = 1
USE_FAAD = 1
USE_ZLIB = 1
USE_MPEG2 = 1
USE_A52 = 1
# USE_LIBCURL = 1
# USE_CLOUD = 1
# USE_FLUIDSYNTH = 1
USE_FREETYPE2 = 1
USE_OPENGL = 1
USE_GLAD = 1
# USE_OPENGL_GAME = 1
USE_OPENGL_SHADERS = 1
# USE_NASM = 1
# USE_PANDOC = 1
# USE_CURL = 1
# USE_FRIBIDI = 1
# ENABLE_TEST_CPP_11 = 1
# USE_DISCORD = 1
# ENABLE_VKEYBD = 1
# ENABLE_EVENTRECORDER = 1
USE_TRANSLATION = 1
# USE_TASKBAR = 1
# USE_SYSDIALOGS = 1
# USE_TTS = 1
USE_TINYGL = 1
USE_BINK = 1
# USE_UPDATES = 1
BUILTIN_RESOURCES = 1
# ENABLE_ACCESS
# ENABLE_ADL
# ENABLE_AGI
# ENABLE_AGOS
# ENABLE_AGOS2
# ENABLE_AGS
# ENABLE_ASYLUM
# ENABLE_AVALANCHE
# ENABLE_BBVS
# ENABLE_BLADERUNNER
# ENABLE_BURIED
# ENABLE_CGE
# ENABLE_CGE2
# ENABLE_CHEWY
# ENABLE_CINE
# ENABLE_COMPOSER
# ENABLE_CRUISE
# ENABLE_CRYO
# ENABLE_CRYOMNI3D
# ENABLE_VERSAILLES
# ENABLE_DIRECTOR
# ENABLE_DM
# ENABLE_DRACI
# ENABLE_DRAGONS
# ENABLE_DRASCULA
# ENABLE_DREAMWEB
# ENABLE_FREESCAPE
# ENABLE_GLK
# ENABLE_GNAP
# ENABLE_GOB
# ENABLE_GRIFFON
# ENABLE_GRIM
# ENABLE_MONKEY4
# ENABLE_GROOVIE
# ENABLE_GROOVIE2
# ENABLE_HADESCH
# ENABLE_HDB
# ENABLE_HOPKINS
# ENABLE_HUGO
# ENABLE_HYPNO
# ENABLE_ICB
# ENABLE_ILLUSIONS
# ENABLE_KINGDOM
# ENABLE_KYRA
# ENABLE_LOL
# ENABLE_EOB
# ENABLE_LAB
# ENABLE_LASTEXPRESS
# ENABLE_LILLIPUT
# ENABLE_LURE
# ENABLE_MACVENTURE
# ENABLE_MADE
# ENABLE_MADS
# ENABLE_MADSV2
# ENABLE_MOHAWK
# ENABLE_CSTIME
# ENABLE_RIVEN
# ENABLE_MYST
# ENABLE_MYSTME
# ENABLE_MORTEVIELLE
# ENABLE_MTROPOLIS
# ENABLE_MUTATIONOFJB
# ENABLE_MYST3
# ENABLE_NANCY
# ENABLE_NEVERHOOD
# ENABLE_NGI
# ENABLE_PARALLACTION
# ENABLE_PEGASUS
# ENABLE_PETKA
# ENABLE_PINK
# ENABLE_PLAYGROUND3D
# ENABLE_PLUMBERS
# ENABLE_PRINCE
# ENABLE_PRIVATE
# ENABLE_QUEEN
# ENABLE_SAGA
# ENABLE_IHNM
# ENABLE_SAGA2
# ENABLE_SCI
# ENABLE_SCI32
# ENABLE_SCUMM
# ENABLE_SCUMM_7_8
# ENABLE_HE
# ENABLE_SHERLOCK
# ENABLE_SKY
# ENABLE_SLUDGE
# ENABLE_STARK
# ENABLE_STARTREK
# ENABLE_SUPERNOVA
# ENABLE_SWORD1
# ENABLE_SWORD2
# ENABLE_SWORD25
# ENABLE_TEENAGENT
ENABLE_TESTBED = DYNAMIC_PLUGIN
# ENABLE_TINSEL
# ENABLE_TITANIC
# ENABLE_TOLTECS
# ENABLE_TONY
# ENABLE_TOON
# ENABLE_TOUCHE
# ENABLE_TRECISION
# ENABLE_TSAGE
# ENABLE_TUCKER
# ENABLE_TWINE
# ENABLE_ULTIMA
# ENABLE_VOYEUR
# ENABLE_WAGE
# ENABLE_WINTERMUTE
# ENABLE_WME3D
# ENABLE_FOXTAIL
# ENABLE_HEROCRAFT
# ENABLE_XEEN
# ENABLE_ZVISION

INCLUDES += -sUSE_SDL=2 -I/Users/kuendig/Projects/personal_projects/scummvm/scummvm/dists/emscripten/libs/build//include  -I/Users/kuendig/Projects/personal_projects/scummvm/scummvm/dists/emscripten/libs/build//include   -I/Users/kuendig/Projects/personal_projects/scummvm/scummvm/dists/emscripten/libs/build//include -I/Users/kuendig/Projects/personal_projects/scummvm/scummvm/dists/emscripten/libs/build//include  -I/Users/kuendig/Projects/personal_projects/scummvm/scummvm/dists/emscripten/libs/build//include 
OBJS += 
DEFINES += -DEMSCRIPTEN -DSDL_BACKEND -DPOSIX -DHAS_FSEEKO_OFFT_64 -DUNCACHED_PLUGINS -DDATA_PATH=\"/data\" -DPLUGIN_DIRECTORY=\"${exec_prefix}/lib/scummvm\"
LDFLAGS += -s ALLOW_MEMORY_GROWTH=1 -s ASYNCIFY -s FORCE_FILESYSTEM=1 -O3 -s ASYNCIFY_ADVISE=1 -s USE_FREETYPE=1 -s SUPPORT_LONGJMP=1 -s USE_LIBJPEG=1 -s USE_LIBPNG=1 -s USE_OGG=1 -s USE_ZLIB=1 -s FULL_ES2=1 -s MAX_WEBGL_VERSION=1 --pre-js ./dists/emscripten/custom_shell-pre.js --post-js ./dists/emscripten/custom_shell-post.js --shell-file ./dists/emscripten/custom_shell.html

PLUGIN_LDFLAGS = 

PLUGIN_EXTRA_DEPS =
PLUGIN_LDFLAGS  += $(LDFLAGS) -s SIDE_MODULE=1 -s ASYNCIFY_IMPORTS=["Adl::getVersion_WOZ(Common::File&)", "Adl::readTrack_WOZ(Common::File&, unsigned int, bool)", "Adl::AdlMetaEngineDetection::detectGame(Common::FSNode const&, Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::Language, Common::Platform, Common::String const&, unsigned int, bool)", "Adl::decodeTrack(Common::SeekableReadStream&, unsigned int, bool, unsigned char*, unsigned int, Common::Array<bool>&)", "AGSMetaEngineDetection::detectGames(Common::FSList const&, unsigned int, bool)", "Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::~HashMap()", "AgiMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const", "AGSMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const", "CGE::CGEMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const", "CGE2::CGE2MetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const", "DirectorMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const", "Glk::Blorb::getMember(Common::Path const&) const", "Glk::Blorb::isBlorb(Common::SeekableReadStream&, unsigned int)", "Glk::Blorb::readRIdx(Common::SeekableReadStream&, Common::Array<Glk::ChunkEntry>&)", "Common::BasePtrTrackerImpl<Common::GenericArchiveMember>::destructObject()", "Glk::Blorb::~Blorb().1", "Glk::Blorb::~Blorb()", "Glk::Blorb::createReadStreamForMember(Common::Path const&) const", "Gob::DataIO::unpackChunk(Common::SeekableReadStream&, unsigned char*, unsigned int)", "Gob::DataIO::openArchive(Common::String, bool)", "GobMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const", "Scumm::searchFSNode(Common::FSList const&, Common::String const&, Common::FSNode&)", "QueenMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const", "Sci::SciMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const", "Scumm::composeFileHashMap(Common::HashMap<Common::String, Scumm::DetectorDesc, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>&, Common::FSList const&, int, char const* const*)", "Scumm::ScummDiskImage::openDisk(char)", "Scumm::detectLanguage(Common::FSList const&, unsigned char, Common::Language)", "Scumm::ScummDiskImage::close()", "Scumm::ScummDiskImage::extractResource(Common::WriteStream*, int)", "Scumm::ScummDiskImage::read(void*, unsigned int)", "Common::SeekableReadStream::skip(unsigned int)", "Scumm::ScummDiskImage::eos() const", "Scumm::ScummDiskImage::seek(long long, int)", "Common::WriteStream::finalize()", "Scumm::ScummDiskImage::pos() const", "Scumm::ScummNESFile::close()", "Scumm::ScummNESFile::open(Common::Path const&)", "ScummMetaEngineDetection::detectGames(Common::FSList const&, unsigned int, bool)", "Scumm::ScummNESFile::openSubFile(Common::String const&)", "Scumm::ScummDiskImage::extractIndex(Common::WriteStream*)", "SkyMetaEngineDetection::detectGames(Common::FSList const&, unsigned int, bool)Scumm::ScummDiskImage::size() constScumm::ScummDiskImage::openSubFile(Common::String const&)", "Scumm::ScummNESFile::extractResource(Common::WriteStream*, Scumm::ScummNESFile::Resource const*, Scumm::ScummNESFile::ResType)", "SludgeMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const", "Wintermute::WintermuteMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const", "TinselMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const", "TuckerMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const", "OSystem_SDL::init()", "OSystem_SDL::hasFeature(OSystem::Feature)", "virtual thunk to OSystem_SDL::init()", "virtual thunk to OSystem_SDL::hasFeature(OSystem::Feature)", "OSystem_SDL::~OSystem_SDL()", "OSystem_SDL::engineInit()", "virtual thunk to OSystem_SDL::engineInit()", "OSystem_SDL::addSysArchivesToSearchSet(Common::SearchSet&, int)", "OSystem_SDL::hasTextInClipboard()", "OSystem_SDL::setTextInClipboard(Common::U32String const&)", "OSystem_SDL::createLogFile()", "OSystem_SDL::getSupportedGraphicsModes() const", "non-virtual thunk to OSystem_SDL::getSupportedGraphicsModes() const", "virtual thunk to OSystem_SDL::getSupportedGraphicsModes() const", "OSystem_SDL::getDefaultGraphicsMode() const", "non-virtual thunk to OSystem_SDL::getDefaultGraphicsMode() const", "virtual thunk to OSystem_SDL::getDefaultGraphicsMode() const", "OSystem_SDL::getGraphicsMode() const", "non-virtual thunk to OSystem_SDL::getGraphicsMode() const", "virtual thunk to OSystem_SDL::getGraphicsMode() const", "virtual thunk to OSystem_SDL::getTextFromClipboard()", "SdlWindow::getDpiScalingFactor() const", "SdlWindow::createOrUpdateWindow(int, int, unsigned int)", "OSystem_POSIX::addSysArchivesToSearchSet(Common::SearchSet&, int)", "SdlWindow::setupIcon()", "OSystem_POSIX::getScreenshotsPath()", "OSystem_Emscripten::getFeatureState(OSystem::Feature)", "non-virtual thunk to OSystem_Emscripten::getFeatureState(OSystem::Feature)", "virtual thunk to OSystem_Emscripten::getFeatureState(OSystem::Feature)", "OSystem_Emscripten::setFeatureState(OSystem::Feature, bool)", "non-virtual thunk to OSystem_Emscripten::setFeatureState(OSystem::Feature, bool)", "virtual thunk to OSystem_Emscripten::setFeatureState(OSystem::Feature, bool)", "setupGraphics(OSystem&)", "launcherDialog()", "Common::FSNode::~FSNode()", "Base::detectGames(Common::String const&, Common::String const&, Common::String const&, bool)", "runGame(Plugin const*, Plugin const*, OSystem&, Common::String const&)", "Common::Array<SaveStateDescriptor>::freeStorage(SaveStateDescriptor*, unsigned int)", "Base::recListGames(Common::FSNode const&, Common::String const&, Common::String const&, bool)", "Base::recAddGames(Common::FSNode const&, Common::String const&, Common::String const&, bool)", "StaticPlugin::~StaticPlugin()", "StaticPlugin::~StaticPlugin().1", "Base::getGameList(Common::FSNode const&)", "PluginManager::~PluginManager()", "PluginManager::unloadAllPlugins()", "OSystem_SDL::initBackend()", "PluginManager::getEngineFromMetaEngine(Plugin const*)", "PluginManager::loadAllPlugins()", "PluginManager::loadAllPluginsOfType(PluginType)", "EngineManager::findPlugin(Common::String const&) const", "EngineManager::detectGames(Common::FSList const&, unsigned int, bool)", "EngineManager::findGamesMatching(Common::String const&, Common::String const&) const", "EngineManager::findTarget(Common::String const&, Plugin const**) const", "ScalerManager::findScalerPluginIndex(char const*) const", "EngineManager::upgradeTargetIfNecessary(Common::String const&) const", "AdvancedMetaEngineDetection::toDetectedGame(ADDetectedGame const&, ADDetectedGameExtraInfo*) const", "AdvancedMetaEngineDetection::detectGames(Common::FSList const&, unsigned int, bool)", "AdvancedMetaEngineDetection::preprocessDescriptions()", "AdvancedMetaEngineDetection::composeFileHashMap(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>&, Common::FSList const&, int, Common::String const&) const", "AdvancedMetaEngineDetection::getFileProperties(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, ADGameDescription const&, Common::String const&, FileProperties&) const", "AdvancedMetaEngineDetection::detectGame(Common::FSNode const&, Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::Language, Common::Platform, Common::String const&, unsigned int, bool)", "FileMapArchive::createReadStreamForMember(Common::Path const&) const", "MainMenuDialog::~MainMenuDialog()", "main", "Common::AchievementsManager::setActiveDomain(Common::AchievementsInfo const&)", "MainMenuDialog::reflowLayout()", "GUI::ConfigDialog::build()", "GUI::ConfigDialog::apply()", "MainMenuDialog::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)", "GUI::GuiObject::getChildX() const", "GUI::GuiObject::getChildY() const", "GUI::Dialog::receivedFocus(int, int)", "GUI::Widget::getAbsX() const", "GUI::Widget::getAbsY() const", "GUI::Widget::handleMouseWheel(int, int, int)", "GUI::Widget::releaseFocus()", "PauseToken::~PauseToken()", "Engine::pauseEngine()", "MetaEngine::copySaveFileToFreeSlot(char const*, int)", "void SWAP<SaveStateDescriptor>(SaveStateDescriptor&, SaveStateDescriptor&)", "Common::Array<SaveStateDescriptor>::insert_aux(SaveStateDescriptor*, SaveStateDescriptor const*, SaveStateDescriptor const*)", "SaveStateDescriptor::initSaveType(MetaEngine const*)", "GUI::AboutDialog::reflowLayout()", "SaveStateDescriptor* Common::copy<SaveStateDescriptor const*, SaveStateDescriptor*>(SaveStateDescriptor const*, SaveStateDescriptor const*, SaveStateDescriptor*)", "GUI::AboutDialog::open()", "GUI::AboutDialog::AboutDialog()", "GUI::AboutDialog::handleTickle()", "GUI::AboutDialog::handleMouseUp(int, int, int, int)", "GUI::AboutDialog::drawDialog(GUI::DrawLayer)", "GUI::AboutDialog::handleKeyUp(Common::KeyState)", "GUI::EE::setupGraphics()", "GUI::EE::putshapes()", "GUI::AboutDialog::handleKeyDown(Common::KeyState)", "GUI::ConsoleDialog::init()", "GUI::ConsoleDialog::drawCaret(bool)", "GUI::ConsoleDialog::~ConsoleDialog()", "GUI::ConsoleDialog::open()", "GUI::ConsoleDialog::handleMouseWheel(int, int, int)", "GUI::ConsoleDialog::handleTickle()", "GUI::ConsoleDialog::drawLine(int)", "GUI::Debugger::cmdExit(int, char const**)", "GUI::Debugger::registerCmd(Common::String const&, Common::Functor2<int, char const**, bool>*)", "GUI::ConsoleDialog::handleKeyDown(Common::KeyState)", "GUI::Debugger::cmdOpenLog(int, char const**)", "GUI::Debugger::cmdMd5(int, char const**)", "GUI::Debugger::cmdMd5Mac(int, char const**)", "GUI::Debugger::~Debugger()", "GUI::Debugger::parseCommand(char const*)", "GUI::Debugger::attach(char const*)", "GUI::Debugger::postEnter()", "void Common::sort<Common::ListInternal::Iterator<Common::SharedPtr<Common::ArchiveMember>>, GUI::ArchiveMemberLess>(Common::ListInternal::Iterator<Common::SharedPtr<Common::ArchiveMember>>, Common::ListInternal::Iterator<Common::SharedPtr<Common::ArchiveMember>>, GUI::ArchiveMemberLess)", "GUI::Debugger::handleCommand(int, char const**, bool&)", "Common::Functor2Mem<int, char const**, bool, GUI::Debugger>::operator()(int, char const**) const", "GUI::Debugger::onFrame()", "GUI::Dialog::runModal()", "GUI::Dialog::setDefaultFocusedWidget()", "GUI::Dialog::lostFocus()", "GUI::Dialog::open()", "GUI::Dialog::releaseFocus()", "GUI::Dialog::handleMouseUp(int, int, int, int)", "GUI::Dialog::handleMouseDown(int, int, int, int)", "GUI::Dialog::drawDialog(GUI::DrawLayer) GUI::Dialog::handleMouseWheel(int, int, int) GUI::Dialog::close()GUI::Dialog::handleKeyUp(Common::KeyState)", "GUI::Dialog::handleTickle()", "GUI::Dialog::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)", "GUI::Dialog::removeWidget(GUI::Widget*)", "GUI::Dialog::handleMouseMoved(int, int, int) GUI::GuiManager::computeScaleFactor()", "GUI::GuiManager::initTextToSpeech()", "GUI::GuiManager::~GuiManager()", "GUI::GuiManager::GuiManager()", "void Common::sort<Common::ListInternal::Iterator<Common::SharedPtr<Common::ArchiveMember>>, GUI::ArchiveMemberListBackComparator>(Common::ListInternal::Iterator<Common::SharedPtr<Common::ArchiveMember>>, Common::ListInternal::Iterator<Common::SharedPtr<Common::ArchiveMember>>, GUI::ArchiveMemberListBackComparator)", "GUI::GuiManager::redraw()", "GUI::GuiManager::loadNewTheme(Common::String, GUI::ThemeEngine::GraphicsMode, bool)", "GUI::GuiManager::displayTopDialogOnly(bool)", "GUI::GuiManager::processEvent(Common::Event const&, GUI::Dialog*)", "GUI::GuiManager::checkScreenChange()", "GUI::CommandSender::sendCommand(unsigned int, unsigned int)", "GUI::GuiManager::screenChange()", "GlkMetaEngineDetection::detectGames(Common::FSList const&, unsigned int, bool)", "Common::FSNode::operator=(Common::FSNode const&)", "GUI::BrowserDialog::open()", "GUI::BrowserDialog::BrowserDialog(Common::U32String const&, bool)", "void Common::sort<Common::FSNode*, Common::Less<Common::FSNode>>(Common::FSNode*, Common::FSNode*, Common::Less<Common::FSNode>)", "GUI::BrowserDialog::updateListing()", "void SWAP<Common::FSNode>(Common::FSNode&, Common::FSNode&)", "GUI::BrowserDialog::~BrowserDialog()", "GUI::ChooserDialog::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)", "GUI::GuiManager::runLoop()", "GUI::BrowserDialog::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)", "GUI::EditGameDialog::open()", "GUI::EditGameDialog::apply()", "GUI::Widget::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)", "GUI::EditGameDialog::EditGameDialog(Common::String const&)", "GUI::LauncherDialog::addLayoutChooserButtons()", "GUI::LauncherDialog::clean()", "GUI::LauncherDialog::close()", "GUI::LauncherDialog::addGame()", "GUI::LauncherDialog::open()", "GUI::LauncherDialog::LauncherDialog(Common::String const&, GUI::LauncherChooser*)", "GUI::EditGameDialog::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)", "GUI::LauncherDialog::build()", "GUI::LauncherDialog::editGame(int)", "GUI::LauncherDialog::removeGame(int)", "GUI::LauncherDialog::doGameDetection(Common::String const&)", "GUI::LauncherDialog::handleKeyUp(Common::KeyState)", "GUI::LauncherDialog::loadGame(int)", "GUI::LauncherDialog::handleOtherEvent(Common::Event const&)", "GUI::LauncherChooser::selectLauncher()", "GUI::LauncherDialog::reflowLayout()", "GUI::LauncherSimple::build()", "GUI::LauncherSimple::handleKeyDown(Common::KeyState)", "GUI::LauncherSimple::updateButtons()", "GUI::LauncherSimple::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)", "GUI::LauncherSimple::updateListing()", "GUI::LauncherDialog::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)", "GUI::LauncherGrid::handleKeyDown(Common::KeyState)", "GUI::LauncherGrid::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)", "GUI::LauncherGrid::updateButtons()", "GUI::LauncherDialog::~LauncherDialog().1", "GUI::MassAddDialog::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)", "Common::Array<Common::FSNode>::insert_aux(Common::FSNode*, Common::FSNode const*, Common::FSNode const*)", "GUI::LauncherGrid::build()", "GUI::MassAddDialog::~MassAddDialog()", "GUI::MassAddDialog::~MassAddDialog().1", "GUI::TimedMessageDialog::handleTickle()", "GUI::CountdownMessageDialog::handleTickle()", "GUI::MessageDialog::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)", "GUI::MetadataParser::keyCallback(Common::XMLParser::ParserNode*)", "GUI::MetadataParser::CustomXMLKeyLayout::doCallback(Common::XMLParser*, Common::XMLParser::ParserNode*)", "GUI::MassAddDialog::handleTickle()", "GUI::MessageDialog::init(Common::U32String const&, Common::U32String const&, Common::Array<Common::U32String> const&, Graphics::TextAlign, char const*, Common::U32String const&)", "GUI::GuiObject::getClipRect() const", "GUI::OptionsDialog::~OptionsDialog()", "GUI::OptionsDialog::init()", "GUI::OptionsDialog::updateScaleFactors(unsigned int)", "GUI::OptionsDialog::clean()", "GUI::OptionsDialog::open()", "GUI::OptionsDialog::close()", "GUI::OptionsDialog::loadMusicDeviceSetting(GUI::PopUpWidget*, Common::String, MusicType)", "GUI::OptionsDialog::build()", "GUI::LauncherGrid::updateListing()", "GUI::OptionsDialog::handleTickle()", "GUI::OptionsDialog::setGraphicSettingsState(bool)", "GUI::OptionsDialog::handleOtherEvent(Common::Event const&)", "GUI::OptionsDialog::addKeyMapperControls(GUI::GuiObject*, Common::String const&, Common::Array<Common::Keymap*> const&, Common::String const&)", "GUI::OptionsDialog::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)", "GUI::OptionsDialog::addStatisticsControls(GUI::GuiObject*, Common::String const&)", "GUI::OptionsDialog::addAchievementsControls(GUI::GuiObject*, Common::String const&)", "GUI::OptionsDialog::addAudioControls(GUI::GuiObject*, Common::String const&)", "GUI::OptionsDialog::saveMusicDeviceSetting(GUI::PopUpWidget*, Common::String)", "GUI::OptionsDialog::apply()", "GUI::OptionsDialog::addSubtitleControls(GUI::GuiObject*, Common::String const&, int)", "GUI::OptionsDialog::reflowLayout()", "GUI::OptionsDialog::addMIDIControls(GUI::GuiObject*, Common::String const&)", "GUI::GlobalOptionsDialog::~GlobalOptionsDialog()", "GUI::OptionsDialog::addGraphicControls(GUI::GuiObject*, Common::String const&)", "GUI::OptionsDialog::addVolumeControls(GUI::GuiObject*, Common::String const&)", "GUI::OptionsDialog::setupGraphicsTab()", "Common::Array<GUI::ExistingSave>::freeStorage(GUI::ExistingSave*, unsigned int)", "GUI::OptionsDialog::addMT32Controls(GUI::GuiObject*, Common::String const&)", "GUI::ExistingSave::operator=(GUI::ExistingSave const&)", "GUI::SaveLoadChooser::~SaveLoadChooser()", "GUI::GlobalOptionsDialog::reflowLayout()", "GUI::SaveLoadChooser::runModalWithMetaEngineAndTarget(MetaEngine const*, Common::String const&)", "GUI::getRequestedSaveLoadDialog(MetaEngine const*)", "GUI::SaveLoadChooser::selectChooser(MetaEngine const*)", "GUI::GlobalOptionsDialog::apply()", "GUI::SaveLoadChooserDialog::addChooserButtons()", "GUI::GlobalOptionsDialog::build()", "GUI::SaveLoadChooserDialog::reflowLayout()", "GUI::SaveLoadChooserDialog::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)", "GUI::SaveLoadChooserSimple::runIntern()", "GUI::SaveLoadChooserDialog::listSaves()", "GUI::SaveLoadChooserSimple::addThumbnailContainer()", "GUI::GlobalOptionsDialog::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)", "GUI::SaveLoadChooserSimple::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)", "GUI::SaveLoadChooserSimple::updateSaveList()", "GUI::SaveLoadChooserGrid::~SaveLoadChooserGrid()", "GUI::SaveLoadChooserSimple::updateSelection(bool)", "GUI::SaveLoadChooserSimple::reflowLayout()", "GUI::SaveLoadChooserGrid::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)", "GUI::SaveLoadChooserGrid::updateSaveList()", "GUI::SaveLoadChooserGrid::runIntern()", "GUI::SaveLoadChooserGrid::updateSaves()", "GUI::SavenameDialog::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)", "GUI::SaveLoadChooserGrid::open()", "GUI::ThemeBrowser::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)", "GUI::ThemeEngine::~ThemeEngine()", "Graphics::VectorRenderer::drawCallback_BEVELSQ(Common::Rect const&, Graphics::DrawStep const&)", "GUI::ThemeEngine::clearAll()", "GUI::SaveLoadChooserGrid::reflowLayout()", "GUI::ThemeEngine::listUsableThemes(Common::List<GUI::ThemeEngine::ThemeDescriptor>&)", "GUI::ThemeEngine::enable()", "GUI::ThemeEngine::disable()", "GUI::ThemeEngine::restoreBackground(Common::Rect)", "GUI::ThemeEngine::init()", "GUI::ThemeEngine::drawDD(GUI::DrawData, Common::Rect const&, unsigned int, bool)", "GUI::ThemeEngine::drawDDText(GUI::TextData, GUI::TextColor, Common::Rect const&, Common::U32String const&, bool, bool, Graphics::TextAlign, GUI::ThemeEngine::TextAlignVertical, int, Common::Rect const&)", "GUI::ThemeEngine::getFontHeight(GUI::ThemeEngine::FontStyle) const", "GUI::ThemeEngine::drawSurface(Common::Point const&, Graphics::ManagedSurface const&, bool)", "GUI::ThemeEngine::getCharWidth(unsigned int, GUI::ThemeEngine::FontStyle) const", "GUI::ThemeEngine::getKerningOffset(unsigned int, unsigned int, GUI::ThemeEngine::FontStyle) const", "GUI::ThemeEngine::drawFoldIndicator(Common::Rect const&, bool)", "GUI::ThemeEval::reset()", "GUI::ThemeEngine::listUsableThemes(Common::FSNode const&, Common::List<GUI::ThemeEngine::ThemeDescriptor>&, int)", "GUI::ThemeEval::getWidgetData(Common::String const&, short&, short&, short&, short&, bool&)", "GUI::ThemeEngine::themeConfigUsable(Common::FSNode const&, Common::String&)", "GUI::ThemeEval::getWidgetTextHAlign(Common::String const&)", "GUI::ThemeLayoutWidget::~ThemeLayoutWidget()", "GUI::ThemeLayoutTabWidget::reflowLayout(GUI::Widget*)", "GUI::ThemeLayoutTabWidget::~ThemeLayoutTabWidget()  GUI::ThemeEval::reflowDialogLayout(Common::String const&, GUI::Widget*) GUI::ThemeLayout::~ThemeLayout()", "GUI::ThemeEngine::addFont(GUI::TextData, Common::String const&, Common::String const&, Common::String const&, int)", "GUI::ThemeLayout::resetLayout()", "GUI::ThemeLayout::getWidgetTextHAlign(Common::String const&)", "GUI::ThemeLayoutWidget::isBound(GUI::Widget*) const", "GUI::ThemeLayoutWidget::reflowLayout(GUI::Widget*)", "GUI::ThemeLayoutStacked::reflowLayout(GUI::Widget*)", "GUI::ThemeLayoutMain::~ThemeLayoutMain()", "GUI::ThemeLayoutMain::~ThemeLayoutMain().1", "GUI::ThemeLayoutMain::resetLayout()", "GUI::ThemeLayoutMain::reflowLayout(GUI::Widget*)", "GUI::ThemeParser::parserCallback_bitmap(Common::XMLParser::ParserNode*)", "Graphics::VectorRenderer::drawCallback_CIRCLE(Common::Rect const&, Graphics::DrawStep const&)", "Graphics::VectorRenderer::drawCallback_SQUARE(Common::Rect const&, Graphics::DrawStep const&)", "Graphics::VectorRenderer::drawCallback_ROUNDSQ(Common::Rect const&, Graphics::DrawStep const&)", "Graphics::VectorRenderer::drawCallback_LINE(Common::Rect const&, Graphics::DrawStep const&)", "Graphics::VectorRenderer::drawCallback_TRIANGLE(Common::Rect const&, Graphics::DrawStep const&)", "Graphics::VectorRenderer::drawCallback_FILLSURFACE(Common::Rect const&, Graphics::DrawStep const&)", "Graphics::VectorRenderer::drawCallback_TAB(Common::Rect const&, Graphics::DrawStep const&)", "Graphics::VectorRenderer::drawCallback_BITMAP(Common::Rect const&, Graphics::DrawStep const&)", "Graphics::VectorRenderer::drawCallback_CROSS(Common::Rect const&, Graphics::DrawStep const&)", "GUI::ThemeParser::parserCallback_dialog(Common::XMLParser::ParserNode*)", "GUI::ThemeParser::parserCallback_space(Common::XMLParser::ParserNode*)", "GUI::ThemeParser::parserCallback_import(Common::XMLParser::ParserNode*)", "GUI::Tooltip::handleMouseWheel(int, int, int)", "GUI::Tooltip::handleMouseDown(int, int, int, int)", "GUI::Tooltip::handleMouseUp(int, int, int, int)", "GUI::Tooltip::handleKeyDown(Common::KeyState)", "GUI::Tooltip::handleMouseMoved(int, int, int)", "GUI::Tooltip::handleKeyUp(Common::KeyState)", "GUI::UnknownGameDialog::handleMouseWheel(int, int, int)", "GUI::UnknownGameDialog::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)", "GUI::Widget::Widget(GUI::GuiObject*, Common::String const&, Common::U32String const&)", "GUI::UnknownGameDialog::rebuild()", "GUI::Widget::~Widget()", "GUI::Widget::markAsDirty()", "GUI::Widget::findWidgetInChain(GUI::Widget*, int, int)", "GUI::Widget::containsWidgetInChain(GUI::Widget*, GUI::Widget*)", "GUI::Widget::draw()", "GUI::Widget::read(Common::U32String const&)", "GUI::StaticTextWidget::StaticTextWidget(GUI::GuiObject*, int, int, int, int, Common::U32String const&, Graphics::TextAlign, Common::U32String const&, GUI::ThemeEngine::FontStyle, Common::Language, bool)", "GUI::StaticTextWidget::setLabel(Common::U32String const&)", "GUI::StaticTextWidget::setAlign(Graphics::TextAlign)", "GUI::StaticTextWidget::StaticTextWidget(GUI::GuiObject*, Common::String const&, Common::U32String const&, Common::U32String const&, GUI::ThemeEngine::FontStyle, Common::Language, bool)", "GUI::ButtonWidget::getMinSize(int&, int&)", "GUI::ButtonWidget::handleMouseUp(int, int, int, int)", "GUI::ButtonWidget::handleMouseDown(int, int, int, int)", "GUI::ButtonWidget::setLabel(Common::U32String const&)", "GUI::ButtonWidget::setLabel(Common::String const&)", "GUI::ButtonWidget::drawWidget()", "GUI::PicButtonWidget::setGfx(Graphics::ManagedSurface const*, int, bool) GUI::DropdownButtonWidget::handleMouseMoved(int, int, int)", "GUI::addClearButton(GUI::GuiObject*, Common::String const&, unsigned int, int, int, int, int)", "GUI::DropdownButtonWidget::handleMouseUp(int, int, int, int)", "GUI::DropdownButtonWidget::getMinSize(int&, int&)", "GUI::DropdownButtonWidget::drawWidget()", "GUI::PicButtonWidget::~PicButtonWidget()", "GUI::CheckboxWidget::setState(bool)", "GUI::CheckboxWidget::handleMouseUp(int, int, int, int) GUI::CheckboxWidget::drawWidget()", "GUI::SliderWidget::SliderWidget(GUI::GuiObject*, Common::String const&, Common::U32String const&, unsigned int)", "GUI::RadiobuttonWidget::drawWidget()", "GUI::SliderWidget::handleMouseMoved(int, int, int)", "GUI::SliderWidget::handleMouseDown(int, int, int, int)", "GUI::RadiobuttonWidget::handleMouseUp(int, int, int, int)", "GUI::SliderWidget::handleMouseUp(int, int, int, int)", "GUI::SliderWidget::handleMouseWheel(int, int, int)", "GUI::GraphicsWidget::~GraphicsWidget()", "GUI::ContainerWidget::ContainerWidget(GUI::GuiObject*, int, int, int, int)", "GUI::ContainerWidget::ContainerWidget(GUI::GuiObject*, Common::String const&)", "GUI::ContainerWidget::containsWidget(GUI::Widget*) const", "GUI::ContainerWidget::~ContainerWidget()", "GUI::ContainerWidget::removeWidget(GUI::Widget*)", "GUI::OptionsContainerWidget::~OptionsContainerWidget()", "GUI::GraphicsWidget::setGfx(Graphics::ManagedSurface const*, bool)", "GUI::StaticTextWidget::~StaticTextWidget()", "GUI::StaticTextWidget::~StaticTextWidget().1", "GUI::ButtonWidget::handleMouseLeft(int) GUI::ButtonWidget::~ButtonWidget()", "GUI::OptionsContainerWidget::reflowLayout()", "non-virtual thunk to GUI::ButtonWidget::~ButtonWidget().1", "GUI::OptionsContainerWidget::findWidget(int, int)", "GUI::DropdownButtonWidget::~DropdownButtonWidget()", "GUI::DropdownButtonWidget::~DropdownButtonWidget().1", "GUI::CheckboxWidget::handleMouseEntered(int)", "GUI::CheckboxWidget::handleMouseLeft(int)", "GUI::ButtonWidget::handleMouseEntered(int)non-virtual thunk to GUI::ButtonWidget::~ButtonWidget()", "GUI::EditableWidget::reflowLayout()", "non-virtual thunk to GUI::SliderWidget::~SliderWidget()", "GUI::EditableWidget::adjustOffset() GUI::EditableWidget::handleTickle()", "GUI::SliderWidget::handleMouseEntered(int)", "non-virtual thunk to GUI::SliderWidget::~SliderWidget().1", "GUI::EditableWidget::setEditString(Common::U32String const&)", "GUI::EditTextWidget::EditTextWidget(GUI::GuiObject*, Common::String const&, Common::U32String const&, Common::U32String const&, unsigned int, unsigned int, GUI::ThemeEngine::FontStyle)", "GUI::EditTextWidget::handleMouseDown(int, int, int, int)", "GUI::EditableWidget::handleKeyDown(Common::KeyState)", "GUI::EditTextWidget::drawWidget()", "GUI::EditTextWidget::receivedFocusWidget()", "GUI::EditTextWidget::lostFocusWidget()", "GUI::EditTextWidget::endEditMode()", "GUI::EditableWidget::drawCaret(bool)", "GUI::EditTextWidget::abortEditMode()", "GUI::GridItemWidget::handleMouseWheel(int, int, int)", "GUI::GridItemWidget::handleMouseEntered(int)", "GUI::GridItemWidget::handleMouseLeft(int)", "GUI::GridItemWidget::handleMouseMoved(int, int, int)", "GUI::EditableWidget::defaultKeyDownHandler(Common::KeyState&, bool&, bool&, bool&)", "GUI::GridWidget::reloadThumbnails()", "GUI::GridWidget::assignEntriesToItems()", "GUI::GridWidget::sortGroups()", "GUI::GridItemWidget::handleMouseDown(int, int, int, int)", "GUI::GridItemTray::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)", "GUI::GridItemTray::handleMouseDown(int, int, int, int)", "GUI::GridItemTray::handleMouseMoved(int, int, int)", "GUI::loadSurfaceFromFile(Common::String const&, int, int)", "void GUI::GridWidget::unloadSurfaces<int>(Common::HashMap<int, Graphics::ManagedSurface const*, Common::Hash<int>, Common::EqualTo<int>>&)", "void GUI::GridWidget::unloadSurfaces<Common::String>(Common::HashMap<Common::String, Graphics::ManagedSurface const*, Common::Hash<Common::String>, Common::EqualTo<Common::String>>&)", "GUI::GridWidget::handleMouseWheel(int, int, int)", "GUI::GridWidget::setSelected(int)", "GUI::GridWidget::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)", "GUI::GroupedListWidget::setSelected(int)", "GUI::GroupedListWidget::handleMouseDown(int, int, int, int)", "GUI::GroupedListWidget::handleMouseWheel(int, int, int)", "GUI::GroupedListWidget::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)", "GUI::GroupedListWidget::handleMouseUp(int, int, int, int)", "GUI::GroupedListWidget::sortGroups()", "GUI::GridWidget::reflowLayout()", "GUI::GroupedListWidget::setFilter(Common::U32String const&, bool)", "GUI::GroupedListWidget::drawWidget()", "GUI::ListWidget::containsWidget(GUI::Widget*) const", "GUI::ListWidget::setSelected(int)", "GUI::ListWidget::handleTickle()", "GUI::ListWidget::setList(Common::Array<Common::U32String> const&)", "GUI::ListWidget::handleMouseDown(int, int, int, int)", "GUI::ListWidget::handleMouseUp(int, int, int, int)", "GUI::ListWidget::receivedFocusWidget()", "GUI::ListWidget::lostFocusWidget()", "GUI::ListWidget::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)", "GUI::ListWidget::handleKeyDown(Common::KeyState)", "GUI::ListWidget::drawWidget()", "GUI::ListWidget::getEditRect() const", "GUI::ListWidget::endEditMode()", "GUI::ListWidget::abortEditMode()", "GUI::ListWidget::startEditMode()", "GUI::ListWidget::reflowLayout()", "GUI::PopUpDialog::PopUpDialog(GUI::Widget*, Common::String const&, int, int)", "GUI::PopUpDialog::open()", "GUI::PopUpDialog::handleMouseUp(int, int, int, int)", "GUI::PopUpDialog::drawDialog(GUI::DrawLayer)", "GUI::PopUpDialog::handleKeyDown(Common::KeyState)", "GUI::PopUpDialog::drawMenuEntry(int, bool)", "GUI::PopUpWidget::handleMouseWheel(int, int, int)", "GUI::PopUpWidget::handleMouseEntered(int)", "GUI::PopUpWidget::handleMouseLeft(int)", "GUI::PopUpWidget::handleMouseDown(int, int, int, int)", "GUI::ScrollBarWidget::checkBounds(int)", "GUI::ScrollBarWidget::handleMouseDown(int, int, int, int)", "GUI::ScrollBarWidget::handleTickle()", "GUI::ScrollBarWidget::handleMouseLeft(int)", "GUI::ScrollContainerWidget::handleMouseWheel(int, int, int)", "GUI::ScrollContainerWidget::getChildX() const GUI::ScrollContainerWidget::getChildY() const", "GUI::ScrollContainerWidget::getWidth() const", "GUI::ScrollBarWidget::handleMouseMoved(int, int, int)", "GUI::ScrollContainerWidget::reflowLayout()", "GUI::ScrollContainerWidget::containsWidget(GUI::Widget*) const", "GUI::ScrollContainerWidget::drawWidget()", "GUI::ScrollContainerWidget::findWidget(int, int)", "GUI::ScrollContainerWidget::getClipRect() const", "GUI::ScrollBarWidget::ScrollBarWidget(GUI::GuiObject*, int, int, int, int)", "GUI::TabWidget::getChildY() const", "GUI::TabWidget::~TabWidget()", "GUI::ScrollContainerWidget::recalc()", "GUI::TabWidget::addChild(GUI::Widget*)", "GUI::TabWidget::removeWidget(GUI::Widget*)", "GUI::TabWidget::setActiveTab(int)", "GUI::TabWidget::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)", "GUI::TabWidget::removeTab(int)", "GUI::TabWidget::handleMouseWheel(int, int, int)", "GUI::TabWidget::handleKeyDown(Common::KeyState)", "GUI::TabWidget::setFirstVisible(int, bool)", "GUI::TabWidget::markAsDirty()", "GUI::TabWidget::containsWidget(GUI::Widget*) const", "GUI::TabWidget::draw()", "BaseBackend::setScaler(char const*, int)", "BaseBackend::displayMessageOnOSD(Common::U32String const&)", "ModularGraphicsBackend::hasFeature(OSystem::Feature)   virtual thunk to ModularGraphicsBackend::setFeatureState(OSystem::Feature, bool)", "ModularGraphicsBackend::getFeatureState(OSystem::Feature)", "virtual thunk to ModularGraphicsBackend::getFeatureState(OSystem::Feature)", "ModularGraphicsBackend::getSupportedGraphicsModes() const", "virtual thunk to ModularGraphicsBackend::getSupportedGraphicsModes() const", "ModularGraphicsBackend::getDefaultGraphicsMode() constBaseBackend::fillScreen(unsigned int)", "virtual thunk to ModularGraphicsBackend::hasFeature(OSystem::Feature)", "ModularGraphicsBackend::setGraphicsMode(int, unsigned int)", "ModularGraphicsBackend::getGraphicsMode() const", "virtual thunk to ModularGraphicsBackend::setGraphicsMode(int, unsigned int)", "virtual thunk to ModularGraphicsBackend::getGraphicsMode() const", "", "ModularGraphicsBackend::getSupportedStretchModes() const", "ModularGraphicsBackend::getDefaultStretchMode() const", "virtual thunk to ModularGraphicsBackend::getSupportedStretchModes() const", "virtual thunk to ModularGraphicsBackend::getDefaultStretchMode() const", "ModularGraphicsBackend::setStretchMode(int)", "virtual thunk to ModularGraphicsBackend::setStretchMode(int)", "ModularGraphicsBackend::getStretchMode() const", "virtual thunk to ModularGraphicsBackend::getStretchMode() const", "ModularGraphicsBackend::getDefaultScaleFactor() const", "virtual thunk to ModularGraphicsBackend::getDefaultScaleFactor() const", "ModularGraphicsBackend::setScaler(unsigned int, int)", "virtual thunk to ModularGraphicsBackend::setScaler(unsigned int, int)", "ModularGraphicsBackend::getScaler() const", "virtual thunk to ModularGraphicsBackend::getScaler() const", "ModularGraphicsBackend::getScaleFactor() const", "", "ModularGraphicsBackend::getScreenFormat() const", "ModularGraphicsBackend::setFeatureState(OSystem::Feature, bool)", "virtual thunk to ModularGraphicsBackend::getScreenFormat() const", "ModularGraphicsBackend::getSupportedFormats() const", "virtual thunk to ModularGraphicsBackend::getSupportedFormats() const", "ModularGraphicsBackend::initSize(unsigned int, unsigned int, Graphics::PixelFormat const*)", "virtual thunk to ModularGraphicsBackend::initSize(unsigned int, unsigned int, Graphics::PixelFormat const*)", "ModularGraphicsBackend::getScreenChangeID() const", "virtual thunk to ModularGraphicsBackend::getScreenChangeID() const", "ModularGraphicsBackend::beginGFXTransaction()", "virtual thunk to ModularGraphicsBackend::beginGFXTransaction()", "ModularGraphicsBackend::endGFXTransaction()", "virtual thunk to ModularGraphicsBackend::endGFXTransaction()", "ModularGraphicsBackend::getHeight()", "virtual thunk to ModularGraphicsBackend::getHeight()", "ModularGraphicsBackend::getWidth()", "virtual thunk to ModularGraphicsBackend::getWidth()", "virtual thunk to ModularGraphicsBackend::copyRectToScreen(void const*, int, int, int, int, int)", "ModularGraphicsBackend::lockScreen()", "ModularGraphicsBackend::unlockScreen()", "virtual thunk to ModularGraphicsBackend::unlockScreen()", "ModularGraphicsBackend::fillScreen(unsigned int)", "virtual thunk to ModularGraphicsBackend::fillScreen(unsigned int)", "ModularGraphicsBackend::updateScreen()", "virtual thunk to ModularGraphicsBackend::updateScreen()", "ModularGraphicsBackend::setShakePos(int, int)", "virtual thunk to ModularGraphicsBackend::setShakePos(int, int)", "ModularGraphicsBackend::setFocusRectangle(Common::Rect const&)", "virtual thunk to ModularGraphicsBackend::setFocusRectangle(Common::Rect const&)", "ModularGraphicsBackend::clearFocusRectangle()", "virtual thunk to ModularGraphicsBackend::clearFocusRectangle()", "ModularGraphicsBackend::showOverlay(bool)", "virtual thunk to ModularGraphicsBackend::showOverlay(bool)", "ModularGraphicsBackend::hideOverlay()", "virtual thunk to ModularGraphicsBackend::hideOverlay()", "ModularGraphicsBackend::isOverlayVisible() const", "virtual thunk to ModularGraphicsBackend::isOverlayVisible() const", "ModularGraphicsBackend::getOverlayFormat() const", "ModularGraphicsBackend::clearOverlay()", "virtual thunk to ModularGraphicsBackend::getOverlayFormat() const", "virtual thunk to ModularGraphicsBackend::clearOverlay()", "ModularGraphicsBackend::grabOverlay(Graphics::Surface&)", "virtual thunk to ModularGraphicsBackend::grabOverlay(Graphics::Surface&)", "ModularGraphicsBackend::copyRectToOverlay(void const*, int, int, int, int, int)", "ModularGraphicsBackend::getOverlayHeight()", "virtual thunk to ModularGraphicsBackend::copyRectToOverlay(void const*, int, int, int, int, int)", "virtual thunk to ModularGraphicsBackend::getOverlayHeight()", "ModularGraphicsBackend::getOverlayWidth()", "virtual thunk to ModularGraphicsBackend::getOverlayWidth()", "ModularGraphicsBackend::getHiDPIScreenFactor() const", "virtual thunk to ModularGraphicsBackend::getHiDPIScreenFactor() const", "ModularGraphicsBackend::showMouse(bool)", "virtual thunk to ModularGraphicsBackend::showMouse(bool)", "ModularGraphicsBackend::lockMouse(bool)", "", "ModularGraphicsBackend::setMouseCursor(void const*, unsigned int, unsigned int, int, int, unsigned int, bool, Graphics::PixelFormat const*)", "virtual thunk to ModularGraphicsBackend::setMouseCursor(void const*, unsigned int, unsigned int, int, int, unsigned int, bool, Graphics::PixelFormat const*)", "ModularGraphicsBackend::setCursorPalette(unsigned char const*, unsigned int, unsigned int)", "ModularGraphicsBackend::displayMessageOnOSD(Common::U32String const&)", "virtual thunk to ModularGraphicsBackend::lockMouse(bool)", "virtual thunk to ModularGraphicsBackend::displayMessageOnOSD(Common::U32String const&)", "ModularGraphicsBackend::displayActivityIconOnOSD(Graphics::Surface const*)", "ModularGraphicsBackend::saveScreenshot()", "virtual thunk to ModularGraphicsBackend::displayActivityIconOnOSD(Graphics::Surface const*)", "virtual thunk to ModularGraphicsBackend::saveScreenshot()", "ModularMixerBackend::getMixer()", "virtual thunk to ModularMixerBackend::getMixer()", "DefaultAudioCDManager::DefaultAudioCDManager()", "DefaultAudioCDManager::~DefaultAudioCDManager()", "DefaultAudioCDManager::close()", "virtual thunk to ModularGraphicsBackend::setCursorPalette(unsigned char const*, unsigned int, unsigned int)", "DefaultAudioCDManager::stop()", "DefaultAudioCDManager::setVolume(unsigned char)", "ModularGraphicsBackend::initSizeHint(Common::Array<Graphics::Mode> const&)", "DefaultAudioCDManager::setBalance(signed char)", "DefaultAudioCDManager::getStatus() const", "DefaultEventManager::~DefaultEventManager()", "DefaultAudioCDManager::isPlaying() const", "DefaultEventManager::getGlobalKeymap()", "DefaultAudioCDManager::play(int, int, int, int, bool, Audio::Mixer::SoundType)", "Common::CompositeHardwareInputSet::~CompositeHardwareInputSet()", "Common::CompositeHardwareInputSet::findHardwareInput(Common::String const&) const", "Common::CompositeHardwareInputSet::findHardwareInput(Common::Event const&) const", "Common::Keymap::registerMappings(Common::Action*, Common::Array<Common::String> const&)", "Common::Keymapper::clear()", "DefaultEventManager::pollEvent(Common::Event&)", "Common::Keymapper::registerHardwareInputSet(Common::HardwareInputSet*, Common::KeymapperDefaultBindings*)", "Common::DelayedEventSource::scheduleEvent(Common::Event const&, unsigned int)", "Common::InputWatcher::notifyEvent(Common::Event const&)", "Common::DelayedEventSource::pollEvent(Common::Event&)", "Common::Keymapper::mapEvent(Common::Event const&, Common::List<Common::Event>&)", "Common::RemapWidget::reflowActionWidgets()", "Common::RemapWidget::handleMouseDown(int, int, int, int)", "Common::RemapWidget::save()", "Common::RemapWidget::handleTickle()", "Common::VirtualMouse::pollEvent(Common::Event&)", "Common::RemapWidget::~RemapWidget()", "Backends::Log::Log::print(char const*, bool)", "MidiDriver_BASE::send(signed char, unsigned int)", "MidiDriver_BASE::sysExNoDelay(unsigned char const*, unsigned short)", "MidiDriver_BASE::metaEvent(signed char, unsigned char, unsigned char*, unsigned short)", "MidiDriver::setPitchBendRange(unsigned char, unsigned int)", "Common::OutSaveFile::~OutSaveFile()", "Common::OutSaveFile::~OutSaveFile().1", "Common::OutSaveFile::err() const", "Common::OutSaveFile::finalize()", "Common::OutSaveFile::flush()", "Common::OutSaveFile::pos() const", "Common::OutSaveFile::seek(long long, int)", "Common::OutSaveFile::size() const", "Common::SaveFileManager::renameSavefile(Common::String const&, Common::String const&, bool)", "Common::SaveFileManager::popErrorDesc()", "Common::OutSaveFile::clearErr()", "DefaultSaveFileManager::openRawFile(Common::String const&)", "DefaultSaveFileManager::assureCached(Common::String const&)", "DefaultSaveFileManager::listSavefiles(Common::String const&)", "DefaultSaveFileManager::openForLoading(Common::String const&)", "DefaultSaveFileManager::removeSavefile(Common::String const&)", "DefaultSaveFileManager::checkPath(Common::FSNode const&)", "DefaultSaveFileManager::exists(Common::String const&)", "SdlEventSource::processMouseEvent(Common::Event&, int, int, int, int)", "DefaultSaveFileManager::openForSaving(Common::String const&, bool)", "SdlEventSource::pollEvent(Common::Event&)", "SdlEventSource::openJoystick(int)", "SdlEventSource::handleKeyUp(SDL_Event&, Common::Event&)", "SdlEventSource::dispatchSDLEvent(SDL_Event&, Common::Event&)", "SdlEventSource::handleMouseButtonUp(SDL_Event&, Common::Event&)", "SdlEventSource::handleJoyButtonDown(SDL_Event&, Common::Event&)", "SdlEventSource::handleJoyButtonUp(SDL_Event&, Common::Event&)", "SdlEventSource::handleKeyDown(SDL_Event&, Common::Event&)", "SdlEventSource::handleJoyHatMotion(SDL_Event&, Common::Event&)", "SdlEventSource::handleControllerButton(SDL_Event const&, Common::Event&, bool)", "virtual thunk to SdlGraphicsManager::showMouse(bool)", "SdlGraphicsManager::showMouse(bool)", "WindowedGraphicsManager::setShakePos(int, int)", "WindowedGraphicsManager::hideOverlay()", "WindowedGraphicsManager::showOverlay(bool)", "SdlGraphicsManager::notifyMousePosition(Common::Point&)", "SdlEventSource::handleMouseButtonDown(SDL_Event&, Common::Event&)", "WindowedGraphicsManager::warpMouse(int, int)", "WindowedGraphicsManager::recalculateDisplayAreas()", "SdlGraphicsManager::saveScreenshot()", "SdlGraphicsManager::getKeymap()", "SdlGraphicsManager::notifyEvent(Common::Event const&)", "SurfaceSdlGraphicsManager::~SurfaceSdlGraphicsManager()", "WindowedGraphicsManager::populateDisplayAreaDrawRect(int, int, int, Common::Rect&) const", "SurfaceSdlGraphicsManager::setFeatureState(OSystem::Feature, bool)", "SurfaceSdlGraphicsManager::SurfaceSdlGraphicsManager(SdlEventSource*, SdlWindow*)", "SurfaceSdlGraphicsManager::endGFXTransaction()", "SurfaceSdlGraphicsManager::setScaler(unsigned int, int)", "SurfaceSdlGraphicsManager::initSize(unsigned int, unsigned int, Graphics::PixelFormat const*)", "SurfaceSdlGraphicsManager::setGraphicsModeIntern()", "virtual thunk to SurfaceSdlGraphicsManager::updateScreen()", "SurfaceSdlGraphicsManager::updateScreen()", "SurfaceSdlGraphicsManager::hotswapGFXMode()", "SurfaceSdlGraphicsManager::saveScreenshot(Common::String const&) const", "SurfaceSdlGraphicsManager::lockScreen()", "SurfaceSdlGraphicsManager::copyRectToScreen(void const*, int, int, int, int, int)", "SurfaceSdlGraphicsManager::unlockScreen()", "SurfaceSdlGraphicsManager::fillScreen(unsigned int)", "virtual thunk to SurfaceSdlGraphicsManager::unlockScreen()", "virtual thunk to SurfaceSdlGraphicsManager::fillScreen(unsigned int)", "SurfaceSdlGraphicsManager::loadGFXMode()", "SurfaceSdlGraphicsManager::setPalette(unsigned char const*, unsigned int, unsigned int)", "SurfaceSdlGraphicsManager::setCursorPalette(unsigned char const*, unsigned int, unsigned int)", "virtual thunk to SurfaceSdlGraphicsManager::setCursorPalette(unsigned char const*, unsigned int, unsigned int)", "SurfaceSdlGraphicsManager::clearFocusRectangle()", "virtual thunk to SurfaceSdlGraphicsManager::clearFocusRectangle()", "SurfaceSdlGraphicsManager::setFocusRectangle(Common::Rect const&)", "SurfaceSdlGraphicsManager::undrawMouse()", "SurfaceSdlGraphicsManager::copyRectToOverlay(void const*, int, int, int, int, int)", "SurfaceSdlGraphicsManager::handleResizeImpl(int, int)", "SurfaceSdlGraphicsManager::setMouseCursor(void const*, unsigned int, unsigned int, int, int, unsigned int, bool, Graphics::PixelFormat const*)  SurfaceSdlGraphicsManager::blitCursor()", "virtual thunk to SurfaceSdlGraphicsManager::handleResizeImpl(int, int)", "SurfaceSdlGraphicsManager::notifyResize(int, int)", "SurfaceSdlGraphicsManager::notifyEvent(Common::Event const&)", "SurfaceSdlGraphicsManager::internUpdateScreen()", "SurfaceSdlGraphicsManager::SDL_SetVideoMode(int, int, int, unsigned int)", "SurfaceSdlGraphicsManager::handleScalerHotkeys(unsigned int, int)", "SdlMixerManager::~SdlMixerManager()", "SdlMixerManager::init()", "SdlMixerManager::callbackHandler(unsigned char*, int)", "MixerManager::~MixerManager()", "SdlMutexInternal::~SdlMutexInternal()", "SdlMutexInternal::~SdlMutexInternal().1", "DefaultTimerManager::~DefaultTimerManager()", "timer_handler(unsigned int, void*)", "SdlTimerManager::~SdlTimerManager()", "SdlMixerManager::sdlCallback(void*, unsigned char*, int)", "OpenGL::ShaderManager::notifyCreate()", "OpenGL::Shader::getUniformLocation(Common::String const&) const", "OpenGL::Pipeline::activate()", "OpenGL::Pipeline::deactivate()", "OpenGL::Pipeline::deactivateInternal()", "OpenGL::Pipeline::~Pipeline()", "OpenGL::Pipeline::setFramebuffer(OpenGL::Framebuffer*)", "OpenGL::ShaderPipeline::deactivateInternal()", "OpenGL::ShaderPipeline::activateInternal()", "OpenGL::ShaderPipeline::drawTextureInternal(OpenGL::GLTexture const&, float const*, float const*)", "OpenGL::ShaderPipeline::setProjectionMatrix(Math::Matrix<4, 4> const&)", "OpenGL::GLTexture::~GLTexture()", "OpenGL::GLTexture::enableLinearFiltering(bool)", "OpenGL::GLTexture::create()", "OpenGL::GLTexture::bind() const", "OpenGL::GLTexture::setWrapMode(OpenGL::WrapMode)", "OpenGL::GLTexture::setSize(unsigned int, unsigned int)", "OpenGL::Surface::fill(unsigned int)", "OpenGL::CLUT8LookUpPipeline::drawTextureInternal(OpenGL::GLTexture const&, float const*, float const*)", "OpenGL::Texture::enableLinearFiltering(bool)", "OpenGL::Texture::updateGLTexture()", "OpenGL::Surface::copyRectToTexture(unsigned int, unsigned int, unsigned int, unsigned int, void const*, unsigned int) OpenGL::Texture::updateGLTexture(Common::Rect&)", "OpenGL::FakeTexture::updateGLTexture()", "OpenGL::FakeTexture::allocate(unsigned int, unsigned int)", "OpenGL::TextureRGB555::updateGLTexture()", "OpenGL::TextureRGBA8888Swap::updateGLTexture()", "OpenGL::ScaledTexture::~ScaledTexture()", "OpenGL::ScaledTexture::setScaler(unsigned int, int)", "OpenGL::TextureCLUT8GPU::~TextureCLUT8GPU()", "OpenGL::TextureCLUT8GPU::destroy()", "OpenGL::TextureCLUT8GPU::recreate()", "OpenGL::TextureCLUT8GPU::enableLinearFiltering(bool)", "OpenGL::ScaledTexture::updateGLTexture()", "OpenGL::TextureCLUT8GPU::updateGLTexture()", "OpenGL::Framebuffer::enableScissorTest(bool)", "OpenGL::Backbuffer::activateInternal()", "OpenGL::Framebuffer::activate(OpenGL::Pipeline*)", "OpenGL::TextureTarget::~TextureTarget()", "OpenGL::Framebuffer::applyBlendState()", "OpenGL::TextureTarget::setSize(unsigned int, unsigned int)", "OpenGL::TextureTarget::activateInternal()", "OpenGL::LibRetroPipeline::close()", "OpenGL::LibRetroPipeline::setupFBOs()", "OpenGL::LibRetroPipeline::setupPassUniforms(unsigned int)", "OpenGL::LibRetroPipeline::drawTextureInternal(OpenGL::GLTexture const&, float const*, float const*)", "OpenGL::LibRetroPipeline::~LibRetroPipeline()", "OpenGL::LibRetro::ShaderPreset::~ShaderPreset()", "OpenGL::LibRetroPipeline::setShaderTexUniforms(Common::String const&, OpenGL::Shader*, OpenGL::GLTexture const&)", "Graphics::Surface* OpenGL::loadViaImageDecoder<Image::JPEGDecoder>(Common::FSNode const&)", "Graphics::Surface* OpenGL::loadViaImageDecoder<Image::BitmapDecoder>(Common::FSNode const&)", "Graphics::Surface* OpenGL::loadViaImageDecoder<Image::PNGDecoder>(Common::FSNode const&)", "Graphics::Surface* OpenGL::loadViaImageDecoder<Image::TGADecoder>(Common::FSNode const&)", "OpenGL::getChildRecursive(Common::FSNode const&, Common::String const&)", "OpenGL::OpenGLGraphicsManager::setFeatureState(OSystem::Feature, bool)", "OpenGL::OpenGLGraphicsManager::setStretchMode(int)", "OpenGL::OpenGLGraphicsManager::recalculateCursorScaling()", "OpenGL::OpenGLGraphicsManager::setScaler(unsigned int, int)", "OpenGL::OpenGLGraphicsManager::lockScreen()", "OpenGL::OpenGLGraphicsManager::createSurface(Graphics::PixelFormat const&, bool, bool)", "OpenGL::OpenGLGraphicsManager::getOverlayWidth() const", "OpenGL::OpenGLGraphicsManager::getOverlayHeight() const", "OpenGL::OpenGLGraphicsManager::getOverlayFormat() const", "OpenGL::OpenGLGraphicsManager::grabOverlay(Graphics::Surface&) const", "OpenGL::OpenGLGraphicsManager::~OpenGLGraphicsManager()", "OpenGL::OpenGLGraphicsManager::setPalette(unsigned char const*, unsigned int, unsigned int)  OpenGL::OpenGLGraphicsManager::displayActivityIconOnOSD(Graphics::Surface const*)", "OpenGL::LibRetroPipeline::Pass::addTexSampler(Common::String const&, unsigned int*, OpenGL::LibRetroPipeline::Pass::TextureSampler::Type, unsigned int, bool)", "OpenGL::OpenGLGraphicsManager::grabPalette(unsigned char*, unsigned int, unsigned int) const", "OpenGL::OpenGLGraphicsManager::notifyContextDestroy()", "virtual thunk to OpenGL::OpenGLGraphicsManager::gameNeedsAspectRatioCorrection() const", "OpenGL::OpenGLGraphicsManager::gameNeedsAspectRatioCorrection() const", "OpenGL::OpenGLGraphicsManager::handleResizeImpl(int, int)", "OpenGL::OpenGLGraphicsManager::recalculateDisplayAreas()", "OpenGL::OpenGLGraphicsManager::saveScreenshot(Common::String const&) const", "OpenGLSdlGraphicsManager::getHiDPIScreenFactor() const", "OpenGL::OpenGLGraphicsManager::setMouseCursor(void const*, unsigned int, unsigned int, int, int, unsigned int, bool, Graphics::PixelFormat const*)", "OpenGLSdlGraphicsManager::notifyResize(int, int)", "virtual thunk to WindowedGraphicsManager::setShakePos(int, int)", "virtual thunk to WindowedGraphicsManager::hideOverlay()", "virtual thunk to WindowedGraphicsManager::showOverlay(bool)", "OpenGL::TextureGL::~TextureGL()", "OpenGL::TextureGL::~TextureGL().1", "OpenGLSdlGraphicsManager::notifyEvent(Common::Event const&)", "OpenGL::TiledSurface::~TiledSurface()", "OpenGLSdlGraphicsManager::setupMode(unsigned int, unsigned int)", "virtual thunk to WindowedGraphicsManager::warpMouse(int, int)", "OpenGL::TiledSurface::draw(OpenGL::SurfaceRenderer*) const", "OpenGL::ShaderSurfaceRenderer::prepareState()", "OpenGL::ShaderSurfaceRenderer::restorePreviousState()", "OpenGL::FrameBuffer::~FrameBuffer()", "OpenGL::FrameBuffer::attach()", "OpenGL::FrameBuffer::detach()", "OpenGL::ShaderSurfaceRenderer::render(OpenGL::TextureGL const*, Math::Rect2d const&)", "OpenGLSdlGraphics3dManager::closeOverlay()", "OpenGL::TiledSurface::update()", "OpenGLSdlGraphics3dManager::setStretchMode(int)", "OpenGL::OpenGLGraphicsManager::endGFXTransaction()", "virtual thunk to OpenGLSdlGraphics3dManager::setStretchMode(int)", "OpenGLSdlGraphics3dManager::notifyResize(int, int)", "OpenGLSdlGraphics3dManager::setupScreen()", "OpenGLSdlGraphics3dManager::handleResizeImpl(int, int)", "OpenGLSdlGraphics3dManager::gameNeedsAspectRatioCorrection() const", "virtual thunk to OpenGLSdlGraphics3dManager::gameNeedsAspectRatioCorrection() const", "OpenGLSdlGraphics3dManager::createOrUpdateScreen()", "OpenGLSdlGraphics3dManager::updateScreen()", "OpenGL::OpenGLGraphicsManager::updateScreen()", "virtual thunk to OpenGLSdlGraphics3dManager::hideOverlay()", "OpenGLSdlGraphics3dManager::hideOverlay()OpenGLSdlGraphics3dManager::showOverlay(bool)", "OpenGLSdlGraphics3dManager::saveScreenshot(Common::String const&) const", "POSIXFilesystemNode::getParent() const", "POSIXFilesystemNode::createWriteStream()", "POSIXFilesystemNode::createDirectory()", "POSIXFilesystemNode::POSIXFilesystemNode(Common::String const&)", "POSIXFilesystemNode::createReadStream()", "Image::BitmapDecoder::~BitmapDecoder()", "Image::BitmapDecoder::destroy()", "Image::ImageDecoder::hasPalette() const", "Image::JPEGDecoder::decodeFrame(Common::SeekableReadStream&)", "POSIXSaveFileManager::POSIXSaveFileManager()", "non-virtual thunk to Image::JPEGDecoder::decodeFrame(Common::SeekableReadStream&)", "Image::(anonymous namespace)::outputMessage(jpeg_common_struct*)", "Image::(anonymous namespace)::skipInputData(jpeg_decompress_struct*, long)", "Image::(anonymous namespace)::fillInputBuffer(jpeg_decompress_struct*)", "Image::pngReadFromStream(png_struct_def*, unsigned char*, unsigned long)", "Image::pngWriteToStream(png_struct_def*, unsigned char*, unsigned long)", "Image::pngFlushStream(png_struct_def*)", "Image::BitmapDecoder::loadStream(Common::SeekableReadStream&)", "Image::BitmapRawDecoder::decodeFrame(Common::SeekableReadStream&)", "Image::CinepakDecoder::loadCodebook(Common::SeekableReadStream&, unsigned short, unsigned char, unsigned char, unsigned int)", "Image::JPEGDecoder::loadStream(Common::SeekableReadStream&)", "Image::CinepakDecoder::setDither(Image::Codec::DitherType, unsigned char const*)", "Image::Indeo3Decoder::decodeFrame(Common::SeekableReadStream&)", "Image::Indeo4Decoder::decodeFrame(Common::SeekableReadStream&)", "Image::TGADecoder::loadStream(Common::SeekableReadStream&)", "Image::PNGDecoder::loadStream(Common::SeekableReadStream&)", "Image::Indeo5Decoder::decodeFrame(Common::SeekableReadStream&)", "Image::CinepakDecoder::decodeFrame(Common::SeekableReadStream&)", "Image::JYV1Decoder::decodeFrame(Common::SeekableReadStream&)", "Image::writePNG(Common::WriteStream&, Graphics::Surface const&, unsigned char const*)", "Image::MJPEGDecoder::decodeFrame(Common::SeekableReadStream&)", "Image::MSRLEDecoder::decodeFrame(Common::SeekableReadStream&)", "Image::MSRLE4Decoder::decodeFrame(Common::SeekableReadStream&)", "Image::XanDecoder::decodeChroma(Common::SeekableReadStream&, int)", "Image::XanDecoder::decodeFrame(Common::SeekableReadStream&)", "Image::XanDecoder::decompressLuma(Common::SeekableReadStream&)", "Image::_unpack(Common::SeekableReadStream&, unsigned char*, int)", "Image::MSVideo1Decoder::decodeFrame(Common::SeekableReadStream&)", "Image::Indeo::IndeoDecoderBase::IndeoDecoderBase(unsigned short, unsigned short, unsigned int)", "Image::Indeo::IndeoDecoderBase::iviMc(Image::Indeo::IVIBandDesc*, void (*)(short*, short const*, unsigned int, int), void (*)(short*, short const*, short const*, unsigned int, int, int), int, int, int, int, int, int, int)", "Image::Indeo::IndeoDecoderBase::decodeIndeoFrame()", "Image::Indeo::IndeoDecoderBase::decodeCodedBlocks(Image::Indeo::GetBits*, Image::Indeo::IVIBandDesc*, void (*)(short*, short const*, unsigned int, int), void (*)(short*, short const*, short const*, unsigned int, int, int), int, int, int, int, int*, int, int, int, unsigned int, int)", "Image::Indeo::IndeoDecoderBase::decode_band(Image::Indeo::IVIBandDesc*)", "Graphics::CursorManager::showMouse(bool)", "Graphics::CursorManager::pushCursor(void const*, unsigned int, unsigned int, int, int, unsigned int, bool, Graphics::PixelFormat const*)", "Graphics::CursorManager::popCursor()", "Graphics::Font::getBoundingBox(unsigned int) const", "Graphics::CursorManager::popCursorPalette()", "Graphics::Font::getStringWidth(Common::U32String const&) const", "Graphics::Font::drawChar(Graphics::ManagedSurface*, unsigned int, int, int, unsigned int) const", "Graphics::CursorManager::replaceCursor(void const*, unsigned int, unsigned int, int, int, unsigned int, bool, Graphics::PixelFormat const*)", "Graphics::Font::drawString(Graphics::Surface*, Common::String const&, int, int, int, unsigned int, Graphics::TextAlign, int, bool) const", "Graphics::Font::drawString(Graphics::ManagedSurface*, Common::String const&, int, int, int, unsigned int, Graphics::TextAlign, int, bool) const", "Graphics::Font::wordWrapText(Common::U32String const&, int, Common::Array<Common::U32String>&, int, unsigned int) const", "Graphics::Font::drawString(Graphics::Surface*, Common::U32String const&, int, int, int, unsigned int, Graphics::TextAlign, int, bool) constGraphics::AmigaFont::AmigaFont(Common::SeekableReadStream*)", "Graphics::TTFFont::drawChar(Graphics::ManagedSurface*, unsigned int, int, int, unsigned int) const", "Graphics::TTFLibrary::~TTFLibrary()", "Graphics::ManagedSurface::ManagedSurface(Graphics::ManagedSurface const&)", "Graphics::TTFFont::load(Common::SeekableReadStream&, int, Graphics::TTFSizeMode, unsigned int, Graphics::TTFRenderMode, unsigned int const*, bool)", "Graphics::ManagedSurface::create(short, short, Graphics::PixelFormat const&)", "Graphics::ManagedSurface::setPixels(void*)", "Graphics::ManagedSurface::ManagedSurface(Graphics::Surface const*)", "Graphics::ManagedSurface::create(short, short)", "Graphics::ManagedSurface::create(Graphics::ManagedSurface&, Common::Rect const&)", "Graphics::ManagedSurface::blitFromInner(Graphics::Surface const&, Common::Rect const&, Common::Rect const&, unsigned int const*)", "Graphics::ManagedSurface::addDirtyRect(Common::Rect const&)", "OpenGL::clearGLError()", "OpenGL::checkGLError(char const*, char const*, int)", "OpenGL::Shader::createDirectShader(unsigned long, char const* const*, unsigned int, Common::String const&) OpenGL::Shader::createCompatShader(char const*, unsigned int, Common::String const&, int)", "OpenGL::Shader::loadShader(Common::String const&, unsigned int, unsigned int, char const* const*)", "OpenGL::Shader::freeBuffer(unsigned int)", "OpenGL::Shader::createBuffer(unsigned int, long, void const*, unsigned int)", "Graphics::ManagedSurface::transBlitFromInner(Graphics::Surface const&, Common::Rect const&, Common::Rect const&, unsigned int, bool, unsigned int, unsigned int, unsigned int const*, unsigned int const*, Graphics::Surface const*, bool)", "OpenGL::Shader::addAttribute(char const*)", "OpenGL::Shader::unbind()", "OpenGL::Shader::~Shader()", "OpenGL::Shader::use(bool)", "Graphics::TTFFont::getKerningOffset(unsigned int, unsigned int) const", "Graphics::frame(Graphics::ManagedSurface*, int, int, int, int, int, int, int, int, int)", "Graphics::blacksquareinwhitecircle(Graphics::ManagedSurface*, int, int, int, int, int)", "Graphics::drawRow(Graphics::ManagedSurface*, int, int*, int, int, int, int, int)", "Graphics::circleColorNoblend(Graphics::ManagedSurface*, double, double, double, int, bool)", "Scaler::scale(unsigned char const*, unsigned int, unsigned char*, unsigned int, int, int, int, int)", "NormalScaler::increaseFactor()", "NormalScaler::decreaseFactor()", "Graphics::TTFFont::cacheGlyph(Graphics::TTFFont::Glyph&, unsigned int) const", "Common::BasePtrTrackerDeletionImpl<unsigned int, OpenGL::SharedPtrProgramDeleter>::destructObject()", "Graphics::SVGBitmap::~SVGBitmap()", "Graphics::SVGBitmap::SVGBitmap(Common::SeekableReadStream*)", "Graphics::VectorRenderer::drawStep(Common::Rect const&, Common::Rect const&, Graphics::DrawStep const&, unsigned int)", "Graphics::VectorRenderer::drawCross(int, int, int, int)", "Graphics::VectorRendererSpec<unsigned int>::drawCircle(int, int, int)", "Graphics::VectorRendererSpec<unsigned int>::drawSquare(int, int, int, int)", "Graphics::VectorRendererSpec<unsigned int>::drawTriangle(int, int, int, int, Graphics::VectorRenderer::TriangleOrientation)", "Graphics::VectorRendererSpec<unsigned int>::drawRoundedSquare(int, int, int, int, int)", "Graphics::VectorRendererSpec<unsigned int>::drawBeveledSquare(int, int, int, int)", "Graphics::VectorRendererSpec<unsigned int>::drawTab(int, int, int, int, int, int)", "Graphics::VectorRendererSpec<unsigned int>::drawLine(int, int, int, int)", "Graphics::SVGBitmap::render(Graphics::ManagedSurface&, int, int)", "Graphics::VectorRendererSpec<unsigned int>::copyFrame(OSystem*, Common::Rect const&)", "Graphics::VectorRendererSpec<unsigned int>::copyWholeFrame(OSystem*)", "SourceScaler::scaleIntern(unsigned char const*, unsigned int, unsigned char*, unsigned int, int, int, int, int)", "Graphics::VectorRendererSpec<unsigned int>::drawString(Graphics::Font const*, Common::U32String const&, Common::Rect const&, Graphics::TextAlign, GUI::ThemeEngine::TextAlignVertical, int, bool, Common::Rect const&)", "Graphics::VectorRendererSpec<unsigned int>::drawRoundedSquareAlg(int, int, int, int, int, unsigned int, Graphics::VectorRenderer::FillMode)", "Graphics::VectorRendererSpec<unsigned int>::drawRoundedSquareAlgClip(int, int, int, int, int, unsigned int, Graphics::VectorRenderer::FillMode)", "OpenGL::Context::initialize(OpenGL::ContextType)", "Graphics::VectorRendererSpec<unsigned int>::drawBevelSquareAlgClip(int, int, int, int, int, unsigned int, unsigned int)", "Graphics::VectorRendererSpec<unsigned int>::drawBevelSquareAlg(int, int, int, int, int, unsigned int, unsigned int)", "Graphics::VectorRendererSpec<unsigned short>::drawSquare(int, int, int, int)", "Graphics::VectorRendererSpec<unsigned short>::drawLine(int, int, int, int)", "Graphics::VectorRendererSpec<unsigned short>::drawCircle(int, int, int)", "Graphics::VectorRendererSpec<unsigned short>::drawRoundedSquare(int, int, int, int, int)", "Graphics::VectorRendererSpec<unsigned short>::drawBeveledSquare(int, int, int, int)", "Graphics::VectorRendererSpec<unsigned short>::drawTriangle(int, int, int, int, Graphics::VectorRenderer::TriangleOrientation)", "Graphics::VectorRendererSpec<unsigned short>::drawTab(int, int, int, int, int, int)", "Graphics::VectorRendererSpec<unsigned short>::drawString(Graphics::Font const*, Common::U32String const&, Common::Rect const&, Graphics::TextAlign, GUI::ThemeEngine::TextAlignVertical, int, bool, Common::Rect const&)", "Graphics::VectorRendererSpec<unsigned short>::drawRoundedSquareAlg(int, int, int, int, int, unsigned short, Graphics::VectorRenderer::FillMode)", "Graphics::VectorRendererSpec<unsigned short>::drawRoundedSquareAlgClip(int, int, int, int, int, unsigned short, Graphics::VectorRenderer::FillMode)", "Graphics::VectorRendererSpec<unsigned short>::drawBevelSquareAlg(int, int, int, int, int, unsigned short, unsigned short)", "Graphics::VectorRendererSpec<unsigned short>::drawBevelSquareAlgClip(int, int, int, int, int, unsigned short, unsigned short)", "Graphics::VectorRendererAA<unsigned int>::drawRoundedSquareAlg(int, int, int, int, int, unsigned int, Graphics::VectorRenderer::FillMode)", "Graphics::VectorRendererAA<unsigned short>::drawRoundedSquareAlg(int, int, int, int, int, unsigned short, Graphics::VectorRenderer::FillMode)", "Graphics::VectorRendererAA<unsigned int>::drawInteriorRoundedSquareAlg(int, int, int, int, int, unsigned int, Graphics::VectorRenderer::FillMode)", "Graphics::VectorRendererAA<unsigned short>::drawInteriorRoundedSquareAlg(int, int, int, int, int, unsigned short, Graphics::VectorRenderer::FillMode)", "AdvMameScaler::increaseFactor()", "AdvMameScaler::decreaseFactor()", "HQScaler::increaseFactor()", "AdLibPart::send(unsigned int)", "MidiDriver_ADLIB::partKeyOff(AdLibPart*, unsigned char)", "MidiDriver_ADLIB::adlibPlayNote(int, int)", "MidiDriver_ADLIB::allocateVoice(unsigned char)", "AdLibPart::controlChange(unsigned char, unsigned char)", "MidiDriver_ADLIB::adlibNoteOnEx(int, unsigned char, int)", "MidiDriver_ADLIB::mcKeyOn(AdLibVoice*, AdLibInstrument const*, unsigned char, unsigned char, AdLibInstrument const*, unsigned char)", "AdLibPart::volume(unsigned char)", "AdLibPart::allNotesOff()", "AdLibPart::sustain(bool)", "MidiDriver_ADLIB::send(unsigned int)", "MidiDriver_ADLIB::close()", "MidiDriver_ADLIB::send(signed char, unsigned int)", "MidiDriver_ADLIB::mcIncStuff(AdLibVoice*, Struct10*, Struct11*)", "MidiDriver_ADLIB::open()", "MidiDriver_ADLIB::onTimer()", "AdLibEmuMusicPlugin::createInstance(MidiDriver**, unsigned int) const", "Common::Functor0Mem<void, MidiDriver_ADLIB>::operator()() const", "Audio::LoopingAudioStream::readBuffer(short*, int)", "Audio::LoopingAudioStream::endOfData() const", "Audio::LoopingAudioStream::LoopingAudioStream(Common::DisposablePtr<Audio::RewindableAudioStream, Common::DefaultDeleter<Audio::RewindableAudioStream>>&&, unsigned int, bool)", "Audio::makeLoopingAudioStream(Audio::RewindableAudioStream*, unsigned int)", "Audio::QueuingAudioStreamImpl::~QueuingAudioStreamImpl()", "Audio::SubSeekableAudioStream::readBuffer(short*, int)", "Audio::QueuingAudioStreamImpl::readBuffer(short*, int)", "Audio::QueuingAudioStreamImpl::queueAudioStream(Audio::AudioStream*, DisposeAfterUse::Flag)", "Audio::makeLimitingAudioStream(Audio::AudioStream*, Audio::Timestamp const&, DisposeAfterUse::Flag)", "Audio::AudioStream::endOfStream() const", "Audio::LoopingAudioStream::isStereo() const", "Audio::LoopingAudioStream::getRate() const", "Audio::SeekableAudioStream::rewind()", "Audio::LoopingAudioStream::~LoopingAudioStream()", "Audio::SubSeekableAudioStream::~SubSeekableAudioStream()", "Audio::LimitingAudioStream::~LimitingAudioStream()", "Audio::LimitingAudioStream::~LimitingAudioStream().1", "Audio::LimitingAudioStream::readBuffer(short*, int)", "Audio::LimitingAudioStream::getRate() const", "Audio::LimitingAudioStream::endOfData() const", "Audio::LimitingAudioStream::isStereo() const", "OPL::EmulatedOPL::~EmulatedOPL()", "OPL::EmulatedOPL::readBuffer(short*, int)", "OPL::EmulatedOPL::getRate() const", "OPL::EmulatedOPL::startCallbacks(int)", "OPL::EmulatedOPL::stopCallbacks()", "Audio::QueuingAudioStreamImpl::endOfData() const  OPL::OPL::~OPL()", "MidiDriver_BASE::MidiDriver_BASE()", "MidiDriver::midiDriverCommonSend(unsigned int)", "MidiDriver::midiDriverCommonSysEx(unsigned char const*, unsigned short)", "MidiDriver_BASE::~MidiDriver_BASE() Audio::MixerImpl::~MixerImpl()", "Audio::MixerImpl::muteSoundType(Audio::Mixer::SoundType, bool)", "MidiDriver_BASE::stopAllNotes(bool)", "non-virtual thunk to OPL::EmulatedOPL::readBuffer(short*, int)", "Audio::MixerImpl::setChannelVolume(Audio::SoundHandle, unsigned char)", "Audio::MixerImpl::playStream(Audio::Mixer::SoundType, Audio::SoundHandle*, Audio::AudioStream*, int, unsigned char, signed char, DisposeAfterUse::Flag, bool, bool)", "Audio::MixerImpl::setChannelBalance(Audio::SoundHandle, signed char)", "Audio::MixerImpl::getSoundElapsedTime(Audio::SoundHandle)", "Audio::MixerImpl::getElapsedTime(Audio::SoundHandle)", "Audio::MixerImpl::pauseAll(bool)", "Audio::MixerImpl::pauseHandle(Audio::SoundHandle, bool)", "Audio::MixerImpl::loopChannel(Audio::SoundHandle)", "Audio::MixerImpl::setVolumeForSoundType(Audio::Mixer::SoundType, int)", "MidiChannel_MPU401::send(unsigned int)", "Audio::Channel::~Channel()", "MidiChannel_MPU401::noteOff(unsigned char)", "MidiChannel_MPU401::programChange(unsigned char)", "MidiChannel_MPU401::controlChange(unsigned char, unsigned char)", "MidiChannel_MPU401::pitchBendFactor(unsigned char)", "MidiChannel_MPU401::pitchBend(short)", "MidiDriver_MPU401::close()", "MidiChannel::modulationWheel(unsigned char)", "MidiChannel::detune(unsigned char)MidiDriver_MPU401::setTimerCallback(void*, void (*)(void*))", "MidiChannel::sustain(bool)", "MidiChannel::effectLevel(unsigned char)", "MidiChannel::chorusLevel(unsigned char)", "MidiChannel::allNotesOff()", "MusicDevice::MusicDevice(MusicPluginObject const*, Common::String, MusicType)", "MidiChannel::panPosition(unsigned char)", "MidiChannel::volume(unsigned char)", "Audio::LinearRateConverter<true, true, true>::flow(Audio::AudioStream&, short*, unsigned int, unsigned short, unsigned short)", "Audio::SimpleRateConverter<true, true, true>::flow(Audio::AudioStream&, short*, unsigned int, unsigned short, unsigned short)", "Audio::CopyRateConverter<true, true, true>::flow(Audio::AudioStream&, short*, unsigned int, unsigned short, unsigned short)", "Audio::SimpleRateConverter<true, true, false>::flow(Audio::AudioStream&, short*, unsigned int, unsigned short, unsigned short)", "Audio::CopyRateConverter<true, true, false>::flow(Audio::AudioStream&, short*, unsigned int, unsigned short, unsigned short)", "Audio::LinearRateConverter<true, true, false>::flow(Audio::AudioStream&, short*, unsigned int, unsigned short, unsigned short)", "Audio::SimpleRateConverter<true, false, false>::flow(Audio::AudioStream&, short*, unsigned int, unsigned short, unsigned short)", "Audio::SimpleRateConverter<false, true, false>::flow(Audio::AudioStream&, short*, unsigned int, unsigned short, unsigned short)", "Audio::LinearRateConverter<false, true, false>::flow(Audio::AudioStream&, short*, unsigned int, unsigned short, unsigned short)", "Audio::CopyRateConverter<true, false, false>::flow(Audio::AudioStream&, short*, unsigned int, unsigned short, unsigned short)", "Audio::LinearRateConverter<true, false, false>::flow(Audio::AudioStream&, short*, unsigned int, unsigned short, unsigned short)", "Audio::CopyRateConverter<false, true, false>::flow(Audio::AudioStream&, short*, unsigned int, unsigned short, unsigned short)", "Audio::LinearRateConverter<false, false, false>::flow(Audio::AudioStream&, short*, unsigned int, unsigned short, unsigned short)", "Audio::SimpleRateConverter<false, false, false>::flow(Audio::AudioStream&, short*, unsigned int, unsigned short, unsigned short)", "Audio::CopyRateConverter<false, false, false>::flow(Audio::AudioStream&, short*, unsigned int, unsigned short, unsigned short)", "Audio::ADPCMStream::rewind()", "Audio::Oki_ADPCMStream::readBuffer(short*, int)", "Audio::DVI_ADPCMStream::readBuffer(short*, int)", "Audio::ADPCMStream::endOfData() const", "Audio::MS_ADPCMStream::readBuffer(short*, int)", "Audio::Oki_ADPCMStream::~Oki_ADPCMStream()", "Audio::makeADPCMStream(Common::SeekableReadStream*, DisposeAfterUse::Flag, unsigned int, Audio::ADPCMType, int, int, unsigned int)", "Audio::Oki_ADPCMStream::~Oki_ADPCMStream().1", "Audio::XA_ADPCMStream::readBuffer(short*, int)", "Audio::Oki_ADPCMStream::endOfData() const", "Audio::Apple_ADPCMStream::readBuffer(short*, int)", "Audio::XA_ADPCMStream::~XA_ADPCMStream()", "Audio::XA_ADPCMStream::~XA_ADPCMStream().1", "Audio::Apple_ADPCMStream::~Apple_ADPCMStream()", "Audio::DVI_ADPCMStream::~DVI_ADPCMStream().1", "Audio::Apple_ADPCMStream::~Apple_ADPCMStream().1", "Audio::MSIma_ADPCMStream::~MSIma_ADPCMStream() Audio::DK3_ADPCMStream::readBuffer(short*, int) Audio::MSIma_ADPCMStream::~MSIma_ADPCMStream().1", "Audio::MS_ADPCMStream::~MS_ADPCMStream()", "Audio::MS_ADPCMStream::~MS_ADPCMStream().1", "Audio::MS_ADPCMStream::endOfData() const", "Audio::DK3_ADPCMStream::~DK3_ADPCMStream()", "Audio::DK3_ADPCMStream::~DK3_ADPCMStream().1", "Audio::DVI_ADPCMStream::~DVI_ADPCMStream()", "Audio::G711AudioStream::seek(Audio::Timestamp const&)", "Audio::G711ALawStream::~G711ALawStream().1", "Audio::G711AudioStream::readBuffer(short*, int)", "Audio::G711ALawStream::~G711ALawStream()", "Audio::G711MuLawStream::~G711MuLawStream()", "Audio::QuickTimeAudioDecoder::~QuickTimeAudioDecoder()", "Audio::G711MuLawStream::~G711MuLawStream().1", "Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::getCurrentTrackTime() const", "Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::~QuickTimeAudioTrack()", "Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::~QuickTimeAudioTrack().1", "Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::enterNewEdit(Audio::Timestamp const&)", "Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::queueStream(Audio::AudioStream*, Audio::Timestamp const&)", "Audio::QuickTimeAudioDecoder::readSampleDesc(Common::QuickTimeParser::Track*, unsigned int, unsigned int)", "Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::skipSamples(Audio::Timestamp const&, Audio::AudioStream*)", "Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::readBuffer(short*, int)", "Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::endOfData() const", "Audio::QuickTimeAudioDecoder::AudioSampleDesc::~AudioSampleDesc()", "Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::seek(Audio::Timestamp const&)", "Audio::G711AudioStream::getLength() const", "Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::isStereo() const", "Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::getRate() const", "Audio::QuickTimeAudioDecoder::QuickTimeAudioTrack::queueAudio(Audio::Timestamp const&)", "Audio::ForcedMonoAudioStream::~ForcedMonoAudioStream().1", "Audio::ForcedMonoAudioStream::~ForcedMonoAudioStream()", "Audio::ForcedMonoAudioStream::readBuffer(short*, int)", "Audio::QuickTimeAudioStream::~QuickTimeAudioStream()", "Audio::QuickTimeAudioStream::getRate() const Audio::QuickTimeAudioStream::isStereo() const  Audio::QuickTimeAudioStream::~QuickTimeAudioStream().1", "Audio::QuickTimeAudioStream::endOfData() const Audio::QuickTimeAudioStream::seek(Audio::Timestamp const&)", "non-virtual thunk to Audio::QuickTimeAudioStream::~QuickTimeAudioStream()", "Audio::QuickTimeAudioStream::getLength() const", "non-virtual thunk to Audio::QuickTimeAudioStream::~QuickTimeAudioStream().1", "Audio::RawStream<3, true, true>::~RawStream()", "Audio::RawStream<3, true, true>::~RawStream().1", "Audio::makeQuickTimeStream(Common::SeekableReadStream*, DisposeAfterUse::Flag)", "Audio::RawStream<3, true, false>::~RawStream().1", "Audio::RawStream<3, true, false>::readBuffer(short*, int)", "Audio::RawStream<2, true, true>::~RawStream().1", "Audio::RawStream<2, true, true>::readBuffer(short*, int)", "Audio::makeRawStream(Common::SeekableReadStream*, int, unsigned char, DisposeAfterUse::Flag)", "Audio::RawStream<2, true, false>::~RawStream()", "Audio::RawStream<2, true, true>::seek(Audio::Timestamp const&)", "Audio::RawStream<1, true, false>::~RawStream()", "Audio::RawStream<2, true, false>::~RawStream().1", "Audio::RawStream<2, true, false>::readBuffer(short*, int)", "Audio::RawStream<1, true, false>::~RawStream().1", "Audio::RawStream<1, true, false>::readBuffer(short*, int)", "Audio::RawStream<3, false, true>::~RawStream().1", "Audio::RawStream<3, false, true>::~RawStream()", "Audio::RawStream<1, true, false>::seek(Audio::Timestamp const&)", "Audio::RawStream<3, false, false>::~RawStream()", "Audio::RawStream<3, false, true>::readBuffer(short*, int)", "Audio::RawStream<3, false, false>::~RawStream().1", "Audio::RawStream<2, false, true>::~RawStream().1", "Audio::RawStream<2, false, true>::~RawStream()", "Audio::RawStream<2, true, true>::~RawStream()", "Audio::RawStream<2, false, false>::~RawStream()", "Audio::RawStream<1, false, false>::~RawStream().1", "Audio::RawStream<2, false, false>::~RawStream().1", "Audio::RawStream<2, false, false>::readBuffer(short*, int)", "Audio::RawStream<1, false, false>::~RawStream()", "Audio::RawStream<2, false, true>::readBuffer(short*, int)", "Audio::RawStream<1, false, false>::readBuffer(short*, int)", "OPL::DOSBox::DBOPL::Channel* OPL::DOSBox::DBOPL::Channel::BlockTemplate<(OPL::DOSBox::DBOPL::SynthMode)1>(OPL::DOSBox::DBOPL::Chip*, unsigned int, int*)", "OPL::DOSBox::DBOPL::Channel* OPL::DOSBox::DBOPL::Channel::BlockTemplate<(OPL::DOSBox::DBOPL::SynthMode)6>(OPL::DOSBox::DBOPL::Chip*, unsigned int, int*)", "Audio::makeWAVStream(Common::SeekableReadStream*, DisposeAfterUse::Flag)", "OPL::DOSBox::DBOPL::Channel* OPL::DOSBox::DBOPL::Channel::BlockTemplate<(OPL::DOSBox::DBOPL::SynthMode)7>(OPL::DOSBox::DBOPL::Chip*, unsigned int, int*)", "OPL::DOSBox::DBOPL::Channel* OPL::DOSBox::DBOPL::Channel::BlockTemplate<(OPL::DOSBox::DBOPL::SynthMode)5>(OPL::DOSBox::DBOPL::Chip*, unsigned int, int*)", "Audio::RawStream<3, true, false>::~RawStream() OPL::DOSBox::DBOPL::Channel* OPL::DOSBox::DBOPL::Channel::BlockTemplate<(OPL::DOSBox::DBOPL::SynthMode)3>(OPL::DOSBox::DBOPL::Chip*, unsigned int, int*)", "Audio::RawStream<3, false, false>::readBuffer(short*, int)", "OPL::DOSBox::DBOPL::Channel* OPL::DOSBox::DBOPL::Channel::BlockTemplate<(OPL::DOSBox::DBOPL::SynthMode)8>(OPL::DOSBox::DBOPL::Chip*, unsigned int, int*)", "OPL::DOSBox::DBOPL::Channel* OPL::DOSBox::DBOPL::Channel::BlockTemplate<(OPL::DOSBox::DBOPL::SynthMode)2>(OPL::DOSBox::DBOPL::Chip*, unsigned int, int*)", "OPL::DOSBox::DBOPL::Channel* OPL::DOSBox::DBOPL::Channel::BlockTemplate<(OPL::DOSBox::DBOPL::SynthMode)0>(OPL::DOSBox::DBOPL::Chip*, unsigned int, int*)", "OPL::DOSBox::DBOPL::Channel* OPL::DOSBox::DBOPL::Channel::BlockTemplate<(OPL::DOSBox::DBOPL::SynthMode)11>(OPL::DOSBox::DBOPL::Chip*, unsigned int, int*)", "OPL::DOSBox::OPL::~OPL()", "OPL::DOSBox::OPL::reset()", "OPL::DOSBox::Chip::write(unsigned int, unsigned char) OPL::DOSBox::OPL::writeReg(int, int)", "OPL::DOSBox::DBOPL::Channel* OPL::DOSBox::DBOPL::Channel::BlockTemplate<(OPL::DOSBox::DBOPL::SynthMode)10>(OPL::DOSBox::DBOPL::Chip*, unsigned int, int*)", "OPL::DOSBox::OPL::read(int)", "OPL::DOSBox::OPL::generateSamples(short*, int)", "OPL::MAME::OPL::~OPL() OPL::DOSBox::OPL::init()", "OPL::MAME::OPL::write(int, int)", "OPL::MAME::OPLResetChip(OPL::MAME::fm_opl_f*)", "OPL::MAME::OPL_STATUS_RESET(OPL::MAME::fm_opl_f*, int)", "MidiDriver_MT32::~MidiDriver_MT32()", "MidiDriver_MT32::close()", "MidiDriver_MT32::generateSamples(short*, int)", "MidiDriver_Emulated::readBuffer(short*, int)", "OPL::MAME::OPLWriteReg(OPL::MAME::fm_opl_f*, int, int)", "OPL::MAME::OPL::init()", "MT32EmuMusicPlugin::createInstance(MidiDriver**, unsigned int) const", "MT32Emu::CppInterfaceImpl::printDebug(void*, char const*, void*)", "MT32Emu::CppInterfaceImpl::onErrorControlROM(void*)", "MT32Emu::ScummVMReportHandler::showLCDMessage(char const*)", "MT32Emu::CppInterfaceImpl::onErrorPCMROM(void*)", "MT32Emu::CppInterfaceImpl::showLCDMessage(void*, char const*)", "MT32Emu::CppInterfaceImpl::onMIDIMessagePlayed(void*)", "MT32Emu::CppInterfaceImpl::onMIDISystemRealtime(void*, unsigned char)", "MT32Emu::CppInterfaceImpl::onDeviceReset(void*)", "MT32Emu::CppInterfaceImpl::onNewReverbMode(void*, unsigned char)", "MT32Emu::CppInterfaceImpl::onNewReverbTime(void*, unsigned char)", "MT32Emu::CppInterfaceImpl::onNewReverbLevel(void*, unsigned char)", "MT32Emu::CppInterfaceImpl::onPolyStateChanged(void*, unsigned char)", "MT32Emu::CppInterfaceImpl::onProgramChanged(void*, unsigned char, char const*, char const*)", "MidiDriver_MT32::open()", "OPL::NUKED::OPL::~OPL()", "OPL::NUKED::OPL::init()", "Common::GenericArchiveMember::createReadStream() const", "Common::Archive::listMatchingMembers(Common::List<Common::SharedPtr<Common::ArchiveMember>>&, Common::Path const&) const", "Common::MemcachingCaseInsensitiveArchive::createReadStreamForMember(Common::Path const&) const", "Common::SearchSet::add(Common::String const&, Common::Archive*, int, bool)", "OPL::NUKED::OPL::generateSamples(short*, int)", "Common::SearchSet::remove(Common::String const&)", "Common::SearchSet::clear()", "Common::SearchSet::hasFile(Common::Path const&) const", "Common::SearchSet::listMembers(Common::List<Common::SharedPtr<Common::ArchiveMember>>&) const", "Common::SearchSet::createReadStreamForMember(Common::Path const&) const", "Common::SearchSet::getMember(Common::Path const&) const", "Common::SearchManager::clear()", "Common::SearchSet::~SearchSet().1", "Common::SearchSet::~SearchSet()", "Common::ArchiveMember::getDisplayName() const", "Common::SearchManager::~SearchManager() Common::SearchManager::~SearchManager().1", "non-virtual thunk to Common::SearchManager::~SearchManager().1", "Common::BaseString<char>::incRefCount() const", "Common::BaseString<char>::decRefCount(int*)", "Common::HashMap<Common::String, Common::SharedArchiveContents, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::~HashMap()", "Common::ConfigManager::writeDomain(Common::WriteStream&, Common::String const&, Common::ConfigManager::Domain const&)", "Common::ConfigManager::flushToDisk()", "Common::ConfigManager::loadFromStream(Common::SeekableReadStream&)", "debugN(int, char const*, ...)", "debug(int, char const*, ...) debug(char const*, ...)", "Common::EventManager::~EventManager()", "Common::EventDispatcher::unregisterSource(Common::EventSource*)", "Common::EventDispatcher::unregisterObserver(Common::EventObserver*)", "Common::File::~File().2", "Common::File::open(Common::Path const&)", "Common::File::err() const", "Common::File::~File().1Common::File::close()", "Common::EventDispatcher::dispatch()", "Common::File::eos() const Common::File::pos() const", "Common::File::seek(long long, int)Common::File::size() const Common::File::exists(Common::Path const&)", "Common::File::read(void*, unsigned int)", "Common::DumpFile::~DumpFile()", "Common::DumpFile::open(Common::FSNode const&)", "Common::DumpFile::err() const", "Common::DumpFile::write(void const*, unsigned int)", "Common::DumpFile::~DumpFile().1", "Common::DumpFile::open(Common::String const&, bool)", "Common::DumpFile::flush()", "Common::FSNode::getDisplayName() const", "Common::FSNode::FSNode(Common::Path const&) Common::FSNode::getChild(Common::String const&) const", "Common::FSNode::getParent() const", "Common::FSNode::getPath() const", "Common::FSNode::createReadStream() const", "Common::FSNode::getChildren(Common::FSList&, Common::FSNode::ListMode, bool) const", "Common::FSNode::createWriteStream() const", "Common::FSNode::getName() const", "Common::FSDirectory::~FSDirectory()", "Common::FSDirectory::ensureCached() const", "Common::FSDirectory::hasFile(Common::Path const&) const", "Common::FSDirectory::createReadStreamForMember(Common::Path const&) const", "Common::FSNode::~FSNode().1", "Common::FSDirectory::getMember(Common::Path const&) const Common::FSDirectory::cacheDirectoryRecursive(Common::FSNode, int, Common::Path const&) const Common::BasePtrTrackerImpl<AbstractFSNode>::destructObject()", "Common::DumpFile::seek(long long, int) Common::FSDirectory::listMembers(Common::List<Common::SharedPtr<Common::ArchiveMember>>&) const", "Common::FSDirectory::listMatchingMembers(Common::List<Common::SharedPtr<Common::ArchiveMember>>&, Common::Path const&) const", "Common::MacResManager::close()", "Common::MacResManager::getResForkDataSize() const", "Common::MacResManager::open(Common::Path const&, Common::Archive&)", "Common::MacResManager::computeResForkMD5AsString(unsigned int, bool) const", "Common::MacResManager::loadFromAppleDouble(Common::SeekableReadStream*)", "Common::MacResManager::loadFromMacBinary(Common::SeekableReadStream*)", "Common::MacResManager::readAndValidateMacBinaryHeader(Common::SeekableReadStream&, unsigned char (&) [128])", "Common::MacResManager::load(Common::SeekableReadStream*)", "Common::MacResManager::openFileOrDataFork(Common::Path const&, Common::Archive&)", "Common::Mutex::Mutex()", "Common::StackLock::StackLock(Common::Mutex const&, char const*)", "Common::StackLock::~StackLock()", "Common::OSDMessageQueue::~OSDMessageQueue()", "Common::OSDMessageQueue::pollEvent(Common::Event&)", "Common::computeStreamMD5AsString(Common::ReadStream&, unsigned int)", "Common::ReadStream::readString(char, unsigned long)", "Common::ReadStream::readStream(unsigned int)", "Common::SubReadStream::read(void*, unsigned int)", "Common::SeekableReadStream::readLine(char*, unsigned long, bool)", "Common::SubReadStream::~SubReadStream()", "Common::SubReadStream::~SubReadStream().1", "Common::SubReadStream::clearErr()Common::SeekableReadStream::readLine(bool)  Common::MemoryReadStream::~MemoryReadStream().1", "Common::SeekableSubReadStream::~SeekableSubReadStream()", "virtual thunk to Common::SeekableSubReadStream::~SeekableSubReadStream()  virtual thunk to Common::SeekableSubReadStream::~SeekableSubReadStream().1", "Common::SafeSeekableSubReadStream::~SafeSeekableSubReadStream()", "virtual thunk to Common::SafeSeekableSubReadStream::~SafeSeekableSubReadStream()", "", "OSystem::initBackend()", "OSystem::destroy()", "OSystem::setGraphicsMode(char const*)", "OSystem::fatalError()", "OSystem::createConfigReadStream()", "virtual thunk to Common::SafeSeekableSubReadStream::~SafeSeekableSubReadStream().1", "warning(char const*, ...)", "OSystem::setStretchMode(char const*)", "Common::TTSVoice::~TTSVoice()", "Common::TextToSpeechManager::pushState()", "OSystem::createConfigWriteStream()", "Common::TextToSpeechManager::popState()", "error(char const*, ...)", "Common::TranslationManager::openTranslationsFile(Common::FSNode const&, Common::File&, int)", "Common::TranslationManager::TranslationManager(Common::String const&)", "Common::TranslationManager::openTranslationsFile(Common::File&)", "Common::GzioReadStream::~GzioReadStream()", "Common::GzioReadStream::~GzioReadStream().1", "Common::TranslationManager::setLanguage(Common::String const&)", "unzOpen(Common::SeekableReadStream*)", "Common::ZipArchive::~ZipArchive()", "unzlocal_GetCurrentFileInfoInternal(void*, unz_file_info*, unz_file_info_internal*, char*, unsigned long, void*, unsigned long, char*, unsigned long)", "Common::makeZipArchive(Common::FSNode const&)", "Common::GZipReadStream::~GZipReadStream()", "Common::GZipReadStream::~GZipReadStream().1", "Common::GZipReadStream::read(void*, unsigned int)", "Common::GzioReadStream::readAtOffset(long long, unsigned char*, unsigned int)", "Common::GZipReadStream::seek(long long, int)", "Common::GZipWriteStream::err() const", "Common::GZipWriteStream::~GZipWriteStream() Common::GZipWriteStream::clearErr()", "Common::GZipWriteStream::finalize()", "Common::GZipWriteStream::write(void const*, unsigned int)", "Common::INIFile::loadFromStream(Common::SeekableReadStream&)", "Common::ZipArchive::readContentsForPath(Common::String const&) const", "Common::INIFile::saveToSaveFile(Common::String const&)", "Common::QuickTimeParser::~QuickTimeParser()", "Common::QuickTimeParser::readLeaf(Common::QuickTimeParser::Atom)", "Common::QuickTimeParser::readELST(Common::QuickTimeParser::Atom)", "Common::QuickTimeParser::readMDHD(Common::QuickTimeParser::Atom)", "Common::QuickTimeParser::readDefault(Common::QuickTimeParser::Atom)", "Common::QuickTimeParser::readHDLR(Common::QuickTimeParser::Atom)", "Common::QuickTimeParser::readSTCO(Common::QuickTimeParser::Atom)", "Common::QuickTimeParser::readMVHD(Common::QuickTimeParser::Atom)", "Common::QuickTimeParser::readSTSS(Common::QuickTimeParser::Atom)", "Common::QuickTimeParser::readSTSC(Common::QuickTimeParser::Atom)", "Common::QuickTimeParser::readSTTS(Common::QuickTimeParser::Atom)", "Common::QuickTimeParser::readSTSZ(Common::QuickTimeParser::Atom)", "Common::QuickTimeParser::readWAVE(Common::QuickTimeParser::Atom)", "Common::QuickTimeParser::readSTSD(Common::QuickTimeParser::Atom)", "Common::QuickTimeParser::readESDS(Common::QuickTimeParser::Atom)", "Common::QuickTimeParser::readCMOV(Common::QuickTimeParser::Atom)", "Common::readMP4Desc(Common::SeekableReadStream*, unsigned char&, int&)", "Common::QuickTimeParser::SampleDesc::~SampleDesc()", "Common::QuickTimeParser::SampleDesc::~SampleDesc().1", "Common::QuickTimeParser::Track::~Track()", "Common::QuickTimeParser::readTKHD(Common::QuickTimeParser::Atom)", "Common::WinResources::loadFromEXE(Common::String const&)", "Common::WinResources::getResource(Common::WinResourceID const&, Common::WinResourceID const&, Common::WinResourceID const&)", "Common::WinResources::loadFromCompressedEXE(Common::String const&)", "Common::NEResources::~NEResources()", "Common::NEResources::clear()", "Common::WinResources::VersionInfo::readVSVersionInfo(Common::SeekableReadStream*)", "Common::NEResources::getResource(Common::WinResourceID const&, Common::WinResourceID const&)", "Common::NEResources::parseVersionInfo(Common::SeekableReadStream*)", "Common::NEResources::loadString(unsigned int)", "Common::PEResources::clear()", "Common::PEResources::loadFromEXE(Common::SeekableReadStream*, DisposeAfterUse::Flag)", "Common::PEResources::parseResourceLevel(Common::PEResources::Section&, unsigned int, int)", "Common::PEResources::getResource(Common::WinResourceID const&, Common::WinResourceID const&)", "Common::PEResources::getResource(Common::WinResourceID const&, Common::WinResourceID const&, Common::WinResourceID const&)", "Common::PEResources::loadString(unsigned int)", "Common::PEResources::parseVersionInfo(Common::SeekableReadStream*)", "Common::XMLParser::closeKey()", "Common::XMLParser::~XMLParser()", "Common::XMLParser::parserError(Common::String const&)", "Common::NEResources::loadFromEXE(Common::SeekableReadStream*, DisposeAfterUse::Flag)", "Common::XMLParser::parse()", "MT32Emu::Partial::deactivate()", "MT32Emu::Poly::noteOff(bool)", "MT32Emu::Poly::startDecay() MT32Emu::Poly::stopPedalHold()", "MT32Emu::Partial::startPartial(MT32Emu::Part const*, MT32Emu::Poly*, MT32Emu::PatchCache const*, MT32Emu::MemParams::RhythmTemp const*, MT32Emu::Partial*)", "MT32Emu::Part::refreshTimbre(unsigned int)", "MT32Emu::Part::setProgram(unsigned int)", "MT32Emu::RhythmPart::noteOn(unsigned int, unsigned int)", "MT32Emu::BReverbModelImpl<short>::open()", "MT32Emu::BReverbModelImpl<short>::process(short const*, short const*, short*, short*, unsigned int)", "MT32Emu::BReverbModelImpl<float>::process(float const*, float const*, float*, float*, unsigned int) MT32Emu::BReverbModelImpl<short>::isActive() const", "MT32Emu::BReverbModelImpl<float>::open()", "MT32Emu::BReverbModelImpl<float>::isActive() const", "MT32Emu::ROMImage::ROMImage(MT32Emu::File*, bool, MT32Emu::ROMInfo const* const*)", "MT32Emu::ROMImage::~ROMImage()", "MT32Emu::AbstractFile::getSHA1()", "MT32Emu::AnalogImpl<float>::process(float*, float const*, float const*, float const*, float const*, float const*, float const*, unsigned int)", "MT32Emu::AccurateLowPassFilter::process(int)", "MT32Emu::AnalogImpl<int>::process(short*, short const*, short const*, short const*, short const*, short const*, short const*, unsigned int)", "MT32Emu::AccurateLowPassFilter::process(float)", "MT32Emu::AnalogImpl<int>::~AnalogImpl().1", "MT32Emu::AnalogImpl<float>::~AnalogImpl()", "MT32Emu::AnalogImpl<float>::~AnalogImpl().1", "MT32Emu::Part::playPoly(MT32Emu::PatchCache const*, MT32Emu::MemParams::RhythmTemp const*, unsigned int, unsigned int, unsigned int)", "MT32Emu::Synth::setReverbOutputGain(float)", "MT32Emu::Synth::printDebug(char const*, ...)", "MT32Emu::BReverbModelImpl<short>::setParameters(unsigned char, unsigned char)", "MT32Emu::Synth::refreshSystemReverbParameters()", "MT32Emu::Synth::dispose()", "MT32Emu::Synth::playMsg(unsigned int, unsigned int)", "MT32Emu::Synth::playSysex(unsigned char const*, unsigned int, unsigned int)", "MT32Emu::Synth::reset()", "MT32Emu::Synth::playMsgOnPart(unsigned char, unsigned char, unsigned char, unsigned char)", "MT32Emu::RendererImpl<short>::doRender(short*, unsigned int)", "MT32Emu::Synth::writeSysexGlobal(unsigned int, unsigned char const*, unsigned int)", "MT32Emu::RendererImpl<float>::doRender(float*, unsigned int)", "MT32Emu::Synth::writeSysex(unsigned char, unsigned char const*, unsigned int)", "MT32Emu::Synth::render(short*, unsigned int)", "MT32Emu::Synth::render(float*, unsigned int)", "MT32Emu::DefaultMidiStreamParser::handleShortMessage(unsigned int)", "non-virtual thunk to MT32Emu::DefaultMidiStreamParser::handleShortMessage(unsigned int)", "MT32Emu::DefaultMidiStreamParser::handleSysex(unsigned char const*, unsigned int)", "non-virtual thunk to MT32Emu::DefaultMidiStreamParser::handleSysex(unsigned char const*, unsigned int)", "MT32Emu::DefaultMidiStreamParser::handleSystemRealtimeMessage(unsigned char)", "non-virtual thunk to MT32Emu::DefaultMidiStreamParser::handleSystemRealtimeMessage(unsigned char)", "mt32emu_free_context", "MT32Emu::replaceOrMergeROMImage(MT32Emu::ROMImage const*&, MT32Emu::ROMImage const*, MT32Emu::MachineConfiguration const*, mt32emu_return_code, mt32emu_return_code)", "MT32Emu::DelegatingReportHandlerAdapter::printDebug(char const*, void*)", "MT32Emu::AnalogImpl<int>::getDACStreamsLength(unsigned int) const", "MT32Emu::DelegatingReportHandlerAdapter::showLCDMessage(char const*)", "MT32Emu::DelegatingReportHandlerAdapter::onMIDIMessagePlayed()", "MT32Emu::DelegatingReportHandlerAdapter::onMIDISystemRealtime(unsigned char)", "MT32Emu::DelegatingReportHandlerAdapter::onDeviceReset()", "MT32Emu::DelegatingReportHandlerAdapter::onNewReverbMode(unsigned char)", "MT32Emu::DelegatingReportHandlerAdapter::onNewReverbTime(unsigned char)", "MT32Emu::DelegatingReportHandlerAdapter::onNewReverbLevel(unsigned char)", "MT32Emu::DelegatingReportHandlerAdapter::onPolyStateChanged(unsigned char)", "MT32Emu::DelegatingReportHandlerAdapter::onDeviceReconfig()", "MT32Emu::DelegatingReportHandlerAdapter::onLCDStateUpdated()", "MT32Emu::DelegatingReportHandlerAdapter::onMidiMessageLEDStateUpdated(bool)", "MT32Emu::RendererImpl<float>::doRenderStreams(MT32Emu::DACOutputStreams<float> const&, unsigned int)", "MT32Emu::DelegatingReportHandlerAdapter::onMIDIQueueOverflow()", "SRCTools::ResamplerModel::InternalResamplerCascadeStage::~InternalResamplerCascadeStage()", "SRCTools::ResamplerModel::InternalResamplerCascadeStage::~InternalResamplerCascadeStage().1", "SRCTools::ResamplerModel::CascadeStage::getOutputSamples(float*, unsigned int)", "MT32Emu::SampleRateConverter::~SampleRateConverter()", "png_error", "png_malloc", "png_calloc", "png_destroy_png_struct", "png_realloc_array", "png_malloc_warn", "png_malloc_base", "png_handle_unknown", "png_read_data", "png_write_data", "png_read_row", "SDL_QuitSubSystem", "SDL_OpenedAudioDeviceDisconnected", "add_audio_device", "SDL_PromptAssertion", "SDL_AudioQuit", "close_audio_device", "SDL_PauseAudio", "SDL_InitSubSystem SDL_CaptureAudio", "SDL_RunAudio", "SDL_Convert_Byteswap", "open_audio_device", "SDL_ConvertStereoToMono", "SDL_ConvertMonoToStereo", "SDL_FreeAudioStream", "SDL_CleanupAudioStreamResampler", "SDL_ConvertMonoTo21", "SDL_AudioStreamClear", "SDL_ConvertMonoToQuad", "SDL_ConvertMonoTo51", "SDL_ConvertMonoTo61", "SDL_ConvertMonoTo41", "SDL_ConvertStereoTo21", "SDL_ConvertMonoTo71", "SDL_ConvertStereoToQuad  SDL_ConvertStereoTo41", "SDL_ConvertStereoTo61", "SDL_Convert21ToMono", "SDL_Convert21ToQuad", "SDL_ConvertStereoTo71", "SDL_Convert21To51", "SDL_Convert21ToStereo", "SDL_Convert21To61", "SDL_ConvertQuadTo21", "SDL_ConvertQuadToMono", "SDL_ConvertQuadTo61", "SDL_ConvertQuadTo71", "SDL_ConvertQuadToStereo", "SDL_Convert41ToMono", "SDL_Convert41ToStereo", "SDL_Convert41To61", "SDL_Convert41To71", "SDL_Convert51ToMono", "SDL_Convert51ToStereo", "SDL_Convert51ToQuad", "SDL_Convert51To41", "SDL_ConvertQuadTo41", "SDL_Convert61ToMono", "SDL_Convert51To71", "SDL_Convert61To21", "SDL_Convert61ToQuad", "SDL_Convert61To51", "SDL_Convert61To71", "SDL_Convert71ToMono", "SDL_Convert61To41", "SDL_Convert71To21", "SDL_Convert71ToQuad", "SDL_Convert71To41", "SDL_Convert71ToStereo", "SDL_Convert71To51", "SDL_Convert71To61", "SDL_Convert_U8_to_F32_Scalar", "SDL_Convert_S8_to_F32_Scalar", "SDL_Convert_S16_to_F32_Scalar", "SDL_ResampleCVT", "SDL_Convert_S32_to_F32_Scalar", "SDL_Convert_U16_to_F32_Scalar", "SDL_Convert_F32_to_S8_Scalar", "SDL_Convert_F32_to_S16_Scalar", "SDL_GetClipboardText", "SDL_Convert_F32_to_U16_Scalar", "SDL_NewDataQueue", "SDL_FreeDataQueue", "DISKAUDIO_CloseDevice", "SDL_WriteToDataQueue", "DISKAUDIO_PlayDevice", "DISKAUDIO_CaptureFromDevice", "DISKAUDIO_OpenDevice", "HandleAudioProcess", "HandleCaptureProcess", "SDL_Convert_F32_to_S32_ScalarSDL_SetError SDL_PumpEventsInternal", "SDL_FilterEvents", "", "SDL_PeepEventsInternal SDL_FillRects", "SDL_GameControllerAddMappingsFromRW", "SDL_PrivateGameControllerAddMapping", "SDL_LoadVIDPIDListFromHint", "SDL_PrivateAddMappingForGUID", "SDL_GameControllerEventWatcher", "SDL_PrivateGetControllerMapping", "SDL_EventState", "SDL_GameControllerClose", "SDL_SetHint", "SDL_DelHintCallback", "SDL_AddHintCallback", "SDL_JoystickClose", "SDL_JoystickGetDeviceIndexFromInstanceID", "SDL_JoystickUpdate", "UpdateEventsForDeviceRemoval.1", "SDL_JoystickOpen", "SDL_LogMessageV", "SDL_SetKeyboardFocus", "SDL_calloc", "SDL_realloc", "SDL_SetDefaultCursor", "SDL_SetMouseFocus", "SDL_UpdateMouseCapture", "SDL_MouseQuit", "SDL_UpdateMouseFocus", "SDL_ShowCursor", "SDL_SetRelativeMouseMode", "SDL_ListRemove", "SDL_WarpMouseInWindow", "SDL_SIMDAlloc", "SDL_UnRLESurface", "SDL_PrivateSendMouseMotion", "SDL_RLESurface", "SDL_SoftBlit", "SDL_FreeFormat", "SDL_AllocFormat", "SDL_SetPixelFormatPalette", "SDL_InvalidateMap", "SDL_GetRendererOutputSize", "FlushRenderCommandsIfNotBatching", "SDL_CreateRenderer", "QueueCmdSetViewport", "SDL_SetRenderTarget", "SDL_DestroyTexture", "SDL_MapSurface", "SDL_CreateTexture", "SDL_LockTexture", "FlushRenderCommandsIfTextureNeeded", "SDL_UnlockTexture", "PrepQueueCmdDraw", "SDL_DestroyRenderer", "GLES2_SetRenderTarget GLES2_SetTextureScaleMode", "SDL_UpdateTexture", "GLES2_UpdateTextureYUV", "GLES2_UpdateTextureNV", "GLES2_UpdateTexture", "GLES2_CreateRenderer", "GLES2_WindowEvent", "GLES2_UnbindTexture", "GLES2_BindTexture", "GLES2_DestroyTexture", "GLES2_DestroyRenderer", "GLES2_RenderReadPixels", "GLES2_RunCommandQueue", "GLES2_TexSubImage2D", "GLES2_CreateTexture", "GLES2_CacheShader", "SetDrawState", "SW_DestroyRenderer", "SW_RenderPresent", "SW_CreateRenderer", "stdio_close", "SDL_RWFromFile", "stdio_size", "SDL_SensorClose", "SDL_SensorUpdate", "SDL_strdup", "SDL_CreateRGBSurfaceWithFormat", "SDL_FreeSurface", "SDL_UpperBlit", "SDL_PrivateUpperBlitScaled", "SDL_ConvertSurface", "EMSCRIPTEN_JoystickQuit", "Emscripten_JoyStickDisconnected", "SDL_ConvertPixels", "Emscripten_JoyStickConnected", "SDL_Emscripten_TimerHelper", "SDL_TLSSet", "SDL_GetTouch", "SDL_AddTouch", "SDL_SendTouch", "SDL_TouchQuit", "SDL_EGL_GetProcAddress", "SDL_EGL_UnloadLibrary", "SDL_EGL_HasExtension", "SDL_EGL_MakeCurrent", "SDL_EGL_DeleteContext", "SDL_EGL_SetSwapInterval", "SDL_EGL_PrivateChooseConfig", "Emscripten_GLES_SwapWindow", "Emscripten_GLES_LoadLibrary", "Emscripten_CreateCursor", "Emscripten_GLES_CreateContext", "Emscripten_HandleWheel", "Emscripten_CreateSystemCursor", "Emscripten_DeleteDevice", "Emscripten_DestroyWindow", "Emscripten_CreateWindow", "SDL_DestroyWindow", "SDL_GetDisplayBounds", "SDL_VideoQuit", "SDL_SetDisplayModeForDisplay", "SDL_GetWindowDisplayIndex", "SDL_GetClosestDisplayModeForDisplay", "SDL_SetWindowTitle", "SDL_CreateWindow", "Emscripten_VideoInit", "SDL_FinishWindowCreation", "SDL_GL_MakeCurrent", "SDL_UpdateFullscreenMode", "SDL_MinimizeWindow", "SDL_UpdateWindowGrab", "SW_RunCommandQueue", "SDL_SetWindowData", "SDL_GetWindowSurface", "SDL_SetWindowMouseRect", "SDL_EnableScreenSaver", "SDL_RecreateWindow", "SDL_GL_GetProcAddress", "SDL_GL_CreateContext", "SDL_GL_SetSwapInterval", "SDL_GL_GetDrawableSize", "SDL_GL_GetSwapInterval  SDL_GL_DeleteContext", "SDL_SendWindowEvent", "SDL_GL_SwapWindow", "SDL_ConvertPixels_PackUVPlanes_to_NV", "SDL_ConvertPixels_SplitNV_to_UVPlanes", "SDL_ConvertPixels_SwapUVPlanes", "FT_Get_Advance", "af_glyph_hints_done", "af_latin_metrics_init", "SDL_ConvertPixels_YUV_to_RGB", "af_cjk_metrics_init_widths", "af_indic_metrics_init", "af_cjk_metrics_init", "af_face_globals_free", "af_autofitter_load_glyph", "af_face_globals_new", "FT_GlyphLoader_CheckPoints", "cff_get_interface", "cff_index_get_pointers", "cff_index_init", "cff_index_get_sid_string", "cff_face_done", "cff_slot_init", "cff_size_init", "cff_size_done", "cff_get_kerning", "cff_size_request", "cff_get_advances", "cff_size_select", "cff_cmap_unicode_init", "cff_face_init", "cff_cmap_unicode_done", "cff_cmap_unicode_char_index", "cff_cmap_unicode_char_next", "cff_get_ps_name", "cff_sid_to_glyph_name", "cff_ps_get_font_info", "cff_get_glyph_name", "cff_get_cmap_info", "cff_get_name_index", "cff_get_ros", "cff_glyph_load", "cf2_glyphpath_lineTo", "cf2_glyphpath_curveTo", "cf2_freeSeacComponent cf2_getSeacComponent", "cff_parser_run", "cf2_glyphpath_pushPrevElem", "cf2_interpT2CharString", "_bdf_parse_start", "BDF_Face_Done", "bdf_free_font", "BDF_Face_Init", "hash_insert", "ft_glyphslot_set_bitmap", "FT_Stream_Free", "_bdf_add_property", "FT_Stream_New", "FT_New_GlyphSlot", "ft_glyphslot_done", "FT_Render_Glyph", "FT_Load_Glyph", "FT_New_Size", "FT_Done_Face", "open_face", "destroy_face", "FT_Open_Face", "_bdf_parse_glyphs  memory_stream_close", "FT_Done_Size", "FT_Select_Size", "IsMacResource", "FT_Request_Size", "FT_Set_Charmap", "FT_Get_Next_Char", "FT_CMap_New", "ft_module_get_service", "FT_Add_Module", "FT_Raccess_Get_DataOffsets", "FT_Outline_Decompose", "raccess_guess_darwin_ufs_export", "FT_Stream_ReadAt", "FT_Stream_TryRead", "raccess_guess_linux_double", "destroy_size FT_Stream_Seek", "FT_Stream_ReleaseFrame", "raccess_guess_linux_netatalk", "FT_Stream_ExitFrame", "FT_Stream_ReadChar", "FT_Stream_ReadUShort", "FT_Stream_ReadULongLE", "FT_Stream_ReadUShortLE", "ft_mem_qalloc ft_mem_alloc", "ft_mem_realloc", "ft_mem_qrealloc ft_mem_strdup", "FT_Stream_Skip", "ft_gzip_free", "FT_List_Finalize", "FT_Stream_ReadULong", "inflateInit2_ft_gzip_stream_close inflateEnd", "FT_Stream_ReadFields", "ft_gzip_file_io", "inflate_flush", "PCF_Face_Init", "PCF_Face_Done", "pcf_load_font", "pfr_face_done", "pfr_slot_done", "inflate", "pfr_face_init", "ps_table_new", "pfr_extra_item_load_kerning_pairs", "ps_table_done", "ps_table_release", "ps_table_add", "ps_parser_load_field", "afm_parser_done", "afm_parser_read_vals", "t1_cmap_std_char_index", "t1_cmap_std_char_next", "afm_parser_parse t1_cmap_unicode_init", "t1_cmap_unicode_char_index", "t1_cmap_unicode_char_next", "t1_decoder_parse_charstrings", "ps_hints_apply", "psh_globals_destroy", "ps_dimension_done", "ps_unicodes_init", "ft_black_done", "ft_raster1_init", "ft_raster1_set_mode", "ft_raster1_render", "ft_lzw_stream_close", "Bezier_Up", "tt_cmap14_done", "tt_cmap14_char_var_index", "tt_face_get_name", "tt_face_load_head", "sfnt_init_face", "sfnt_done_face", "tt_face_load_hhea", "tt_face_load_cmap", "tt_face_load_maxp", "tt_face_load_os2", "sfnt_load_face", "tt_face_load_post", "tt_face_free_name", "tt_face_load_name", "tt_face_load_gasp", "tt_face_load_pclt", "tt_face_load_bhed", "tt_face_load_kern", "tt_face_get_ps_name", "tt_face_load_sbit_image", "tt_sbit_decoder_load_image", "Render_Single_Pass", "tt_face_free_ps_names", "load_post_names", "tt_face_load_hmtx", "tt_face_load_sbit", "tt_face_load_strike_metrics", "tt_get_cmap_info", "sfnt_get_ps_name", "gray_hline", "ft_smooth_render_generic", "gray_raster_render", "tt_get_interface", "tt_face_load_cvt", "tt_face_done", "tt_size_done_bytecode", "tt_face_init", "tt_glyphzone_done", "tt_size_run_prep", "tt_size_request", "tt_size_select", "tt_get_advances", "Ins_DELTAP", "Compute_Point_Displacement", "TT_Set_MM_Blend", "tt_face_vary_cvt", "TT_Get_MM_Var", "tt_glyph_load", "ft_var_readpackeddeltas", "TT_Set_Var_Design", "tt_get_metrics", "load_truetype_glyph", "TT_Vary_Apply_Glyph_Deltas", "TT_Hint_Glyph", "T1_Parse_Glyph", "T1_Done_Blend", "T1_Parse_Glyph_And_Get_Char_String", "T1_Size_Done", "T1_Size_Init", "T1_GlyphSlot_Init", "T1_Face_Done", "T1_Face_Init", "T1_Load_Glyph", "parse_dict", "T1_Read_Metrics", "T1_Get_Advances", "T1_Size_Request", "t1_parse_font_matrix", "TT_RunIns", "parse_encoding", "parse_subrs", "parse_blend_design_positions", "parse_charstrings", "parse_blend_design_map", "parse_buildchar", "parse_blend_axis_types", "parse_weight_vector", "cid_face_done", "cid_size_donecid_size_init cid_slot_init", "cid_slot_load_glyph", "cid_load_glyph", "cid_parse_font_matrix", "parse_expansion_factor", "parse_fd_array", "cid_size_request", "cid_face_init", "T42_GlyphSlot_Done", "T42_Face_Done", "T42_GlyphSlot_Load", "T42_Face_Init", "t42_parse_charstrings", "t42_parse_encoding", "FNT_Face_Done", "t42_parse_sfnts", "jpeg_abort", "finish_input_pass", "FNT_Face_Init", "reset_input_controller", "start_input_pass", "jpeg_resync_to_restart", "consume_markers", "next_marker", "skip_variable", "read_restart_marker", "get_interesting_appn", "get_sof", "build_ycc_rgb_table", "decode_mcu_AC_refine", "decode_mcu_DC_first", "start_pass.1", "process_restart", "decode_mcu", "read_markers", "arith_decode", "decode_mcu_DC_refine.1", "start_pass_huff_decoder", "decode_mcu_AC_first.1", "decode_mcu_DC_first.1", "jpeg_make_d_derived_tbl", "decode_mcu.1", "decode_mcu_sub", "decode_mcu_AC_refine.1", "jpeg_fill_bit_buffer", "jpeg_huff_decode", "start_output_pass", "decompress_data", "consume_data", "decompress_onepass", "decompress_smooth_data", "start_pass_main", "process_data_simple_main", "process_data_crank_post", "process_data_context_main", "prepare_for_output_pass", "merged_2v_upsample", "merged_1v_upsample", "start_pass_dpost", "post_process_1pass", "post_process_prepass", "post_process_2pass", "sep_upsample", "output_message", "emit_message", "error_exit", "finish_output_pass", "free_pool", "request_virt_barray", "access_virt_barray", "realize_virt_arrays", "request_virt_sarray", "access_virt_sarray", "alloc_barray", "alloc_large", "alloc_sarray", "new_color_map_1_quant", "alloc_small", "create_colorindex", "start_pass_1_quant", "init_error_limit", "start_pass_2_quant", "finish_pass1", "deflateInit2_", "deflateEnd", "inflateInit2_.1", "inflateReset2", "inflateEnd.1", "deflate", "inflate.1", "fclose", "__fwritex", "__toread", "__fseeko_unlocked", "__ftello_unlocked", "fread", "wrapper_cmp", "__shgetc", "__vfprintf_internal", "pop_arg", "printf_core", "operator new(unsigned long)", "__cxxabiv1::__class_type_info::can_catch(__cxxabiv1::__shim_type_info const*, void*&) const", "__dynamic_cast", "__cxxabiv1::__si_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const", "__cxxabiv1::__base_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const", "__cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int, bool) const", "__cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, void const*, void const*, int, bool) const", "dynCall_ii", "dynCall_vii", "dynCall_viii", "dynCall_vi", "dynCall_viiii", "dynCall_viiiiiiiii", "dynCall_iiiii", "dynCall_v", "dynCall_viiiiiii", "dynCall_fi", "dynCall_viiiiii", "dynCall_iiiiiiii", "dynCall_iiiiiii", "dynCall_iiiiii", "dynCall_viffff", "dynCall_viiiiiiii", "dynCall_viiiiiiiiiiii", "dynCall_viiiiiiiiii", "dynCall_viiiiiiiiiii", "dynCall_iii", "dynCall_fif", "dynCall_vif", "dynCall_vifi", "dynCall_iiiiiiiiii", "dynCall_iiiiiiiiiiiiiiff", "dynCall_iiiiiiiii", "dynCall_iiiiiidiiff dynCall_i", "dynCall_vffff", "dynCall_vf", "dynCall_vff", "dynCall_viiiii", "dynCall_vifff", "dynCall_iidiiii", "legalstub$dynCall_ji", "dynCall_iiiilegalstub$dynCall_iiji", "legalstub$dynCall_jiji", "byn-split-outlined-A$FT_Remove_Module", "__cxxabiv1::__base_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int, bool) const", "png_create_png_struct", "SDL_Delay", "Emscripten_UpdateWindowFramebuffer", "DefaultSaveFileManager::~DefaultSaveFileManager()", "DefaultSaveFileManager::~DefaultSaveFileManager().1", "Scumm::ScummDiskImage::open(Common::Path const&)", "OSystem_SDL::~OSystem_SDL().1", "non-virtual thunk to OSystem_SDL::~OSystem_SDL()", "virtual thunk to OSystem_SDL::~OSystem_SDL()", "OSystem_SDL::~OSystem_SDL().2", "non-virtual thunk to OSystem_SDL::~OSystem_SDL().1", "virtual thunk to OSystem_SDL::~OSystem_SDL().1", "OSystem_POSIX::~OSystem_POSIX()", "OSystem_POSIX::~OSystem_POSIX().1", "non-virtual thunk to OSystem_POSIX::~OSystem_POSIX()", "non-virtual thunk to OSystem_POSIX::~OSystem_POSIX().1", "virtual thunk to OSystem_POSIX::~OSystem_POSIX()", "virtual thunk to OSystem_POSIX::~OSystem_POSIX().1", "OSystem_Emscripten::~OSystem_Emscripten()", "OSystem_Emscripten::~OSystem_Emscripten().1", "non-virtual thunk to OSystem_Emscripten::~OSystem_Emscripten()", "non-virtual thunk to OSystem_Emscripten::~OSystem_Emscripten().1", "virtual thunk to OSystem_Emscripten::~OSystem_Emscripten()", "virtual thunk to OSystem_Emscripten::~OSystem_Emscripten().1", "OSystem_POSIX::init()", "virtual thunk to OSystem_POSIX::init()", "OSystem_POSIX::hasFeature(OSystem::Feature)", "non-virtual thunk to OSystem_POSIX::hasFeature(OSystem::Feature)", "virtual thunk to OSystem_POSIX::hasFeature(OSystem::Feature)", "virtual thunk to OSystem_SDL::initBackend()", "OSystem_POSIX::initBackend()", "virtual thunk to OSystem_POSIX::initBackend()", "virtual thunk to OSystem_SDL::addSysArchivesToSearchSet(Common::SearchSet&, int)", "non-virtual thunk to OSystem_SDL::setGraphicsMode(int, unsigned int)", "virtual thunk to OSystem_SDL::setGraphicsMode(int, unsigned int)", "SdlGraphicsManager::createOrUpdateWindow(int, int, unsigned int)", "virtual thunk to OSystem_POSIX::addSysArchivesToSearchSet(Common::SearchSet&, int)", "GUI::SaveLoadChooserSimple::close()", "GUI::SaveLoadChooserDialog::~SaveLoadChooserDialog().1", "GUI::SaveLoadChooserSimple::~SaveLoadChooserSimple()", "PluginManager::~PluginManager().1", "Base::findGameMatchingName(Common::String const&)", "GUI::generateEntries(Common::HashMap<Common::String, Common::ConfigManager::Domain, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::HashMap<Common::String, Common::String, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&)", "SurfaceSdlGraphicsManager::getDefaultScaler() const", "MohawkMetaEngineDetection::toDetectedGame(ADDetectedGame const&, ADDetectedGameExtraInfo*) const", "AdvancedMetaEngineDetection::detectGameFilebased(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, ADFileBasedFallback const*) const", "MainMenuDialog::~MainMenuDialog().1", "GUI::Debugger::preEnter()", "Common::Array<SaveStateDescriptor>::push_back(SaveStateDescriptor const&)", "void Common::sort<SaveStateDescriptor*, SaveStateDescriptorSlotComparator>(SaveStateDescriptor*, SaveStateDescriptor*, SaveStateDescriptorSlotComparator)", "SaveStateDescriptor::SaveStateDescriptor(MetaEngine const*, int, Common::String const&)", "GUI::ConsoleDialog::reflowLayout()", "GUI::ConsoleDialog::print(char const*)", "GUI::ConsoleDialog::historyScroll(int)", "GUI::Debugger::debugPrintf(char const*, ...)", "GUI::ConsoleDialog::~ConsoleDialog().1", "GUI::ConsoleDialog::drawDialog(GUI::DrawLayer)", "GUI::Debugger::debuggerInputCallback(GUI::ConsoleDialog*, char const*, void*)", "GUI::Debugger::cmdExecFile(int, char const**)", "GUI::Debugger::~Debugger().1", "MT32Emu::ScummVMReportHandler::onErrorControlROM()", "MT32Emu::ScummVMReportHandler::onErrorPCMROM()", "AdvancedMetaEngineDetection::cleanupPirated(Common::Array<ADDetectedGame>&) const", "GUI::BrowserDialog::runModal()", "GUI::displayErrorDialog(Common::U32String const&)", "GUI::SaveLoadChooserDialog::open()", "GUI::SaveLoadChooserSimple::open()", "GUI::SavenameDialog::open()", "GUI::ThemeBrowser::open()", "GUI::AboutDialog::close()", "GUI::SaveLoadChooserGrid::close()", "GUI::UnknownGameDialog::reflowLayout()", "GUI::Tooltip::drawDialog(GUI::DrawLayer)", "GUI::LauncherDialog::handleKeyDown(Common::KeyState)", "GUI::SaveLoadChooserDialog::handleTickle()", "GUI::TabWidget::drawWidget()", "Common::RemapWidget::refreshKeymap()", "GUI::AboutDialog::addLine(Common::U32String const&)", "Common::Singleton<GUI::GuiManager>::instance()", "GUI::ConsoleDialog::scrollToCurrent()", "GUI::ConsoleDialog::handleCommand(GUI::CommandSender*, unsigned int, unsigned int)", "GUI::Dialog::Dialog(int, int, int, int)", "GUI::Dialog::Dialog(Common::String const&)", "GUI::LauncherDialog::createSwitchButton(Common::String const&, Common::U32String const&, Common::U32String const&, char const*, unsigned int)", "GUI::GuiObject::resize(int, int, int, int, bool)", "GUI::GuiObject::reflowLayout()", "GUI::OptionsDialog::setSubtitleSettingsState(bool)", "GUI::SaveLoadChooserGrid::handleMouseWheel(int, int, int)", "GUI::Widget::setEnabled(bool)", "GUI::StaticTextWidget::drawWidget()", "GUI::PicButtonWidget::setGfxFromTheme(char const*, int, bool)", "GUI::DropdownButtonWidget::DropdownButtonWidget(GUI::GuiObject*, Common::String const&, Common::U32String const&, Common::U32String const&, unsigned int, unsigned char, Common::U32String const&)", "GUI::DropdownButtonWidget::reflowLayout()", "GUI::PicButtonWidget::drawWidget()", "GUI::CheckboxWidget::CheckboxWidget(GUI::GuiObject*, int, int, int, int, Common::U32String const&, Common::U32String const&, unsigned int, unsigned char)", "GUI::CheckboxWidget::CheckboxWidget(GUI::GuiObject*, Common::String const&, Common::U32String const&, Common::U32String const&, unsigned int, unsigned char)", "GUI::RadiobuttonWidget::RadiobuttonWidget(GUI::GuiObject*, Common::String const&, GUI::RadiobuttonGroup*, int, Common::U32String const&, Common::U32String const&, unsigned char)", "GUI::SliderWidget::drawWidget()", "GUI::GraphicsWidget::setGfxFromTheme(char const*)", "GUI::GraphicsWidget::drawWidget()", "GUI::ContainerWidget::drawWidget()", "GUI::EditableWidget::EditableWidget(GUI::GuiObject*, Common::String const&, Common::U32String const&, unsigned int)", "GUI::EditableWidget::getCaretOffset() const", "GUI::EditTextWidget::reflowLayout()", "GUI::GridItemWidget::drawWidget()", "GUI::GridWidget::calcEntrySizes()", "GUI::GridWidget::scrollBarRecalc()", "GUI::ListWidget::findItem(int, int) const", "GUI::ListWidget::handleMouseMoved(int, int, int)", "GUI::ListWidget::drawFormattedText(Common::Rect const&, Common::U32String const&, GUI::ThemeEngine::State, Graphics::TextAlign, GUI::ThemeEngine::TextInversionState, int, bool, GUI::ThemeEngine::FontColor)", "GUI::ListWidget::getCaretOffset() const", "GUI::PopUpWidget::reflowLayout()", "GUI::PopUpWidget::drawWidget()", "GUI::ScrollBarWidget::drawWidget()", "GUI::TabWidget::recalc()", "GUI::TabWidget::TabWidget(GUI::GuiObject*, Common::String const&)", "GUI::TabWidget::addTab(Common::U32String const&, Common::String const&, bool)", "non-virtual thunk to GUI::GuiManager::~GuiManager()", "GUI::GuiManager::~GuiManager().1", "non-virtual thunk to GUI::GuiManager::~GuiManager().1", "GUI::BrowserDialog::~BrowserDialog().1", "GUI::LauncherSimple::~LauncherSimple()", "GUI::MessageDialog::MessageDialog(Common::U32String const&, Common::U32String const&, Common::U32String const&, Graphics::TextAlign, char const*, Common::U32String const&)", "GUI::MessageDialog::MessageDialog(Common::String const&, Common::String const&, Common::String const&, Graphics::TextAlign, char const*)", "GUI::MessageDialog::MessageDialog(Common::U32String const&, Common::U32String const&, Common::Array<Common::U32String> const&, Graphics::TextAlign)", "GUI::AboutDialog::~AboutDialog()", "GUI::AboutDialog::~AboutDialog().1", "GUI::Dialog::~Dialog()", "GUI::CountdownMessageDialog::~CountdownMessageDialog()", "GUI::CountdownMessageDialog::~CountdownMessageDialog().1", "GUI::ThemeBrowser::~ThemeBrowser()", "GUI::ThemeBrowser::~ThemeBrowser().1", "GUI::Tooltip::~Tooltip()", "GUI::Tooltip::~Tooltip().1", "GUI::UnknownGameDialog::~UnknownGameDialog()", "GUI::UnknownGameDialog::~UnknownGameDialog().1", "GUI::GridItemTray::~GridItemTray()", "non-virtual thunk to GUI::GridItemTray::~GridItemTray()", "non-virtual thunk to GUI::GridItemTray::~GridItemTray().1", "GUI::PopUpDialog::~PopUpDialog()", "GUI::PopUpDialog::~PopUpDialog().1", "GUI::OptionsDialog::OptionsDialog(Common::String const&, Common::String const&)", "GUI::ConfigDialog::~ConfigDialog()", "GUI::ConfigDialog::~ConfigDialog().1", "GUI::EditGameDialog::~EditGameDialog()", "GUI::EditGameDialog::setupGraphicsTab()", "non-virtual thunk to GUI::GlobalOptionsDialog::~GlobalOptionsDialog()", "GUI::GlobalOptionsDialog::~GlobalOptionsDialog().1", "non-virtual thunk to GUI::GlobalOptionsDialog::~GlobalOptionsDialog().1", "Common::Array<GUI::ExistingSave>::push_back(GUI::ExistingSave const&)", "GUI::SaveLoadChooser::runModalWithCurrentTarget()", "GUI::SaveLoadChooserGrid::~SaveLoadChooserGrid().1", "GUI::ThemeEngine::drawCaret(Common::Rect const&, bool)", "GUI::ThemeParser::parserCallback_language(Common::XMLParser::ParserNode*)", "GUI::ThemeEngine::drawButton(Common::Rect const&, Common::U32String const&, GUI::ThemeEngine::State, unsigned short)", "GUI::ThemeEngine::drawWidgetBackground(Common::Rect const&, GUI::ThemeEngine::WidgetBackground)", "GUI::ThemeEngine::drawDialogBackground(Common::Rect const&, GUI::ThemeEngine::DialogBackground)", "GUI::ThemeEngine::drawText(Common::Rect const&, Common::U32String const&, GUI::ThemeEngine::State, Graphics::TextAlign, GUI::ThemeEngine::TextInversionState, int, bool, GUI::ThemeEngine::FontStyle, GUI::ThemeEngine::FontColor, bool, Common::Rect const&)", "GUI::ThemeEngine::unloadTheme()", "GUI::ThemeEval::getWidgetData(Common::String const&, short&, short&, short&, short&)", "GUI::PopUpWidget::PopUpWidget(GUI::GuiObject*, Common::String const&, Common::U32String const&, unsigned int)", "GUI::ScrollContainerWidget::ScrollContainerWidget(GUI::GuiObject*, Common::String const&, Common::String const&, unsigned int)", "GUI::EditableWidget::~EditableWidget()", "GUI::PopUpWidget::~PopUpWidget()", "GUI::PopUpWidget::~PopUpWidget().1", "non-virtual thunk to GUI::PopUpWidget::~PopUpWidget()", "non-virtual thunk to GUI::PopUpWidget::~PopUpWidget().1", "GUI::ScrollBarWidget::~ScrollBarWidget()", "GUI::ScrollBarWidget::~ScrollBarWidget().1", "non-virtual thunk to GUI::ScrollBarWidget::~ScrollBarWidget()", "non-virtual thunk to GUI::ScrollBarWidget::~ScrollBarWidget().1", "GUI::ScrollContainerWidget::~ScrollContainerWidget()", "GUI::TabWidget::findWidget(int, int)", "GUI::TabWidget::handleMouseMoved(int, int, int)", "GUI::StaticTextWidget::handleMouseEntered(int)", "GUI::PopUpDialog::handleMouseMoved(int, int, int)", "GUI::ButtonWidget::ButtonWidget(GUI::GuiObject*, int, int, int, int, Common::U32String const&, Common::U32String const&, unsigned int, unsigned char, Common::U32String const&)", "GUI::ButtonWidget::ButtonWidget(GUI::GuiObject*, Common::String const&, Common::U32String const&, Common::U32String const&, unsigned int, unsigned char, Common::U32String const&)", "GUI::GlobalOptionsDialog::build()::$_0::operator()(GUI::StaticTextWidget*, Common::String const&, Common::U32String const&) const", "non-virtual thunk to GUI::PicButtonWidget::~PicButtonWidget()", "GUI::PicButtonWidget::~PicButtonWidget().1", "non-virtual thunk to GUI::PicButtonWidget::~PicButtonWidget().1", "GUI::GraphicsWidget::~GraphicsWidget().1", "GUI::ContainerWidget::~ContainerWidget().1", "GUI::GridWidget::~GridWidget()", "GUI::GridItemWidget::~GridItemWidget()", "GUI::GridItemWidget::~GridItemWidget().1", "non-virtual thunk to GUI::GridItemWidget::~GridItemWidget()", "non-virtual thunk to GUI::GridItemWidget::~GridItemWidget().1", "non-virtual thunk to GUI::DropdownButtonWidget::~DropdownButtonWidget().1", "GUI::EditTextWidget::setEditString(Common::U32String const&)", "GUI::EditableWidget::setCaretPos(int)", "GUI::GridWidget::setFilter(Common::U32String const&)", "GUI::LauncherGrid::selectTarget(Common::String const&)", "GUI::GroupedListWidget::groupByAttribute()", "GUI::LauncherSimple::selectTarget(Common::String const&)", "GUI::PopUpDialog::handleMouseWheel(int, int, int)", "GUI::PopUpDialog::moveUp()", "GUI::ListWidget::ListWidget(GUI::Dialog*, Common::String const&, Common::U32String const&, unsigned int)", "GUI::TabWidget::~TabWidget().1", "GUI::TabWidget::handleMouseDown(int, int, int, int)", "GUI::TabWidget::adjustTabs(int)", "BaseBackend::initBackend()", "OSystem_SDL::createAudioCDManager()", "DefaultAudioCDManager::~DefaultAudioCDManager().1", "non-virtual thunk to DefaultEventManager::~DefaultEventManager()", "DefaultEventManager::~DefaultEventManager().1", "non-virtual thunk to DefaultEventManager::~DefaultEventManager().1", "Common::CompositeHardwareInputSet::~CompositeHardwareInputSet().1", "Common::Keymap::resetMapping(Common::Action*)", "Common::Keymap::loadMappings()", "Common::Keymapper::~Keymapper()", "Common::RemapWidget::~RemapWidget().1", "Common::RemapWidget::load()", "OSystem_SDL::logMessage(LogMessageType::Type, char const*)", "virtual thunk to OSystem_SDL::logMessage(LogMessageType::Type, char const*)", "SdlEventSource::handleJoystickAdded(SDL_JoyDeviceEvent const&, Common::Event&)", "virtual thunk to SdlGraphicsManager::saveScreenshot()", "OSystem_SDL::getGlobalKeymaps()", "virtual thunk to OSystem_SDL::getGlobalKeymaps()", "SurfaceSdlGraphicsManager::~SurfaceSdlGraphicsManager().1", "virtual thunk to SurfaceSdlGraphicsManager::~SurfaceSdlGraphicsManager()", "SurfaceSdlGraphicsManager::~SurfaceSdlGraphicsManager().2", "virtual thunk to SurfaceSdlGraphicsManager::~SurfaceSdlGraphicsManager().1", "virtual thunk to SurfaceSdlGraphicsManager::setFeatureState(OSystem::Feature, bool)", "virtual thunk to SurfaceSdlGraphicsManager::endGFXTransaction()", "virtual thunk to SurfaceSdlGraphicsManager::setScaler(unsigned int, int)", "virtual thunk to SurfaceSdlGraphicsManager::initSize(unsigned int, unsigned int, Graphics::PixelFormat const*)", "virtual thunk to SurfaceSdlGraphicsManager::copyRectToScreen(void const*, int, int, int, int, int)", "virtual thunk to SurfaceSdlGraphicsManager::lockScreen()", "virtual thunk to SurfaceSdlGraphicsManager::setPalette(unsigned char const*, unsigned int, unsigned int)", "virtual thunk to SurfaceSdlGraphicsManager::setFocusRectangle(Common::Rect const&)", "virtual thunk to SurfaceSdlGraphicsManager::copyRectToOverlay(void const*, int, int, int, int, int)", "virtual thunk to SurfaceSdlGraphicsManager::setMouseCursor(void const*, unsigned int, unsigned int, int, int, unsigned int, bool, Graphics::PixelFormat const*)", "virtual thunk to SurfaceSdlGraphicsManager::displayMessageOnOSD(Common::U32String const&)", "SdlMixerManager::~SdlMixerManager().1", "DefaultTimerManager::~DefaultTimerManager().1", "SdlTimerManager::~SdlTimerManager().1", "OpenGL::LibRetroPipeline::activateInternal()", "OpenGL::ShaderPipeline::~ShaderPipeline()", "OpenGL::FakePipeline::~FakePipeline()", "OpenGL::GLTexture::GLTexture(unsigned int, unsigned int, unsigned int)", "OpenGL::Texture::recreate()", "OpenGL::Texture::~Texture()", "OpenGL::TextureRGB555::~TextureRGB555()", "OpenGL::FakeTexture::~FakeTexture().1", "OpenGL::Texture::allocate(unsigned int, unsigned int)", "OpenGL::ScaledTexture::allocate(unsigned int, unsigned int)", "OpenGL::TextureCLUT8GPU::allocate(unsigned int, unsigned int)", "OpenGL::OpenGLGraphicsManager::copyRectToScreen(void const*, int, int, int, int, int)", "OpenGL::OpenGLGraphicsManager::copyRectToOverlay(void const*, int, int, int, int, int)", "OpenGL::OpenGLGraphicsManager::fillScreen(unsigned int)", "OpenGL::OpenGLGraphicsManager::clearOverlay()", "OpenGL::ScaledTexture::~ScaledTexture().1", "OpenGL::TextureCLUT8GPU::~TextureCLUT8GPU().1", "OpenGL::Pipeline::activateInternal()", "OpenGL::Framebuffer::enableBlend(OpenGL::Framebuffer::BlendMode)", "OpenGL::TextureTarget::~TextureTarget().1", "OpenGL::LibRetroTextureTarget::~LibRetroTextureTarget()", "OpenGL::LibRetroPipeline::~LibRetroPipeline().1", "OpenGLSdlGraphicsManager::~OpenGLSdlGraphicsManager()", "virtual thunk to OpenGLSdlGraphicsManager::~OpenGLSdlGraphicsManager()", "non-virtual thunk to OpenGLSdlGraphicsManager::~OpenGLSdlGraphicsManager()", "OpenGLSdlGraphicsManager::~OpenGLSdlGraphicsManager().1", "virtual thunk to OpenGLSdlGraphicsManager::~OpenGLSdlGraphicsManager().1", "non-virtual thunk to OpenGLSdlGraphicsManager::~OpenGLSdlGraphicsManager().1", "OpenGLSdlGraphicsManager::setFeatureState(OSystem::Feature, bool)", "OpenGLSdlGraphicsManager::updateScreen()", "virtual thunk to OpenGL::OpenGLGraphicsManager::handleResizeImpl(int, int)", "OpenGLSdlGraphicsManager::handleResizeImpl(int, int)", "non-virtual thunk to OpenGLSdlGraphicsManager::handleResizeImpl(int, int)", "virtual thunk to OpenGLSdlGraphicsManager::handleResizeImpl(int, int)", "virtual thunk to OpenGL::OpenGLGraphicsManager::recalculateDisplayAreas()", "OpenGLSdlGraphicsManager::saveScreenshot(Common::String const&) const", "non-virtual thunk to OpenGLSdlGraphicsManager::saveScreenshot(Common::String const&) const", "non-virtual thunk to OpenGLSdlGraphicsManager::notifyResize(int, int)", "OpenGLSdlGraphicsManager::loadVideoMode(unsigned int, unsigned int, Graphics::PixelFormat const&)", "non-virtual thunk to OpenGLSdlGraphicsManager::notifyEvent(Common::Event const&)", "OpenGL::FrameBuffer::~FrameBuffer().1", "OpenGLSdlGraphics3dManager::~OpenGLSdlGraphics3dManager()", "virtual thunk to OpenGLSdlGraphics3dManager::~OpenGLSdlGraphics3dManager()", "OpenGLSdlGraphics3dManager::~OpenGLSdlGraphics3dManager().1", "virtual thunk to OpenGLSdlGraphics3dManager::~OpenGLSdlGraphics3dManager().1", "OpenGLSdlGraphics3dManager::setFeatureState(OSystem::Feature, bool)", "virtual thunk to OpenGLSdlGraphics3dManager::setFeatureState(OSystem::Feature, bool)", "OpenGLSdlGraphics3dManager::endGFXTransaction()", "virtual thunk to OpenGLSdlGraphics3dManager::endGFXTransaction()", "OpenGLSdlGraphics3dManager::initSize(unsigned int, unsigned int, Graphics::PixelFormat const*)", "virtual thunk to OpenGLSdlGraphics3dManager::initSize(unsigned int, unsigned int, Graphics::PixelFormat const*)", "virtual thunk to OpenGLSdlGraphics3dManager::handleResizeImpl(int, int)", "virtual thunk to OpenGLSdlGraphics3dManager::updateScreen()", "virtual thunk to OpenGLSdlGraphics3dManager::showOverlay(bool)", "POSIXFilesystemNode::makeNode(Common::String const&) const", "POSIXFilesystemFactory::makeRootFileNode() const", "POSIXFilesystemFactory::makeCurrentDirectoryFileNode() const", "POSIXFilesystemFactory::makeFileNodePath(Common::String const&) const", "Image::BitmapDecoder::~BitmapDecoder().1", "GUI::GuiManager::setupCursor()", "GUI::ThemeEngine::getStringWidth(Common::U32String const&, GUI::ThemeEngine::FontStyle) const", "Graphics::FontManager::~FontManager().1", "Graphics::TTFLibrary::~TTFLibrary().1", "Graphics::TTFFont::assureCached(unsigned int) const", "Graphics::ManagedSurface::ManagedSurface(int, int, Graphics::PixelFormat const&)", "Graphics::ManagedSurface::blitFrom(Graphics::ManagedSurface const&, Common::Rect const&, Common::Point const&)", "Graphics::ManagedSurface::transBlitFrom(Graphics::ManagedSurface const&, Common::Rect const&, Common::Point const&, unsigned int, bool, unsigned int, unsigned int)", "OpenGL::Shader::fromStrings(Common::String const&, char const*, char const*, char const* const*, int)", "OpenGL::ShaderPipeline::ShaderPipeline(OpenGL::Shader*)", "OpenGL::ShaderSurfaceRenderer::~ShaderSurfaceRenderer()", "OpenGL::ShaderManager::~ShaderManager()", "SurfaceSdlGraphicsManager::clearOverlay()", "AdLibPart::noteOff(unsigned char)", "AdLibPercussionChannel::noteOff(unsigned char)", "AdLibPart::noteOn(unsigned char, unsigned char)", "AdLibPercussionChannel::noteOn(unsigned char, unsigned char)", "AdLibPart::pitchBend(short)", "AdLibPart::pitchBendFactor(unsigned char)", "AdLibPart::detune(unsigned char)", "AdLibPart::transpose(signed char)", "MidiDriver_ADLIB::setPitchBendRange(unsigned char, unsigned int)", "Audio::QueuingAudioStreamImpl::~QueuingAudioStreamImpl().1", "non-virtual thunk to OPL::EmulatedOPL::~EmulatedOPL()", "MidiDriver_MPU401::MidiDriver_MPU401()", "MidiDriver_SEQ::~MidiDriver_SEQ()", "MidiDriver_ADLIB::~MidiDriver_ADLIB()", "MidiDriver_ADLIB::~MidiDriver_ADLIB().1", "MidiDriver_MPU401::~MidiDriver_MPU401()", "MidiDriver_SEQ::send(unsigned int)", "MidiDriver_TIMIDITY::send(unsigned int)", "MidiDriver_MT32::send(unsigned int)", "non-virtual thunk to MidiDriver_MT32::send(unsigned int)", "MidiDriver_SEQ::sysEx(unsigned char const*, unsigned short)", "MidiDriver_TIMIDITY::sysEx(unsigned char const*, unsigned short)", "MidiDriver_MT32::sysEx(unsigned char const*, unsigned short)", "Audio::MixerImpl::~MixerImpl().1", "Audio::MixerImpl::stopAll()", "Audio::MixerImpl::stopID(int)", "Audio::MixerImpl::stopHandle(Audio::SoundHandle)", "MidiDriver_SEQ::close()", "MidiDriver_TIMIDITY::close()", "SeqMusicPlugin::getDevices() const", "AdLibEmuMusicPlugin::getDevices() const", "NullMusicPlugin::getDevices() const", "AutoMusicPlugin::getDevices() const", "AmigaMusicPlugin::getDevices() const", "CMSMusicPlugin::getDevices() const", "TownsEmuMusicPlugin::getDevices() const", "PC98EmuMusicPlugin::getDevices() const", "SegaCDSoundPlugin::getDevices() const", "AppleIIGSMusicPlugin::getDevices() const", "MT32EmuMusicPlugin::getDevices() const", "PCSpeakerMusicPlugin::getDevices() const", "PCjrMusicPlugin::getDevices() const", "C64MusicPlugin::getDevices() const", "Audio::QuickTimeAudioDecoder::~QuickTimeAudioDecoder().1", "Audio::QuickTimeAudioDecoder::AudioSampleDesc::~AudioSampleDesc().1", "OPL::DOSBox::OPL::write(int, int)", "non-virtual thunk to OPL::DOSBox::OPL::~OPL()", "OPL::DOSBox::OPL::~OPL().1", "non-virtual thunk to OPL::DOSBox::OPL::~OPL().1", "non-virtual thunk to OPL::MAME::OPL::~OPL()", "OPL::MAME::OPL::~OPL().1", "non-virtual thunk to OPL::MAME::OPL::~OPL().1", "OPL::MAME::OPL::reset()", "OPL::MAME::OPL::writeReg(int, int)", "non-virtual thunk to MidiDriver_MT32::~MidiDriver_MT32()", "MidiDriver_MT32::~MidiDriver_MT32().1", "non-virtual thunk to MidiDriver_MT32::~MidiDriver_MT32().1", "non-virtual thunk to MidiDriver_MT32::close()", "non-virtual thunk to MidiDriver_MT32::open()", "non-virtual thunk to OPL::NUKED::OPL::~OPL()", "OPL::NUKED::OPL::~OPL().1", "non-virtual thunk to OPL::NUKED::OPL::~OPL().1", "Common::SearchManager::SearchManager()", "non-virtual thunk to Common::SearchManager::clear()", "Common::MemcachingCaseInsensitiveArchive::~MemcachingCaseInsensitiveArchive()", "Common::String::operator=(Common::String const&)", "Common::U32String::operator=(Common::U32String const&)", "Common::BaseString<char>::BaseString(Common::BaseString<char> const&)", "Common::BaseString<char32_t>::BaseString(Common::BaseString<char32_t> const&)", "Common::String::operator=(char const*)", "Common::U32String::operator=(Common::U32String&&)", "Common::BaseString<char>::makeUnique()", "Common::BaseString<char>::deleteChar(unsigned int)", "Common::BaseString<char>::erase(unsigned int, unsigned int)", "Common::BaseString<char>::clear()", "Common::BaseString<char>::insertChar(char, unsigned int)", "Common::BaseString<char>::ensureCapacity(unsigned int, bool)", "Common::BaseString<char>::toLowercase()", "Common::BaseString<char>::trim()", "Common::BaseString<char>::~BaseString()", "Common::BaseString<char>::assignAppend(char const*)", "Common::BaseString<char>::assignAppend(Common::BaseString<char> const&)", "Common::BaseString<char>::assignAppend(char)", "Common::BaseString<char>::assign(Common::BaseString<char>&&)", "Common::BaseString<char32_t>::ensureCapacity(unsigned int, bool)", "Common::BaseString<char32_t>::clear()", "Common::ConfigManager::setAndFlush(Common::String const&, Common::String const&)", "DefaultSaveFileManager::getSavePath() const", "Common::File::open(Common::SeekableReadStream*, Common::String const&)", "Common::Rational::debugPrint(int, char const*) const", "SdlEventSource::handleJoystickRemoved(SDL_JoyDeviceEvent const&, Common::Event&)", "Image::pngWarning(png_struct_def*, char const*)", "Image::Indeo4Decoder::decodeRLETransparency(short (*) [2])", "Image::Indeo4Decoder::decodeTransparency()", "MT32Emu::ScummVMReportHandler::printDebug(char const*, void*)", "Adl::readSector_NIB(unsigned char*, unsigned int, unsigned char const*, unsigned int, unsigned int&, unsigned char, unsigned char const*, unsigned int, unsigned int)", "Common::AchievementsManager::unsetActiveDomain()", "GUI::GuiManager::addToTrash(GUI::GuiObject*, GUI::Dialog*)", "MidiDriver_BASE::midiDumpVarLength(unsigned int const&)", "DefaultEventManager::purgeMouseEvents()", "DefaultEventManager::purgeKeyboardEvents()", "Common::VirtualMouse::~VirtualMouse()", "Common::InputWatcher::stopWatching()", "SdlGraphicsManager::deactivateManager()", "Scumm::ScummDiskImage::~ScummDiskImage()", "Scumm::ScummDiskImage::~ScummDiskImage().1", "Scumm::ScummNESFile::~ScummNESFile()", "Scumm::ScummNESFile::~ScummNESFile().1", "DefaultAudioCDManager::existExtractedCDAudioFiles(unsigned int)", "MT32EmuMusicPlugin::checkDevice(unsigned int) const", "Gob::DataIO::hasFile(Common::String const&)", "Common::FSDirectory::FSDirectory(Common::Path const&, int, bool, bool, bool)", "Common::FSDirectory::~FSDirectory().1", "Common::FSDirectory::lookupCache(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>&, Common::String const&) const", "Common::MacResManager::~MacResManager()", "Common::OSDMessageQueue::OSDMessageQueue()", "Audio::makeQueuingAudioStream(int, bool)", "Audio::MixerImpl::MixerImpl(unsigned int, bool, unsigned int)", "SurfaceSdlGraphicsManager::setStretchMode(int)", "virtual thunk to SurfaceSdlGraphicsManager::setStretchMode(int)", "SurfaceSdlGraphicsManager::setAspectRatioCorrection(bool)", "SurfaceSdlGraphicsManager::displayActivityIconOnOSD(Graphics::Surface const*)", "DefaultTimerManager::removeTimerProc(void (*)(void*))", "Audio::QueuingAudioStreamImpl::endOfStream() const", "Audio::QueuingAudioStreamImpl::finish()", "Audio::QueuingAudioStreamImpl::numQueuedStreams() const", "Audio::MixerImpl::setReady(bool)", "Audio::MixerImpl::isSoundIDActive(int)", "Audio::MixerImpl::getSoundID(Audio::SoundHandle)", "Audio::MixerImpl::isSoundHandleActive(Audio::SoundHandle)", "Audio::MixerImpl::hasActiveChannelOfType(Audio::Mixer::SoundType)", "Audio::MixerImpl::isReady() const", "MidiDriver_MT32::setPitchBendRange(unsigned char, unsigned int)", "non-virtual thunk to MidiDriver_MT32::setPitchBendRange(unsigned char, unsigned int)", "non-virtual thunk to Common::OSDMessageQueue::~OSDMessageQueue()", "Common::OSDMessageQueue::~OSDMessageQueue().1", "non-virtual thunk to Common::OSDMessageQueue::~OSDMessageQueue().1", "non-virtual thunk to Common::OSDMessageQueue::pollEvent(Common::Event&)", "Common::QuickTimeParser::readSMI(Common::QuickTimeParser::Atom)", "virtual thunk to Common::SeekableSubReadStream::seek(long long, int)", "OSystem_SDL::quit()", "virtual thunk to OSystem_SDL::quit()", "OSystem_SDL::fatalError()", "virtual thunk to OSystem_SDL::fatalError()", "Common::ConfigManager::addDomain(Common::String const&, Common::ConfigManager::Domain const&)", "Common::DebugManager::addDebugChannel(unsigned int, Common::String const&, Common::String const&)", "Common::punycode_encodefilename(Common::U32String const&)", "Common::strcpy_s(char*, unsigned long, char const*)", "Common::vsprintf_s(char*, unsigned long, char const*, void*)", "scumm_strdup(char const*)", "OSystem::isConnectionLimited()", "Common::UnicodeBiDiText::UnicodeBiDiText(Common::U32String const&, Common::BiDiParagraph)", "Common::U32String::vformat(char32_t const*, char32_t const*, Common::U32String&, void*)", "Common::INIFile::hasKey(Common::String const&, Common::String const&) const", "Common::INIFile::getKey(Common::String const&, Common::String const&, Common::String&) const", "Common::INIFile::setKey(Common::String const&, Common::String const&, Common::String const&)", "Common::Keymapper::addGlobalKeymap(Common::Keymap*)", "MidiDriver_SEQ::open()", "MidiDriver_TIMIDITY::open()", "MidiDriver_TIMIDITY::connect_to_server(char const*, char const*)", "MidiDriver_TIMIDITY::timidity_ctl_command(char const*, ...)", "MidiDriver_TIMIDITY::timidity_meta_seq(int, int, int)", "SdlGraphicsManager::initSizeHint(Common::Array<Graphics::Mode> const&)", "OpenGL::ShaderManager::query(OpenGL::ShaderManager::ShaderUsage) const", "OpenGL::LibRetro::PresetParser::lookUpValue(Common::String const&, unsigned int*)", "OpenGL::OpenGLGraphicsManager::setGraphicsMode(int, unsigned int)", "Image::Indeo3Decoder::decodeChunk(unsigned char*, unsigned char*, int, int, unsigned char const*, unsigned int, unsigned char const*, unsigned char const*, int)", "Image::Indeo4Decoder::decodePictureHeader()", "Image::Indeo4Decoder::decodeBandHeader(Image::Indeo::IVIBandDesc*)", "Image::Indeo4Decoder::decodeMbInfo(Image::Indeo::IVIBandDesc*, Image::Indeo::IVITile*)", "Image::Indeo5Decoder::decodePictureHeader()", "Image::Indeo5Decoder::decodeBandHeader(Image::Indeo::IVIBandDesc*)", "Image::Indeo5Decoder::decodeMbInfo(Image::Indeo::IVIBandDesc*, Image::Indeo::IVITile*)", "Image::Indeo::IVIHuffDesc::createHuffFromDesc(Image::Indeo::VLC*, bool) const", "Image::Indeo::IVIHuffTab::decodeHuffDesc(Image::Indeo::IVI45DecContext*, int, int)", "Image::Indeo::IVIPlaneDesc::initTiles(Image::Indeo::IVIPlaneDesc*, int, int)", "Image::Indeo::VLC::buildTable(int, int, Image::Indeo::VLCcode*, int)", "OpenGL::Shader::getAttribute(char const*)", "AdLibPart::sysEx_customInstrument(unsigned int, unsigned char const*, unsigned int)", "AdLibPercussionChannel::sysEx_customInstrument(unsigned int, unsigned char const*, unsigned int)", "OPL::Config::create(signed char, OPL::Config::OplType)", "OPL::MAME::OPL::read(int)", "OSystem_SDL::openUrl(Common::String const&)", "GUI::ThemeEngine::themeConfigParseHeader(Common::String, Common::String&)", "GUI::ThemeParser::parseDrawStep(Common::XMLParser::ParserNode*, Graphics::DrawStep*, bool)", "GUI::ThemeParser::resolutionCheck(Common::String const&)", "GUI::ThemeParser::parserCallback_def(Common::XMLParser::ParserNode*)", "GUI::ThemeParser::parserCallback_widget(Common::XMLParser::ParserNode*)", "Common::ConfigManager::removeKey(Common::String const&, Common::String const&)", "Common::ConfigManager::get(Common::String const&, Common::String const&) const", "Common::ConfigManager::getInt(Common::String const&, Common::String const&) const", "Common::ConfigManager::getBool(Common::String const&, Common::String const&) const", "Common::ConfigManager::set(Common::String const&, Common::String const&, Common::String const&)", "void Common::unknownKeyError<Common::String>(Common::String)", "Common::MemoryPool::freeUnusedPages()", "Common::Array<Common::QuickTimeParser::EditListEntry>::resize(unsigned int)", "Common::Array<Common::WinResourceID>::insert_aux(Common::WinResourceID*, Common::WinResourceID const*, Common::WinResourceID const*)", "Common::Array<Common::String>::reserve(unsigned int)", "Common::Keymap::addAction(Common::Action*)", "Common::Keymap::getActionDefaultMappings(Common::Action*)", "Common::Keymap::getActionMapping(Common::Action*) const", "DefaultSaveFileManager::updateSavefilesList(Common::Array<Common::String>&)", "WindowedGraphicsManager::convertWindowToVirtual(int, int) const", "WindowedGraphicsManager::convertVirtualToWindow(int, int) const", "SurfaceSdlGraphicsManager::grabOverlay(Graphics::Surface&) const", "OpenGL::LibRetro::PresetParser::parsePass(unsigned int, bool)", "Common::Array<OpenGL::LibRetroPipeline::Texture>::insert_aux(OpenGL::LibRetroPipeline::Texture*, OpenGL::LibRetroPipeline::Texture const*, OpenGL::LibRetroPipeline::Texture const*)", "OpenGL::LibRetroPipeline::Pass::Pass(OpenGL::LibRetroPipeline::Pass const&)", "Common::Array<OpenGL::LibRetroPipeline::Pass::TexCoordAttribute>::operator=(Common::Array<OpenGL::LibRetroPipeline::Pass::TexCoordAttribute> const&)", "OpenGL::TiledSurface::TiledSurface(unsigned int, unsigned int, Graphics::PixelFormat const&)", "Common::Array<OpenGLSdlGraphics3dManager::OpenGLPixelFormat>::insert_aux(OpenGLSdlGraphics3dManager::OpenGLPixelFormat*, OpenGLSdlGraphics3dManager::OpenGLPixelFormat const*, OpenGLSdlGraphics3dManager::OpenGLPixelFormat const*)", "Image::pngError(png_struct_def*, char const*)", "Image::BitmapRawDecoder::BitmapRawDecoder(int, int, int, bool, bool)", "Image::BitmapRawDecoder::getPixelFormat() const", "Image::Indeo::IVIPlaneDesc::initPlanes(Image::Indeo::IVIPlaneDesc*, Image::Indeo::IVIPicConfig const*, bool)", "Graphics::AmigaFont::getCharWidth(unsigned int) const", "Graphics::AmigaFont::getKerningOffset(unsigned int, unsigned int) const", "Graphics::AmigaFont::drawChar(Graphics::Surface*, unsigned int, int, int, unsigned int) const", "Common::Array<OpenGL::VertexAttrib>::insert_aux(OpenGL::VertexAttrib*, OpenGL::VertexAttrib const*, OpenGL::VertexAttrib const*)", "Graphics::Surface::vLine(int, int, int, unsigned int)", "Graphics::Surface::fillRect(Common::Rect, unsigned int)", "Graphics::Surface::convertToInPlace(Graphics::PixelFormat const&, unsigned char const*)", "Graphics::Surface::convertTo(Graphics::PixelFormat const&, unsigned char const*, int, unsigned char const*, int, Graphics::DitherMethod) const", "Graphics::VectorRenderer::stepGetPositions(Graphics::DrawStep const&, Common::Rect const&, unsigned short&, unsigned short&, unsigned short&, unsigned short&)", "Graphics::VectorRendererSpec<unsigned short>::precalcGradient(int)", "OPL::EmulatedOPL::EmulatedOPL()", "Common::Array<unsigned char>::insert_aux(unsigned char*, unsigned char const*, unsigned char const*)", "Common::Array<ADDetectedGame>::push_back(ADDetectedGame const&)", "Common::Array<Agi::WagProperty>::insert_aux(Agi::WagProperty*, Agi::WagProperty const*, Agi::WagProperty const*)", "Common::Array<DetectedGame>::insert_aux(DetectedGame*, DetectedGame const*, DetectedGame const*)", "Common::Array<PlainGameDescriptor>::insert_aux(PlainGameDescriptor*, PlainGameDescriptor const*, PlainGameDescriptor const*)", "Common::Array<Glk::ChunkEntry>::insert_aux(Glk::ChunkEntry*, Glk::ChunkEntry const*, Glk::ChunkEntry const*)", "Common::Array<Common::String>::insert_aux(Common::String*, Common::String const*, Common::String const*)", "Common::Array<Gob::DataIO::Archive*>::insert_aux(Gob::DataIO::Archive**, Gob::DataIO::Archive* const*, Gob::DataIO::Archive* const*)", "Common::Array<unsigned int>::insert_aux(unsigned int*, unsigned int const*, unsigned int const*)", "Common::Array<OSystem::GraphicsMode>::insert_aux(OSystem::GraphicsMode*, OSystem::GraphicsMode const*, OSystem::GraphicsMode const*)", "OSystem_SDL::initSDL()", "OSystem_SDL::getSupportedAntiAliasingLevels() const", "virtual thunk to OSystem_SDL::getSupportedAntiAliasingLevels() const", "Common::Array<QualifiedGameDescriptor>::insert_aux(QualifiedGameDescriptor*, QualifiedGameDescriptor const*, QualifiedGameDescriptor const*)", "generatePreferredTarget(ADGameDescription const*, int, Common::String)", "Common::Array<Common::U32String>::insert_aux(Common::U32String*, Common::U32String const*, Common::U32String const*)", "PauseToken::operator=(PauseToken&&)", "GUI::ThemeEval::getVar(Common::String const&)", "Common::Array<GUI::GridItemInfo>::push_back(GUI::GridItemInfo const&)", "Common::Array<Common::Language>::insert_aux(Common::Language*, Common::Language const*, Common::Language const*)", "GUI::LangExtraFont::LangExtraFont(GUI::LangExtraFont const&)", "GUI::LangExtraFont::operator=(GUI::LangExtraFont const&)", "GUI::ThemeLayoutTabWidget::makeClone(GUI::ThemeLayout*)", "GUI::ThemeLayoutSpacing::makeClone(GUI::ThemeLayout*)", "GUI::ThemeLayoutWidget::makeClone(GUI::ThemeLayout*)", "Common::Array<GUI::DropdownButtonWidget::Entry>::insert_aux(GUI::DropdownButtonWidget::Entry*, GUI::DropdownButtonWidget::Entry const*, GUI::DropdownButtonWidget::Entry const*)", "void Common::unknownKeyError<Common::U32String>(Common::U32String)", "Common::Array<Common::U32String>::operator=(Common::Array<Common::U32String> const&)", "GUI::GroupedListWidget::startEditMode()", "Common::Array<GUI::ListWidget::ListData>::insert_aux(GUI::ListWidget::ListData*, GUI::ListWidget::ListData const*, GUI::ListWidget::ListData const*)", "GUI::ListWidget::stripGUIformatting(Common::U32String const&)", "Common::KeyboardHardwareInputSet::findHardwareInput(Common::String const&) const", "Common::KeyboardHardwareInputSet::findHardwareInput(Common::Event const&) const", "Common::MouseHardwareInputSet::findHardwareInput(Common::String const&) const", "Common::MouseHardwareInputSet::findHardwareInput(Common::Event const&) const", "Common::JoystickHardwareInputSet::findHardwareInput(Common::String const&) const", "Common::JoystickHardwareInputSet::findHardwareInput(Common::Event const&) const", "Common::AchievementsManager::getCurrentLang() const", "Common::Singleton<Common::MainTranslationManager>::instance()", "generateUnknownGameReport(Common::Array<DetectedGame> const&, bool, bool, unsigned int)", "SaveStateDescriptor::isAutosave() const", "GUI::GuiManager::setLanguageRTL()", "GUI::GuiManager::getKeymap() const", "Common::GzioReadStream::read(void*, unsigned int)", "Common::makeZipArchive(Common::SeekableReadStream*)", "Common::ZipArchive::~ZipArchive().1", "Common::GZipWriteStream::~GZipWriteStream().1", "Common::QuickTimeParser::readMOOV(Common::QuickTimeParser::Atom)", "Common::QuickTimeParser::readTRAK(Common::QuickTimeParser::Atom)", "Common::QuickTimeParser::init()", "Common::NEResources::~NEResources().1", "Common::PEResources::~PEResources()", "GUI::MetadataParser::~MetadataParser()", "GUI::ThemeParser::~ThemeParser()", "GUI::ThemeParser::parserCallback_defaults(Common::XMLParser::ParserNode*)", "GUI::ThemeParser::parserCallback_text_color(Common::XMLParser::ParserNode*)", "GUI::ThemeParser::parserCallback_cursor(Common::XMLParser::ParserNode*)", "GUI::ThemeParser::parserCallback_text(Common::XMLParser::ParserNode*)", "GUI::ThemeParser::parserCallback_color(Common::XMLParser::ParserNode*)", "GUI::ThemeParser::parserCallback_drawstep(Common::XMLParser::ParserNode*)", "GUI::ThemeParser::parserCallback_drawdata(Common::XMLParser::ParserNode*)", "GUI::ThemeParser::parserCallback_layout(Common::XMLParser::ParserNode*)", "MT32Emu::PartialManager::produceOutput(int, short*, short*, unsigned int)", "MT32Emu::PartialManager::produceOutput(int, float*, float*, unsigned int)", "MT32Emu::Part::allNotesOff()", "MT32Emu::Part::stopNote(unsigned int)", "MT32Emu::Part::reset()", "MT32Emu::Synth::refreshSystemChanAssign(unsigned char, unsigned char)", "MT32Emu::Part::setHoldPedal(bool)", "MT32Emu::Part::resetAllControllers()", "MT32Emu::Part::noteOn(unsigned int, unsigned int)", "MT32Emu::BReverbModelImpl<short>::~BReverbModelImpl()", "MT32Emu::BReverbModelImpl<short>::~BReverbModelImpl().1", "MT32Emu::BReverbModelImpl<float>::~BReverbModelImpl()", "MT32Emu::BReverbModelImpl<float>::~BReverbModelImpl().1", "mt32emu_add_rom_data", "MT32Emu::ROMImage::freeROMImage(MT32Emu::ROMImage const*)", "non-virtual thunk to MT32Emu::AccurateLowPassFilter::process(float)", "MT32Emu::TVA::handleInterrupt()", "MT32Emu::PartialManager::allocPartial(int)", "MT32Emu::RhythmPart::setTimbre(MT32Emu::TimbreParam*)", "MT32Emu::RhythmPart::getAbsTimbreNum() const", "MT32Emu::Synth::initTimbres(unsigned short, unsigned short, unsigned short, unsigned short, bool)", "MT32Emu::Synth::playSysexWithoutFraming(unsigned char const*, unsigned int)", "MT32Emu::DefaultMidiStreamParser::printDebug(char const*)", "non-virtual thunk to MT32Emu::DefaultMidiStreamParser::printDebug(char const*)", "MT32Emu::Synth::playMsg(unsigned int)", "MT32Emu::Synth::playSysex(unsigned char const*, unsigned int)", "mt32emu_write_sysex", "MT32Emu::RendererImpl<short>::render(short*, unsigned int)", "MT32Emu::RendererImpl<short>::render(float*, unsigned int)", "MT32Emu::RendererImpl<short>::renderStreams(MT32Emu::DACOutputStreams<short> const&, unsigned int)", "MT32Emu::RendererImpl<short>::renderStreams(MT32Emu::DACOutputStreams<float> const&, unsigned int)", "MT32Emu::RendererImpl<float>::render(short*, unsigned int)", "MT32Emu::RendererImpl<float>::render(float*, unsigned int)", "MT32Emu::RendererImpl<float>::renderStreams(MT32Emu::DACOutputStreams<short> const&, unsigned int)", "MT32Emu::RendererImpl<float>::renderStreams(MT32Emu::DACOutputStreams<float> const&, unsigned int)", "MT32Emu::SynthWrapper::getOutputSamples(float*, unsigned int)", "png_check_IHDR", "png_combine_row", "png_benign_error", "png_chunk_error", "png_app_warning", "png_app_error", "png_chunk_report", "png_default_read_data", "png_read_chunk_header", "png_handle_IHDR", "png_read_IDAT_data", "png_read_start_row", "png_default_write_data", "png_write_complete_chunk", "png_compress_IDAT", "png_write_tEXt", "png_write_zTXt", "png_write_iTXt", "png_destroy_read_struct", "png_destroy_write_struct", "png_zfree", "png_destroy_info_struct", "png_free_data", "png_colorspace_sync", "png_destroy_gamma_table", "png_decompress_chunk", "png_cache_unknown_chunk", "png_set_text_2", "png_build_16bit_table", "png_create_info_struct", "png_text_compress", "png_zalloc", "png_crc_finish", "png_inflate_read", "png_write_eXIf", "SDL_OpenAudio", "SDL_AddAudioDevice", "SDL_AudioDetectDevices_Default", "SDL_CloseAudio", "SdlMixerManager::startAudio()", "SdlMixerManager::resumeAudio()", "SDL_AudioStreamPut", "SDL_ResampleCVT_c1", "SDL_ResampleCVT_c2", "SDL_ResampleCVT_c4", "SDL_ResampleCVT_c6", "SDL_ResampleCVT_c8", "SDL_BufferQueueFillCallback", "SDL_BuildAudioCVT", "SDL_AddAudioCVTFilter", "SDL_AudioStreamGet", "EMSCRIPTENAUDIO_Init", "EMSCRIPTENAUDIO_OpenDevice", "SDL_Error", "SDL_FillRect", "SDL_PrivateLoadButtonMapping", "SDL_PrivateGameControllerParseElement", "SDL_AddDollarGesture", "dollarNormalize", "SDL_JoystickGetAxis", "SDL_JoystickGetHat", "SDL_JoystickGetButton", "SDL_JoystickName", "SDL_PixelFormatEnumToMasks", "SDL_IntersectRect", "SDL_IntersectRectAndLine", "SW_CreateTexture", "SW_GetOutputSize", "SW_RenderReadPixels", "stdio_seek", "SDL_UpperSoftStretch", "SDL_SetSurfacePalette", "SDL_CreateRGBSurface", "SDL_CreateRGBSurfaceFrom", "SDL_SetColorKey", "SDL_GetColorKey", "EMSCRIPTEN_JoystickInit", "EMSCRIPTEN_JoystickOpen", "SDL_EGL_GetSwapInterval", "SDL_GetCurrentVideoDriver", "SDL_GetDesktopDisplayMode", "SDL_GetWindowDisplayMode", "SDL_SetWindowFullscreen", "SDL_SetWindowGrab", "SDL_GetWindowID", "SDL_GetWindowFlags", "SDL_GetWindowPosition", "SDL_GetWindowSize", "SDL_GetWindowGrab", "SDL_GL_SetAttribute", "SDL_GL_GetCurrentContext", "GetYUVPlanes", "SDL_ConvertPixels_ARGB8888_to_YUV", "SDL_PollSentinelChanged", "SDL_PrivateGameControllerButton", "ResetOutput", "SDL_PrivateJoystickAxis", "SDL_PrivateJoystickButton", "SDL_JoystickEventState", "SDL_SendKeyboardKeyInternal", "SDL_SendMouseButton", "SDL_SendTouchMotion", "Emscripten_HandleMouseButton", "Emscripten_HandleMouseFocus", "Emscripten_HandleFocus", "Emscripten_HandleTouch", "Emscripten_HandleKey", "Emscripten_HandleKeyPress", "SDL_PeepEvents", "SDL_SendAppEvent", "SDL_GameControllerIgnoreDevicesChanged", "SDL_GameControllerIgnoreDevicesExceptChanged", "SDL_IsGameController", "SdlEventSource::~SdlEventSource()", "Emscripten_CreateDevice", "debug_print", "SDL_Log", "SDL_LogCritical", "Map1to1", "QueueCmdSetClipRect", "SDL_CreateMutex", "SDL_AddEventWatch", "SDL_AllocateRenderVertices", "SDL_MouseAutoCaptureChanged", "SDL_SendMouseMotion", "SdlWindow::lockMouse(bool)", "SdlGraphicsManager::showSystemMouseCursor(bool)", "OpenGLSdlGraphics3dManager::showMouse(bool)", "SdlWindow::warpMouseInWindow(int, int)", "SDL_UnlockSurface", "SDL_LockSurface", "SDL_ConvertSurfaceFormat", "SDL_SetSurfaceAlphaMod", "byn-split-outlined-A$SDL_SetSurfaceColorMod", "byn-split-outlined-A$SDL_SetSurfaceRLE", "byn-split-outlined-A$SDL_SetSurfaceBlendMode", "SurfaceSdlGraphicsManager::unloadGFXMode()", "GLES2_UnlockTexture", "SDLgfx_rotateSurface", "SW_DestroyTexture", "Emscripten_CreateWindowFramebuffer", "Emscripten_DestroyWindowFramebuffer", "SDL_SW_CopyYUVToRGB", "SDL_MouseTouchEventsChanged", "Emscripten_GLES_MakeCurrent", "SdlWindow::~SdlWindow()", "SdlWindow::destroyWindow()", "Emscripten_HandleFullscreenChange", "SdlWindow::getDesktopResolution()", "SdlWindow::getDisplayIndex() const", "SdlWindow::setWindowCaption(Common::String const&)", "SDL_OnWindowShown", "SdlWindow::iconifyWindow()", "SdlWindow::setMouseRect(Common::Rect const&)", "OSystem_SDL::engineDone()", "virtual thunk to OSystem_SDL::engineDone()", "OSystem_SDL::getOpenGLProcAddress(char const*) const", "GLES2_GetOutputSize", "SdlWindow::getSdlDpiScalingFactor() const", "GLES2_SetVSync", "OpenGLSdlGraphicsManager::getFeatureState(OSystem::Feature) const", "OpenGLSdlGraphics3dManager::getFeatureState(OSystem::Feature) const", "virtual thunk to OpenGLSdlGraphics3dManager::getFeatureState(OSystem::Feature) const", "GLES2_RenderPresent", "OpenGLSdlGraphicsManager::refreshScreen()", "Emscripten_HandleCanvasResize", "Emscripten_HandleResize", "Emscripten_HandleVisibilityChange", "af_property_set", "af_property_get", "cf2_builder_lineTo", "cf2_builder_cubeTo", "cff_builder_start_point", "pfr_glyph_load_rec", "t1_builder_check_points", "t1_builder_add_point1", "t1_builder_add_contour", "t1_builder_start_point", "TT_Load_Simple_Glyph", "cff_subfont_load", "cf2_decoder_parse_charstrings", "cf2_glyphpath_moveTo", "cf2_doFlex", "_bdf_parse_properties", "BDF_Glyph_Load", "PCF_Glyph_Load", "pfr_slot_load", "T42_GlyphSlot_Init", "T42_Size_Init", "Graphics::TTFFont::~TTFFont()", "open_face_PS_from_sfnt_stream", "T42_Size_Done", "T42_Size_Select", "T42_Size_Request", "Graphics::TTFLibrary::TTFLibrary()", "t1_decoder_init", "cff_index_access_element", "ft_gzip_check_header", "ft_lzw_stream_io", "ft_lzwstate_io", "pfr_face_get_kerning", "tt_face_goto_table", "tt_face_load_font_dir", "tt_face_get_metrics", "tt_face_find_bdf_prop", "TT_Access_Glyph_Frame", "check_type1_format", "fnt_font_load", "raccess_guess_apple_generic", "pcf_get_accel", "tt_face_load_any", "ft_lzwstate_get_code", "FT_Stream_ExtractFrame", "cff_index_get_name", "tt_face_free_sbit", "TT_Forget_Glyph_Frame", "pcf_get_metric", "raccess_make_file_name", "raccess_guess_darwin_newvfs", "raccess_guess_darwin_hfsplus", "ft_gzip_alloc", "pfr_aux_name_load", "pfr_extra_item_load_font_id", "afm_parser_init", "psh_globals_new", "ft_black_new", "T1_Get_MM_Var", "t1_allocate_blend", "af_glyph_hints_reload", "af_latin_hints_compute_segments", "af_axis_hints_new_edge", "FT_GlyphLoader_CheckSubGlyphs", "cf2_arrstack_push", "_bdf_list_split", "ft_var_readpackedpoints", "pfr_extra_item_load_bitmap_info", "pfr_extra_item_load_stem_snaps", "psh_hint_table_init", "ps_hints_t1reset", "ps_hints_t1stem3", "ps_dimension_end", "ps_dimension_add_t1stem", "ps_dimension_set_mask_bits", "tt_cmap14_variants", "tt_cmap14_char_variants", "tt_cmap14_variant_chars", "tt_cmap14_get_def_chars", "tt_name_entry_ascii_from_other", "tt_name_entry_ascii_from_utf16", "tt_slot_init", "TT_Load_Context", "Update_Max", "FNT_Load_Glyph", "FT_Bitmap_Convert", "ft_gzip_stream_io", "ps_parser_load_field_table", "ps_hinter_done", "ft_black_render", "Conic_To", "Cubic_To", "tt_sbit_decoder_load_compound", "sfnt_get_glyph_name", "sfnt_get_name_index", "ft_smooth_render", "ft_smooth_render_lcd", "ft_smooth_render_lcd_v", "tt_size_done", "decode_mcu_DC_refine", "self_destruct", "png_deflate_claim", "png_inflate_claim", "png_inflate", "ft_ansi_stream_close", "StdioStream::~StdioStream()", "StdioStream::~StdioStream().1", "non-virtual thunk to StdioStream::~StdioStream()", "StdioStream::~StdioStream().2", "non-virtual thunk to StdioStream::~StdioStream().1", "png_default_flush", "StdioStream::flush()", "non-virtual thunk to StdioStream::flush()", "do_putc.1", "puts", "SDL_sscanf", "stdio_read", "ft_ansi_stream_io", "StdioStream::read(void*, unsigned int)", "__fseeko", "__ftello", "fwrite", "out", "sift", "trinkle", "__floatscan", "scanexp", "vfprintf", "vfiprintf", "Common::ConfigManager::ConfigManager()", "Common::ConfigManager::Domain::Domain()", "Common::HashMap<Common::String, Common::ConfigManager::Domain, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing(Common::String const&)", "Common::DebugManager::DebugManager()", "Common::HashMap<Common::String, Common::DebugManager::DebugChannel, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::expandStorage(unsigned int)", "Common::EventDispatcher::registerSource(Common::EventSource*, bool)", "Common::EventDispatcher::registerObserver(Common::EventObserver*, unsigned int, bool, bool)", "Common::FSNode::FSNode(AbstractFSNode*)", "Common::FSDirectory::FSDirectory(Common::FSNode const&, int, bool, bool, bool)", "Common::normalizePath(Common::String const&, char)", "Common::ZipArchive::ZipArchive(void*)", "Common::ZipArchive::listMembers(Common::List<Common::SharedPtr<Common::ArchiveMember>>&) const", "Common::WinResources::VersionInfo::VersionInfo()", "Common::HashMap<Common::String, Common::U32String, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing(Common::String const&)", "Common::HashMap<Common::WinResourceID, Common::HashMap<Common::WinResourceID, Common::PEResources::Resource, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>::HashMap()", "Common::HashMap<Common::WinResourceID, Common::HashMap<Common::WinResourceID, Common::HashMap<Common::WinResourceID, Common::PEResources::Resource, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>::lookupAndCreateIfMissing(Common::WinResourceID const&)", "Common::HashMap<Common::WinResourceID, Common::HashMap<Common::WinResourceID, Common::PEResources::Resource, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>::lookupAndCreateIfMissing(Common::WinResourceID const&)", "Common::HashMap<Common::WinResourceID, Common::PEResources::Resource, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>::lookupAndCreateIfMissing(Common::WinResourceID const&)", "MT32Emu::BReverbModel::createBReverbModel(MT32Emu::ReverbMode, bool, MT32Emu::RendererType)", "MT32Emu::DynamicSysexDataStorage::allocate(unsigned int)", "SRCTools::SincResampler::createSincResampler(double, double, double, double, double, unsigned int)", "SRCTools::IIRResampler::Constants::Constants(unsigned int, float, SRCTools::IIRSection const*, SRCTools::IIRResampler::Quality)", "DefaultEventManager::pushEvent(Common::Event const&)", "Common::List<Common::Event>::operator=(Common::List<Common::Event> const&)", "DefaultEventManager::notifyEvent(Common::Event const&)", "non-virtual thunk to DefaultEventManager::notifyEvent(Common::Event const&)", "Common::Keymap::Keymap(Common::Keymap::KeymapType, Common::String const&, Common::U32String const&)", "Common::HashMap<Common::HardwareInput, Common::Array<Common::Action*>, Common::HardwareInput_Hash, Common::HardwareInput_EqualTo>::lookupAndCreateIfMissing(Common::HardwareInput const&)", "Common::HashMap<Common::Keymap*, Common::RemapWidget::KeymapTitleRow, Common::Hash<Common::Keymap*>, Common::EqualTo<Common::Keymap*>>::lookupAndCreateIfMissing(Common::Keymap* const&)", "Common::VirtualMouse::handleAxisMotion(short, short)", "SeqMusicPlugin::createInstance(MidiDriver**, unsigned int) const", "TimidityMusicPlugin::createInstance(MidiDriver**, unsigned int) const", "DefaultSaveFileManager::DefaultSaveFileManager()", "SdlGraphicsManager::SdlGraphicsManager(SdlEventSource*, SdlWindow*)", "SdlGraphicsManager::defaultGraphicsModeConfig() const", "SurfaceSdlGraphicsManager::getSupportedFormats() const", "virtual thunk to SurfaceSdlGraphicsManager::getSupportedFormats() const", "SdlMixerManager::getAudioSpec(unsigned int)", "OpenGL::CLUT8LookUpPipeline::CLUT8LookUpPipeline()", "OpenGL::FakeTexture::FakeTexture(unsigned int, unsigned int, unsigned int, Graphics::PixelFormat const&, Graphics::PixelFormat const&)", "OpenGL::ScaledTexture::ScaledTexture(unsigned int, unsigned int, unsigned int, Graphics::PixelFormat const&, Graphics::PixelFormat const&)", "OpenGL::TextureTarget::TextureTarget()", "OpenGL::OpenGLGraphicsManager::hasFeature(OSystem::Feature) const", "OpenGL::OpenGLGraphicsManager::getSupportedFormats() const", "OpenGL::OpenGLGraphicsManager::getGLPixelFormat(Graphics::PixelFormat const&, unsigned int&, unsigned int&, unsigned int&) const", "OpenGL::OpenGLGraphicsManager::getFontOSD() const", "OpenGLSdlGraphicsManager::OpenGLSdlGraphicsManager(SdlEventSource*, SdlWindow*)", "POSIXFilesystemNode::getChildren(Common::Array<AbstractFSNode*>&, Common::FSNode::ListMode, bool) const", "PosixIoStream::makeFromPath(Common::String const&, bool)", "Common::Singleton<Graphics::YUVToRGBManager>::instance()", "Image::XanDecoder::convertYUVtoRGBSurface()", "Graphics::scaleBlit(unsigned char*, unsigned char const*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, Graphics::PixelFormat const&)", "Graphics::CursorManager::Cursor::Cursor(void const*, unsigned int, unsigned int, int, int, unsigned int, bool, Graphics::PixelFormat const*)", "Graphics::FontManager::FontManager()", "Graphics::TTFFont::TTFFont()", "Common::HashMap<unsigned int, Graphics::TTFFont::Glyph, Common::Hash<unsigned int>, Common::EqualTo<unsigned int>>::lookupAndCreateIfMissing(unsigned int const&)", "SourceScaler::setSource(unsigned char const*, unsigned int, int, int, int)", "NormalPlugin::createInstance(Graphics::PixelFormat const&) const", "Graphics::Surface::flipVertical(Common::Rect const&)", "Graphics::Surface::scale(short, short, bool) const", "Graphics::YUVToRGBManager::getLookup(Graphics::PixelFormat, Graphics::YUVToRGBManager::LuminanceScale, bool)", "DotMatrixPlugin::createInstance(Graphics::PixelFormat const&) const", "SAIPlugin::createInstance(Graphics::PixelFormat const&) const", "SuperSAIPlugin::createInstance(Graphics::PixelFormat const&) const", "SuperEaglePlugin::createInstance(Graphics::PixelFormat const&) const", "PMPlugin::createInstance(Graphics::PixelFormat const&) const", "AdvMamePlugin::createInstance(Graphics::PixelFormat const&) const", "TVPlugin::createInstance(Graphics::PixelFormat const&) const", "HQPlugin::createInstance(Graphics::PixelFormat const&) const", "EdgePlugin::createInstance(Graphics::PixelFormat const&) const", "NullMusicPlugin::createInstance(MidiDriver**, unsigned int) const", "Audio::makeALawStream(Common::SeekableReadStream*, DisposeAfterUse::Flag, int, int)", "Audio::makeMuLawStream(Common::SeekableReadStream*, DisposeAfterUse::Flag, int, int)", "Common::HashMap<Common::String, Common::SharedArchiveContents, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing(Common::String const&)", "Common::BaseString<char>::BaseString(char const*)", "Common::BaseString<char>::BaseString(char const*, unsigned int)", "Common::BaseString<char>::BaseString(char const*, char const*)", "Common::BaseString<char32_t>::BaseString(char32_t const*)", "Common::BaseString<char32_t>::BaseString(char32_t const*, unsigned int)", "Common::BaseString<char32_t>::BaseString(char32_t const*, char32_t const*)", "AdvancedMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const", "Common::HashMap<Common::String, FileProperties, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing(Common::String const&)", "Common::HashMap<Common::String, FileProperties, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::assign(Common::HashMap<Common::String, FileProperties, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&)", "AgiMetaEngineDetection::parseAndCustomizeGuiOptions(Common::String const&, Common::String const&) const", "Common::HashMap<Common::String, int, Common::Hash<Common::String>, Common::EqualTo<Common::String>>::expandStorage(unsigned int)", "Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::expandStorage(unsigned int)", "Common::HashMap<Common::String, Common::String, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::assign(Common::HashMap<Common::String, Common::String, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&)", "Common::HashMap<Common::String, bool, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::expandStorage(unsigned int)", "Common::HashMap<Common::String, Common::String, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing(Common::String const&)", "MD5CacheManager::MD5CacheManager()", "Glk::Blorb::listMembers(Common::List<Common::SharedPtr<Common::ArchiveMember>>&) const", "DetectedGame::DetectedGame(Common::String const&, Common::String const&, Common::String const&, Common::Language, Common::Platform, Common::String const&, bool)", "Common::HashMap<Common::String, Gob::DataIO::File, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::expandStorage(unsigned int)", "MadeMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const", "Common::AchievementsManager::AchievementsManager()", "ScummMetaEngineDetection::parseAndCustomizeGuiOptions(Common::String const&, Common::String const&) const", "Common::HashMap<Common::String, SizeMD5, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing(Common::String const&)", "OSystem_SDL::getHardwareInputSet()", "OSystem_SDL::createMutex()", "OSystem_SDL::getDefaultIconsPath()", "OSystem_SDL::getScreenshotsPath()", "Common::Singleton<Common::ConfigManager>::instance()", "Base::createTemporaryTarget(Common::String const&, Common::String const&)", "PluginManager::instance()", "PluginManager::PluginManager()", "EngineManager::getPlugins(PluginType) const", "Common::HashMap<Common::String, Common::String, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::clear(bool)", "Common::HashMap<Common::String, long long, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::clear(bool)", "EngineManager::generateUniqueDomain(Common::String)", "EngineManager::createTargetForGame(DetectedGame const&)", "MusicManager::getPlugins() const", "ScalerManager::getPlugins() const", "StaticPluginProvider::getPlugins()", "GUI::ThemeParser::cleanup()", "AdvancedMetaEngineDetection::AdvancedMetaEngineDetection(void const*, unsigned int, PlainGameDescriptor const*)", "FileMapArchive::listMembers(Common::List<Common::SharedPtr<Common::ArchiveMember>>&) const", "FileMapArchive::getMember(Common::Path const&) const", "Common::INIFile::Section::Section(Common::INIFile::Section const&)", "Common::HashMap<Common::String, Common::Array<Common::AchievementDescription>, Common::Hash<Common::String>, Common::EqualTo<Common::String>>::lookupAndCreateIfMissing(Common::String const&)", "DetectedGame::DetectedGame()", "GUI::Debugger::cmdDebugFlagsList(int, char const**)", "GUI::Debugger::cmdDebugFlagEnable(int, char const**)", "GUI::Debugger::cmdDebugFlagDisable(int, char const**)", "Common::HashMap<Common::String, Common::SharedPtr<Common::Functor2<int, char const**, bool>>, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing(Common::String const&)", "GUI::LauncherFilterMatcher(void*, int, Common::U32String const&, Common::U32String const&)", "Common::HashMap<Common::String, GUI::MetadataGame, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing(Common::String const&)", "GUI::MetadataParser::closedKeyCallback(Common::XMLParser::ParserNode*)", "GUI::MetadataParser::buildLayout()", "GUI::GlobalOptionsDialog::apply()::$_0::operator()(GUI::StaticTextWidget*, Common::String const&, Common::U32String const&) const", "GUI::ThemeEngine::addDirtyRect(Common::Rect)", "GUI::ThemeEval::addLayout(GUI::ThemeLayout::LayoutType, int, GUI::ThemeLayout::ItemAlign)", "GUI::ThemeParser::buildLayout()", "GUI::scaleGfx(Graphics::ManagedSurface const*, int, int, bool)", "Common::HashMap<Common::U32String, int, Common::Hash<Common::U32String>, Common::EqualTo<Common::U32String>>::lookupAndCreateIfMissing(Common::U32String const&)", "Common::HashMap<int, Common::Array<int>, Common::Hash<int>, Common::EqualTo<int>>::lookupAndCreateIfMissing(int const&)", "Common::HashMap<int, Graphics::ManagedSurface const*, Common::Hash<int>, Common::EqualTo<int>>::expandStorage(unsigned int)", "__cxxabiv1::__vmi_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const", "__cxxabiv1::__vmi_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int, bool) const", "__cxxabiv1::__vmi_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, void const*, void const*, int, bool) const", "DISKAUDIO_WaitDevice", "DUMMYAUDIO_CaptureFromDevice", "SDL_AtomicLock", "OSystem_SDL::delayMillis(unsigned int)", "OSystem_Emscripten::hasFeature(OSystem::Feature)", "non-virtual thunk to OSystem_Emscripten::hasFeature(OSystem::Feature)", "virtual thunk to OSystem_Emscripten::hasFeature(OSystem::Feature)", "AsylumMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const", "CryOmni3D::CryOmni3DMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const", "MohawkMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const", "ToonMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const", "ToucheMetaEngineDetection::fallbackDetect(Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&, Common::FSList const&, ADDetectedGameExtraInfo**) const", "GUI::Debugger::cmdHelp(int, char const**)", "GUI::Debugger::cmdDebugLevel(int, char const**)", "GUI::OptionsDialog::setVolumeSettingsState(bool)", "GUI::GridItemTray::reflowLayout()", "GUI::EditTextWidget::~EditTextWidget()", "GUI::DomainEditTextWidget::~DomainEditTextWidget()", "non-virtual thunk to GUI::DomainEditTextWidget::~DomainEditTextWidget()", "non-virtual thunk to GUI::DomainEditTextWidget::~DomainEditTextWidget().1", "non-virtual thunk to GUI::EditableWidget::~EditableWidget()", "GUI::ListWidget::~ListWidget()", "non-virtual thunk to GUI::ScrollContainerWidget::~ScrollContainerWidget()", "GUI::ScrollContainerWidget::~ScrollContainerWidget().1", "non-virtual thunk to GUI::ScrollContainerWidget::~ScrollContainerWidget().1", "GUI::PicButtonWidget::PicButtonWidget(GUI::GuiObject*, int, int, int, int, Common::U32String const&, unsigned int, unsigned char)", "GUI::PicButtonWidget::PicButtonWidget(GUI::GuiObject*, Common::String const&, Common::U32String const&, unsigned int, unsigned char)", "non-virtual thunk to GUI::GridWidget::~GridWidget()", "GUI::GridWidget::~GridWidget().1", "non-virtual thunk to GUI::GridWidget::~GridWidget().1", "OSystem_POSIX::createAudioCDManager()", "Common::Keymapper::~Keymapper().1", "OpenGL::ShaderPipeline::~ShaderPipeline().1", "OpenGL::CLUT8LookUpPipeline::~CLUT8LookUpPipeline()", "OpenGL::Texture::~Texture().1", "OpenGL::FakeTexture::~FakeTexture()", "Graphics::TTFFont::getCharWidth(unsigned int) const", "Graphics::TTFFont::getBoundingBox(unsigned int) const", "Graphics::TTFFont::drawChar(Graphics::Surface*, unsigned int, int, int, unsigned int, unsigned int const*) const", "Graphics::VectorRendererSpec<unsigned int>::blitKeyBitmap(Graphics::ManagedSurface const*, Common::Point const&, bool)", "Graphics::VectorRendererSpec<unsigned short>::blitKeyBitmap(Graphics::ManagedSurface const*, Common::Point const&, bool)", "OpenGL::ShaderSurfaceRenderer::~ShaderSurfaceRenderer().1", "OpenGL::ShaderManager::~ShaderManager().1", "virtual thunk to SurfaceSdlGraphicsManager::clearOverlay()", "non-virtual thunk to MidiDriver_MT32::sysEx(unsigned char const*, unsigned short)", "Common::ConfigManager::set(Common::String const&, Common::String const&)", "Common::ConfigManager::registerDefault(Common::String const&, Common::String const&)", "Common::ConfigManager::registerDefault(Common::String const&, char const*)", "Common::ConfigManager::registerDefault(Common::String const&, int)", "Common::ConfigManager::registerDefault(Common::String const&, bool)", "Common::ConfigManager::setActiveDomain(Common::String const&)", "void Common::sort<Common::ListInternal::Iterator<Common::DebugManager::DebugChannel>, Common::(anonymous namespace)::DebugLevelComperator>(Common::ListInternal::Iterator<Common::DebugManager::DebugChannel>, Common::ListInternal::Iterator<Common::DebugManager::DebugChannel>, Common::(anonymous namespace)::DebugLevelComperator)", "void Common::sort<Common::ListInternal::Iterator<Common::String>, Common::Less<Common::String>>(Common::ListInternal::Iterator<Common::String>, Common::ListInternal::Iterator<Common::String>, Common::Less<Common::String>)", "Common::Path::Path(Common::Path const&)", "Common::Path::Path(Common::String const&, char)", "Common::Path::operator=(Common::Path const&)", "Common::WinResourceID::operator=(Common::String const&)", "Common::SaveFileManager::setError(Common::Error, Common::String const&)", "OpenGL::LibRetro::PresetParser::lookUpValue(Common::String const&, Common::String*)", "OpenGL::OpenGLGraphicsManager::setShader(Common::String const&)", "OpenGL::OpenGLGraphicsManager::beginGFXTransaction()", "Posix::assureDirectoryExists(Common::String const&, char const*)", "MusicDevice::getCompleteName()", "void Common::sort<Common::HardwareInput*, Common::HardwareInputTypeIdComparator>(Common::HardwareInput*, Common::HardwareInput*, Common::HardwareInputTypeIdComparator)", "DetectedGame* Common::copy<DetectedGame const*, DetectedGame*>(DetectedGame const*, DetectedGame const*, DetectedGame*)", "Glk::GlkDetectedGame::GlkDetectedGame(char const*, char const*, Common::String const&, GameSupportLevel)", "Glk::GlkDetectedGame::GlkDetectedGame(char const*, char const*, char const*, Common::String const&, Common::Language, GameSupportLevel)", "Glk::GlkDetectedGame::GlkDetectedGame(char const*, char const*, Common::String const&, Common::String const&, unsigned long, GameSupportLevel)", "void Common::sort<Common::String*, Common::Less<Common::String>>(Common::String*, Common::String*, Common::Less<Common::String>)", "OSystem_POSIX::getDefaultConfigFileName()", "Common::Keymapper::getMappedActions(Common::Event const&, Common::Array<Common::Action*>&, Common::Keymap::KeymapType) const", "DetectedGame::setGUIOptions(Common::String const&)", "void SWAP<GUI::LauncherEntry>(GUI::LauncherEntry&, GUI::LauncherEntry&)", "GUI::GridItemInfo* Common::copy<GUI::GridItemInfo const*, GUI::GridItemInfo*>(GUI::GridItemInfo const*, GUI::GridItemInfo const*, GUI::GridItemInfo*)", "void SWAP<DetectedGame>(DetectedGame&, DetectedGame&)", "void Common::sort<Common::TLanguage*, Common::Less<Common::TLanguage>>(Common::TLanguage*, Common::TLanguage*, Common::Less<Common::TLanguage>)", "OpenGL::OpenGLGraphicsManager::displayMessageOnOSD(Common::U32String const&)", "OSystem::setTextInClipboard(Common::U32String const&)", "GUI::DropdownButtonWidget::appendEntry(Common::U32String const&, unsigned int)", "void Common::sort<Common::U32String*, Common::Less<Common::U32String>>(Common::U32String*, Common::U32String*, Common::Less<Common::U32String>)", "GUI::GridWidget::setGroupHeaderFormat(Common::U32String const&, Common::U32String const&)", "GUI::GroupedListWidget::setGroupHeaderFormat(Common::U32String const&, Common::U32String const&)", "void Common::sort<Common::U32String*, GUI::GroupedListWidget::sortGroups()::$_0>(Common::U32String*, Common::U32String*, GUI::GroupedListWidget::sortGroups()::$_0)", "GUI::PopUpWidget::appendEntry(Common::U32String const&, unsigned int)", "GUI::PopUpWidget::appendEntry(Common::String const&, unsigned int)", "Common::ConfigManager::addGameDomain(Common::String const&)", "Common::operator+(Common::String const&, char)", "Common::operator+(Common::String const&, Common::String const&)", "Common::operator+(Common::String const&, char const*)", "Common::StringTokenizer::StringTokenizer(Common::String const&, Common::String const&)", "Common::U32StringTokenizer::U32StringTokenizer(Common::U32String const&, Common::String const&)", "Common::TranslationManager::findMatchingLanguage(Common::String const&)", "Common::TranslationManager::getCurrentLanguage() const", "Common::WinResourceID::toString() const", "Common::NEResources::getIDList(Common::WinResourceID const&) const", "Common::WinResourceID::WinResourceID(Common::WinResourceID const&)", "Common::HashMap<Common::String, Common::PEResources::Section, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing(Common::String const&)", "Common::PEResources::getIDList(Common::WinResourceID const&) const", "Common::PEResources::getLangList(Common::WinResourceID const&, Common::WinResourceID const&) const", "DefaultAudioCDManager::fillPotentialTrackNames(Common::Array<Common::String>&, int) const", "Common::ArtificialEventSource::pollEvent(Common::Event&)", "Common::Action::addDefaultInputMapping(Common::String const&)", "Common::SaveFileManager::getError()", "Common::SaveFileManager::getErrorDesc()", "POSIXFilesystemNode::getName() const", "POSIXFilesystemNode::getPath() const", "Graphics::FontManager::getFontByName(Common::String const&) const", "MusicDevice::getCompleteId()", "MusicDevice::getHandle()", "Common::GenericArchiveMember::GenericArchiveMember(Common::String const&, Common::Archive const*)", "Common::GenericArchiveMember::getName() const", "Common::String::String(Common::String const&)", "Common::HashMap<Common::String, Common::FSNode, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing(Common::String const&)", "DetectedGame::DetectedGame(DetectedGame const&)", "Common::HashMap<Common::String, int, Common::Hash<Common::String>, Common::EqualTo<Common::String>>::lookupAndCreateIfMissing(Common::String const&)", "Agi::WagFileParser::addPropFromIni(Common::INIFile*, Common::String, Common::String, Agi::WagProperty::WagPropertyCode)", "Common::HashMap<Common::String, bool, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing(Common::String const&)", "Common::HashMap<Common::String, Scumm::DetectorDesc, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing(Common::String const&)", "Common::HashMap<Common::String, int, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing(Common::String const&)", "GUI::GridItemInfo* Common::uninitialized_copy<GUI::GridItemInfo*, GUI::GridItemInfo>(GUI::GridItemInfo*, GUI::GridItemInfo*, GUI::GridItemInfo*)", "GUI::GuiObject::GuiObject(Common::String const&)", "GUI::ExistingSave* Common::uninitialized_copy<GUI::ExistingSave*, GUI::ExistingSave>(GUI::ExistingSave*, GUI::ExistingSave*, GUI::ExistingSave*)", "Common::HashMap<Common::String, GUI::ThemeParser::PaletteColor, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::lookupAndCreateIfMissing(Common::String const&)", "Common::TranslationManager::getTranslation(char const*, char const*) const", "Common::U32String::operator+=(Common::U32String const&)", "Common::operator+(Common::U32String const&, Common::U32String const&)", "Common::Action::Action(char const*, Common::U32String const&)", "OSystem::getTextFromClipboard()", "GUI::SaveLoadChooser::SaveLoadChooser(Common::U32String const&, Common::U32String const&, bool)", "GUI::SaveLoadChooserSimple::getResultString() const", "GUI::SaveLoadChooserGrid::getResultString() const", "Common::U32String::U32String(Common::U32String const&)", "Common::XMLParser::loadStream(Common::SeekableReadStream*)", "OpenGL::LibRetro::PresetParser::lookUpValueScale(Common::String const&, float*, unsigned int*, OpenGL::LibRetro::ScaleType)", "OSystem_POSIX::getDefaultIconsPath()", "OSystem_POSIX::getDefaultLogFileName()", "GUI::Debugger::debuggerCompletionCallback(GUI::ConsoleDialog*, char const*, Common::String&, void*)", "Common::BaseString<char>::deleteLastChar()", "Common::ConfigManager::removeGameDomain(Common::String const&)", "Common::Path::Path(char const*, char)", "Common::SaveFileManager::clearError()", "GUI::ThemeParser::closedKeyCallback(Common::XMLParser::ParserNode*)", "Common::String::vformat(char const*, void*)", "Common::convertFromU32String(Common::U32String const&, Common::CodePage)", "Common::HashMap<Common::String, Common::ConfigManager::Domain, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::erase(Common::String const&)", "Common::ConfigManager::setInt(Common::String const&, int, Common::String const&)", "Common::ConfigManager::setBool(Common::String const&, bool, Common::String const&)", "Common::ConfigManager::~ConfigManager()", "Common::DebugManager::addAllDebugChannels(DebugChannelDef const*)", "Common::DebugManager::removeAllDebugChannels()", "Common::HashMap<Common::String, Common::DebugManager::DebugChannel, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::~HashMap()", "Common::Error::Error(Common::ErrorCode, Common::String const&)", "Common::parseGameGUIOptions(Common::String const&)", "Common::getGameGUIOptionsDescriptionLanguage(Common::Language)", "Common::String::String(Common::U32String const&, Common::CodePage)", "Common::String::format(char const*, ...)", "Common::toPrintable(Common::String const&, bool)", "Common::TranslationManager::~TranslationManager()", "Common::UnicodeBiDiText::~UnicodeBiDiText()", "Common::U32String::format(char const*, ...)", "unzLocateFile(void*, char const*, int)", "Common::ZipArchive::hasFile(Common::Path const&) const", "Common::HashMap<Common::WinResourceID, Common::HashMap<Common::WinResourceID, Common::String, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>::getVal(Common::WinResourceID const&) const", "Common::HashMap<Common::WinResourceID, Common::HashMap<Common::WinResourceID, Common::PEResources::Resource, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>::~HashMap()", "Common::HashMap<Common::WinResourceID, Common::HashMap<Common::WinResourceID, Common::HashMap<Common::WinResourceID, Common::PEResources::Resource, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>::getVal(Common::WinResourceID const&) const", "Common::HashMap<Common::WinResourceID, Common::HashMap<Common::WinResourceID, Common::PEResources::Resource, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>, Common::WinResourceID_Hash, Common::WinResourceID_EqualTo>::getVal(Common::WinResourceID const&) const", "Common::ObjectPool<Common::XMLParser::ParserNode, 8ul>::deleteChunk(Common::XMLParser::ParserNode*)", "Common::ArtificialEventSource::~ArtificialEventSource()", "Common::ArtificialEventSource::~ArtificialEventSource().1", "Common::Keymap::~Keymap()", "Common::Keymap::unregisterMapping(Common::Action*)", "Common::KeymapperDefaultBindings::findDefaultBinding(Common::String, Common::String) const", "Common::DelayedEventSource::~DelayedEventSource()", "Common::DelayedEventSource::~DelayedEventSource().1", "Common::InputWatcher::~InputWatcher()", "Common::InputWatcher::~InputWatcher().1", "Common::SaveFileManager::~SaveFileManager()", "OpenGL::LibRetro::PresetParser::lookUpValue(Common::String const&, float*)", "OpenGL::LibRetro::PresetParser::lookUpValue(Common::String const&, bool*)", "OpenGL::LibRetro::PresetParser::lookUpValue(Common::String const&, OpenGL::LibRetro::FilteringMode*, OpenGL::LibRetro::FilteringMode)", "OpenGL::LibRetro::PresetParser::lookUpValue(Common::String const&, OpenGL::LibRetro::ScaleType*, OpenGL::LibRetro::ScaleType)", "OpenGL::LibRetro::PresetParser::lookUpValue(Common::String const&, OpenGL::WrapMode*, OpenGL::WrapMode)", "POSIXFilesystemNode::~POSIXFilesystemNode()", "POSIXFilesystemNode::~POSIXFilesystemNode().1", "Common::BasePtrTrackerImpl<Common::HashMap<Common::String, int, Common::Hash<Common::String>, Common::EqualTo<Common::String>>>::destructObject()", "Common::MemcachingCaseInsensitiveArchive::translatePath(Common::Path const&) const", "Common::GenericArchiveMember::~GenericArchiveMember()", "Common::GenericArchiveMember::~GenericArchiveMember().1", "AdvancedMetaEngineDetection::~AdvancedMetaEngineDetection()", "Common::HashMap<Common::String, Common::String, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::erase(Common::String const&)", "Common::Array<ADDetectedGame>::freeStorage(ADDetectedGame*, unsigned int)", "Common::HashMap<Common::String, FileProperties, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::operator=(Common::HashMap<Common::String, FileProperties, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&)", "AgiMetaEngineDetection::~AgiMetaEngineDetection()", "AgiMetaEngineDetection::~AgiMetaEngineDetection().1", "DetectedGame::~DetectedGame()", "AGSMetaEngineDetection::~AGSMetaEngineDetection()", "AGSMetaEngineDetection::~AGSMetaEngineDetection().1", "Common::HashMap<Common::String, Common::String, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::operator=(Common::HashMap<Common::String, Common::String, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo> const&)", "DirectorMetaEngineDetection::~DirectorMetaEngineDetection()", "DirectorMetaEngineDetection::~DirectorMetaEngineDetection().1", "Glk::Comprehend::ComprehendMetaEngine::findGame(char const*)", "Glk::Blorb::hasFile(Common::Path const&) const", "OSystem_SDL::setWindowCaption(Common::U32String const&)", "virtual thunk to OSystem_SDL::setWindowCaption(Common::U32String const&)", "OSystem_SDL::getSystemLanguage() const", "Common::List<Common::String>::pop_front()", "QualifiedGameDescriptor::~QualifiedGameDescriptor()", "Common::List<Common::String>::~List()", "MD5CacheManager::~MD5CacheManager()", "AdvancedMetaEngineDetection::isEntryGrayListed(ADGameDescription const*) const", "FileMapArchive::hasFile(Common::Path const&) const", "Common::List<Common::INIFile::Section>::clear()", "Common::HashMap<Common::String, Common::Array<Common::AchievementDescription>, Common::Hash<Common::String>, Common::EqualTo<Common::String>>::freeNode(Common::HashMap<Common::String, Common::Array<Common::AchievementDescription>, Common::Hash<Common::String>, Common::EqualTo<Common::String>>::Node*)", "Common::AchievementsManager::~AchievementsManager()", "Common::AchievementsManager::isAchieved(Common::String const&) const", "Common::AchievementsManager::getAchievementCount() const", "Common::AchievementsManager::getAchievementDescription(unsigned short) const", "ChainedGamesManager::~ChainedGamesManager()", "ChainedGamesManager::~ChainedGamesManager().1", "Common::HashMap<Common::String, Common::Array<Common::String>, Common::Hash<Common::String>, Common::EqualTo<Common::String>>::~HashMap()", "Common::Array<GUI::GridItemInfo>::freeStorage(GUI::GridItemInfo*, unsigned int)", "Common::XMLParser::XMLKeyLayout::~XMLKeyLayout()", "Common::ConfigManager::Domain::~Domain()", "Common::Array<GUI::LangExtraFont>::freeStorage(GUI::LangExtraFont*, unsigned int)", "GUI::ThemeParser::parserCallback_font(Common::XMLParser::ParserNode*)", "GUI::UnknownGameDialog::encodeUrlString(Common::String const&)", "GUI::StaticTextWidget::setValue(int)", "GUI::GroupedListWidget::~GroupedListWidget()", "GUI::PopUpWidget::clearEntries()", "Common::String::operator+=(char const*)", "Common::String::operator+=(Common::String const&)", "Common::operator+(char const*, Common::String const&)", "Common::String::operator+=(char)", "Common::tag2string(unsigned int, bool)", "Common::String::operator=(Common::String&&)", "Common::BaseString<char32_t>::insertString(Common::BaseString<char32_t> const&, unsigned int)", "Common::BaseString<char32_t>::toLowercase()", "Common::U32String::decodeInternal(char const*, unsigned int, Common::CodePage)", "Common::U32String::operator+=(char32_t)", "Common::BaseString<char32_t>::makeUnique()", "Common::BaseString<char32_t>::deleteChar(unsigned int)", "Common::BaseString<char32_t>::deleteLastChar()", "Common::BaseString<char32_t>::insertChar(char32_t, unsigned int)", "Common::U32String::operator=(Common::String const&)", "Common::U32String::operator=(char const*)", "non-virtual thunk to Common::VirtualMouse::~VirtualMouse()", "Common::VirtualMouse::~VirtualMouse().1", "non-virtual thunk to Common::VirtualMouse::~VirtualMouse().1", "virtual thunk to SurfaceSdlGraphicsManager::displayActivityIconOnOSD(Graphics::Surface const*)", "Common::convertBiDiU32String(Common::U32String const&, Common::BiDiParagraph)", "Common::U32String::formatInternal(Common::U32String const*, ...)", "virtual thunk to SdlGraphicsManager::initSizeHint(Common::Array<Graphics::Mode> const&)", "OpenGL::Shader::enableVertexAttribute(char const*, int, unsigned int, unsigned char, int, void const*)", "OpenGL::Shader::enableVertexAttribute(char const*, unsigned int, int, unsigned int, unsigned char, int, unsigned int)", "Common::ConfigManager::getDomain(Common::String const&) const", "Common::ConfigManager::get(Common::String const&) const", "Graphics::FontManager::getFontByUsage(Graphics::FontManager::FontUsage) const", "GUI::ThemeEngine::getImageSurface(Common::String const&) const", "SdlGraphicsManager::setSystemMousePosition(int, int)", "virtual thunk to SdlGraphicsManager::setSystemMousePosition(int, int)", "virtual thunk to SurfaceSdlGraphicsManager::grabOverlay(Graphics::Surface&) const", "OpenGL::TiledSurface::fill(unsigned int)", "Graphics::VectorRendererSpec<unsigned short>::fillSurface()", "Graphics::VectorRendererSpec<unsigned short>::drawInteriorRoundedSquareAlg(int, int, int, int, int, unsigned short, Graphics::VectorRenderer::FillMode)", "Graphics::VectorRendererSpec<unsigned short>::drawInteriorRoundedSquareAlgClip(int, int, int, int, int, unsigned short, Graphics::VectorRenderer::FillMode)", "Graphics::VectorRendererSpec<unsigned short>::drawTabAlg(int, int, int, int, int, unsigned short, Graphics::VectorRenderer::FillMode, int, int)", "Graphics::VectorRendererSpec<unsigned short>::drawTabAlgClip(int, int, int, int, int, unsigned short, Graphics::VectorRenderer::FillMode, int, int)", "Graphics::VectorRendererAA<unsigned short>::drawTabAlg(int, int, int, int, int, unsigned short, Graphics::VectorRenderer::FillMode, int, int)", "DetectionResults::listRecognizedGames() const", "generateUnknownGameReport(DetectedGame const&, bool, bool, unsigned int)", "Common::MemoryPool::allocChunk()", "GlkMetaEngineDetection::getSupportedGames() const", "ScummMetaEngineDetection::getSupportedGames() const", "SkyMetaEngineDetection::getSupportedGames() const", "AdvancedMetaEngineDetection::getSupportedGames() const", "Common::CompositeHardwareInputSet::addHardwareInputSet(Common::HardwareInputSet*)", "Common::Array<Common::Action*>::push_back(Common::Array<Common::Action*> const&)", "GUI::GridWidget::calcVisibleEntries()", "Graphics::VectorRendererSpec<unsigned int>::precalcGradient(int)", "DetectionResults::generateUnknownGameReport(bool, unsigned int) const", "Common::PEResources::~PEResources().1", "GUI::MetadataParser::~MetadataParser().1", "GUI::ThemeParser::~ThemeParser().1", "MT32Emu::RhythmPart::noteOff(unsigned int)", "MT32Emu::Part::noteOff(unsigned int)", "mt32emu_play_msg", "png_get_IHDR", "png_set_IHDR", "png_colorspace_set_sRGB", "png_chunk_benign_error", "png_handle_IEND", "png_set_expand", "png_icc_profile_error", "png_read_finish_row", "png_write_chunk", "png_write_tIME", "png_write_finish_row", "DISKAUDIO_DetectDevices", "SdlMixerManager::suspendAudio()", "SDL_AudioOpenDevice_Default", "SDL_BlendPoint_RGB", "SDL_BlendPoint_RGBA", "SDL_BlendFillRect_RGB", "SDL_BlendFillRect_RGBA", "stdio_write", "EMSCRIPTEN_JoystickRumble", "EMSCRIPTEN_JoystickSetLED", "Emscripten_WarpMouse", "SDL_GameControllerGetAxis", "SDL_InitFormat", "SDL_SetClipRect", "SDL_SoftStretch", "SDL_SoftStretchLinear", "EMSCRIPTEN_JoystickUpdate", "SDL_AutoUpdateJoysticksChanged", "SDL_ResetKeyboard", "SDL_ReleaseAutoReleaseKeys", "SDL_SendPendingSignalEvents", "Emscripten_HandleBeforeUnload", "SdlEventSource::~SdlEventSource().1", "GLES2_QueueGeometry", "GLES2_QueueDrawLines", "GLES2_QueueDrawPoints", "SW_QueueGeometry", "SW_QueueCopyEx", "SW_QueueCopy", "SW_QueueFillRects", "SW_QueueDrawPoints", "Emscripten_HandleMouseMove", "SdlGraphicsManager::lockMouse(bool)", "virtual thunk to SdlGraphicsManager::lockMouse(bool)", "SDL_RLEBlit", "SDL_RLEAlphaBlit", "SW_UpdateTexture", "SdlWindow::~SdlWindow().1", "SdlGraphicsManager::notifyActiveAreaChanged()", "virtual thunk to SdlGraphicsManager::notifyActiveAreaChanged()", "Graphics::TTFFont::~TTFFont().1", "pfr_get_kerning", "sfnt_get_charset_id", "raccess_guess_apple_double", "raccess_guess_apple_single", "raccess_guess_vfat", "raccess_guess_linux_cap", "af_dummy_hints_apply", "af_latin_hints_apply", "af_cjk_hints_apply", "af_latin_hints_detect_features", "af_cjk_hints_detect_features", "TT_Load_Composite_Glyph", "cf2_doStems", "cf2_hintmap_build", "ps_hints_close", "t1_hints_stem", "t2_hints_stems", "ps_hints_t2counter", "ps_hints_t2mask", "PosixIoStream::~PosixIoStream()", "PosixIoStream::~PosixIoStream().1", "non-virtual thunk to PosixIoStream::~PosixIoStream()", "non-virtual thunk to PosixIoStream::~PosixIoStream().1", "MT32Emu::ReportHandler::printDebug(char const*, void*)", "nsvg__parseColor(char const*)", "fseek", "StdioStream::size() const", "non-virtual thunk to StdioStream::size() const", "StdioStream::seek(long long, int)", "non-virtual thunk to StdioStream::seek(long long, int)", "StdioStream::pos() const", "non-virtual thunk to StdioStream::pos() const", "fputs", "StdioStream::write(void const*, unsigned int)", "non-virtual thunk to StdioStream::write(void const*, unsigned int)", "pad", "fmt_fp", "qsort", "strtod", "vsnprintf", "fiprintf", "iprintf", "siprintf", "Common::ConfigManager::getDomain(Common::String const&)", "SdlGraphicsManager::activateManager()", "SRCTools::IIR2xDecimator::IIR2xDecimator(SRCTools::IIRResampler::Quality)", "Common::VirtualMouse::notifyEvent(Common::Event const&)", "OpenGLSdlGraphicsManager::hasFeature(OSystem::Feature) const", "Graphics::YUVToRGBManager::convert410(Graphics::Surface*, Graphics::YUVToRGBManager::LuminanceScale, unsigned char const*, unsigned char const*, unsigned char const*, int, int, int, int)", "Common::Error::Error(Common::ErrorCode)", "Common::String::substr(unsigned long, unsigned long) const", "OSystem::getDefaultConfigFileName()", "OSystem::getSystemLanguage() const", "Graphics::Font::getFontName() const", "Graphics::TTFFont::getFontName() const", "SdlWindow::SdlWindow()", "Common::String::String(char const*)", "QualifiedGameDescriptor::QualifiedGameDescriptor(char const*, PlainGameDescriptor const&)", "Common::StringTokenizer::nextToken()", "Common::U32String::substr(unsigned long, unsigned long) const", "Common::U32StringTokenizer::nextToken()", "Common::HashMap<Common::String, Common::String, Common::IgnoreCase_Hash, Common::IgnoreCase_EqualTo>::operator[](Common::String const&)", "virtual thunk to OSystem_SDL::getHardwareInputSet()", "Common::HashMap<int, Graphics::ManagedSurface const*, Common::Hash<int>, Common::EqualTo<int>>::lookupAndCreateIfMissing(int const&)", "GUI::ListWidget::~ListWidget().1", "non-virtual thunk to GUI::ListWidget::~ListWidget()", "non-virtual thunk to GUI::ListWidget::~ListWidget().1", "Graphics::TTFFont::drawChar(Graphics::Surface*, unsigned int, int, int, unsigned int) const", "Common::Path::append(char const*, char) const", "virtual thunk to OSystem_POSIX::getDefaultConfigFileName()", "void Common::sort<GUI::LauncherEntry*, GUI::LauncherEntryComparator>(GUI::LauncherEntry*, GUI::LauncherEntry*, GUI::LauncherEntryComparator)", "void Common::sort<DetectedGame*, GUI::GameTargetLess>(DetectedGame*, DetectedGame*, GUI::GameTargetLess)", "void Common::sort<DetectedGame*, GUI::GameDescLess>(DetectedGame*, DetectedGame*, GUI::GameDescLess)", "GUI::ThemeEval::getVar(Common::String const&, int)", "Common::TranslationManager::getTranslation(char const*) const", "Common::TranslationManager::getTranslation(Common::String const&) const", "Common::TranslationManager::getTranslation(Common::String const&, Common::String const&) const", "Common::ConfigManager::~ConfigManager().1", "Common::DebugManager::~DebugManager()", "Common::DebugManager::~DebugManager().1", "MetaEngineDetection::parseAndCustomizeGuiOptions(Common::String const&, Common::String const&) const", "Common::MainTranslationManager::~MainTranslationManager()", "Common::MainTranslationManager::~MainTranslationManager().1", "AccessMetaEngineDetection::~AccessMetaEngineDetection()", "GlkMetaEngineDetection::findGame(char const*) const", "virtual thunk to OSystem_SDL::getSystemLanguage() const", "MD5CacheManager::~MD5CacheManager().1", "Common::AchievementsManager::~AchievementsManager().1", "GUI::MetadataParser::CustomXMLKeyLayout::~CustomXMLKeyLayout()", "GUI::GroupedListWidget::~GroupedListWidget().1", "non-virtual thunk to GUI::GroupedListWidget::~GroupedListWidget()", "non-virtual thunk to GUI::GroupedListWidget::~GroupedListWidget().1", "MidiDriver::musicType2GUIO(unsigned int)", "DetectedGame::appendGUIOptions(Common::String const&)", "Common::Path::toString(char) const", "Common::String::decode(Common::CodePage) const", "Common::U32String::U32String(char const*, Common::CodePage)", "Common::U32String::U32String(Common::String const&, Common::CodePage)", "GUI::ListWidget::escapeString(Common::U32String const&)", "Common::ConfigManager::hasKey(Common::String const&, Common::String const&) const", "OpenGLSdlGraphics3dManager::clearOverlay()", "virtual thunk to OpenGLSdlGraphics3dManager::clearOverlay()", "Graphics::VectorRendererSpec<unsigned int>::fillSurface()", "Graphics::VectorRendererSpec<unsigned int>::drawInteriorRoundedSquareAlg(int, int, int, int, int, unsigned int, Graphics::VectorRenderer::FillMode)", "Graphics::VectorRendererSpec<unsigned int>::drawInteriorRoundedSquareAlgClip(int, int, int, int, int, unsigned int, Graphics::VectorRenderer::FillMode)", "Graphics::VectorRendererSpec<unsigned int>::drawTabAlg(int, int, int, int, int, unsigned int, Graphics::VectorRenderer::FillMode, int, int)", "Graphics::VectorRendererSpec<unsigned int>::drawTabAlgClip(int, int, int, int, int, unsigned int, Graphics::VectorRenderer::FillMode, int, int)", "Graphics::VectorRendererAA<unsigned int>::drawTabAlg(int, int, int, int, int, unsigned int, Graphics::VectorRenderer::FillMode, int, int)", "af_indic_hints_apply", "nsvg__parseAttr(NSVGparser*, char const*, char const*)", "PosixIoStream::size() const", "non-virtual thunk to PosixIoStream::size() const", "SDL_qsort", "atof", "SDL_snprintf", "SDL_vsnprintf", "__dl_seterr", "snprintf", "Base::usage(char const*, ...)", "SDL_LogOutput", "MT32Emu::ReportHandler::showLCDMessage(char const*)", "format_message", "non-virtual thunk to Common::VirtualMouse::notifyEvent(Common::Event const&)", "TownsEmuMusicPlugin::createInstance(MidiDriver**, unsigned int) const", "Common::ZipArchive::translatePath(Common::Path const&) const", "GUI::ListWidget::getThemeColor(GUI::ThemeEngine::FontColor)", "POSIXFilesystemNode::getDisplayName() const", "nsvg__startElement(void*, char const*, char const**)", "nsvg__parseGradient(NSVGparser*, char const**, char)", "nsvg__parseGradientStop(NSVGparser*, char const**)", "nsvg__parseAttribs(NSVGparser*, char const**)", "nsvg__parsePoly(NSVGparser*, char const**, int)", "SDL_MouseNormalSpeedScaleChanged", "SDL_MouseRelativeSpeedScaleChanged", "SDL_PrivateAppendToMappingString", "GuessControllerType", "SDL_UnloadObject"] -s EXPORT_ALL=1
PRE_OBJS_FLAGS  := -s MAIN_MODULE=1 -s EXPORT_ALL=1
POST_OBJS_FLAGS :=


port_mk = ports.mk
